<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远川的博客</title>
  
  <subtitle>CrazyStudent13的个人成长记录</subtitle>
  <link href="https://crazystudent13.github.io/atom.xml" rel="self"/>
  
  <link href="https://crazystudent13.github.io/"/>
  <updated>2023-04-03T05:00:25.505Z</updated>
  <id>https://crazystudent13.github.io/</id>
  
  <author>
    <name>CrazyStudent13</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>注册及使用chatGPT</title>
    <link href="https://crazystudent13.github.io/2023/04/02/%E6%B3%A8%E5%86%8C%E5%8F%8A%E4%BD%BF%E7%94%A8chatGPT/"/>
    <id>https://crazystudent13.github.io/2023/04/02/%E6%B3%A8%E5%86%8C%E5%8F%8A%E4%BD%BF%E7%94%A8chatGPT/</id>
    <published>2023-04-02T14:21:33.000Z</published>
    <updated>2023-04-03T05:00:25.505Z</updated>
    
    <content type="html"><![CDATA[<p>风云激荡，时代变幻，人工智能，你终于来了。</p><p>本来以为这玩意，会和核聚变一样永远差50年，但是没想到，他现在就来了，而且以如此呼啸的方式。</p><p>不过，既来之，则安之，我们这里记录一下注册方式，当然，随着形式变化，该文档会不定期修改。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本来以为会很麻烦，但是没想到很简单，整个流程不过就十分钟左右就完了。</p><p>如果是经常使用这些墙外软件的朋友，估计会更快。</p><h3 id="邮箱注册"><a href="#邮箱注册" class="headerlink" title="邮箱注册"></a>邮箱注册</h3><p>在注册之前，先注意满足以下的前提</p><ul><li>更换梯子节点，尽量不要选择东亚和俄罗斯，选择东南亚和欧洲节点</li><li>最好清理一下页面缓存</li></ul><p>如果不确定自己IP已经切换到境外，可以使用<a href="https://ipinfo.io/">ipinfo.io</a>看一下，只要信息框中的timezone显示不是china就行。</p><p>满足以上条件之后，在<a href="https://openai.com/blog/chatgpt">chatGPT</a>官网，点击<a href="https://chat.openai.com/auth/login">Try chatGPT</a>，之后sign up进入注册流程就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Signup is currently unavailable, please try again later！</span><br></pre></td></tr></table></figure><p>如果你正常填写邮箱和密码之后，出现上述提示，那你排查注册的邮箱有无如下情况</p><ul><li>QQ邮箱，foxmail邮箱</li><li>163邮箱，网易邮箱yeah.net，126邮箱</li><li>新浪邮箱</li><li>Outlook、hotmail邮箱（<del>只能通过快捷登录，也就是Continue with Microsoft Account</del>）2023年4月2日更新：目前微软邮箱已经不能注册ChatGPT，使用Continue with Microsoft Account这种方式也不行。</li><li>eud.cn邮箱</li><li>Gmail(只能通过快捷登录，也就是Continue with Google）</li></ul><p>主要是现在chatGPT封禁了东亚区的注册，所以，以上邮箱会无效。</p><p>如果你暂时没有好的解决办法，我推荐你使用自定义域名的邮箱，或者公司提供的企业邮箱即可。</p><h3 id="获取手机验证码"><a href="#获取手机验证码" class="headerlink" title="获取手机验证码"></a>获取手机验证码</h3><p>完成了上述的邮箱注册之后，可能会需要当前用户提供手机号，这里主要用境外手机号，填写验证码就行。</p><ol><li>选择好自己手机号对应的国家</li><li>尽可能的不选择东亚这块的国家注册手机号</li></ol><p>针对墙内用户，如果有自己的海外手机号，那没什么好说的，用自己的海外手机号验证码注册一下就行。</p><p>但是如果你没有海外手机号，可以注册<a href="https://sms-activate.org/">sms-activate</a>，充值就可以，允许使用支付宝的。</p><p>推荐这里参考这个文档：<a href="https://zhuanlan.zhihu.com/p/615585092">如何使用sms-activate服务 - 知乎 (zhihu.com)</a></p><p>进入页面之后，左侧选择OpenAI，然后选一个国家，按照教程的流程注册一下就行。</p><p>这里推荐选择东欧的一些国家，比如罗马尼亚（Romania）之类的，因为最近似乎有针对亚洲国家封禁的情况，这个还是挺尬的。</p><p>填入验证码之后，chatGPT就注册好了，之后就可以用了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>对于如此强劲的新技术，在初步体验之后，我实在是无法拒绝。</p><p>也许，新的技术奇点已经到了，未来真是值得期待啊。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.vpsdawanjia.com/6251.html">ChatGPT无法注册的原因错误提示：Signup is currently unavailable, please try again later</a></p><p><a href="https://zhuanlan.zhihu.com/p/615585092">如何使用sms-activate服务 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;风云激荡，时代变幻，人工智能，你终于来了。&lt;/p&gt;
&lt;p&gt;本来以为这玩意，会和核聚变一样永远差50年，但是没想到，他现在就来了，而且以如此呼啸的方式。&lt;/p&gt;
&lt;p&gt;不过，既来之，则安之，我们这里记录一下注册方式，当然，随着形式变化，该文档会不定期修改。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ai" scheme="https://crazystudent13.github.io/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>2023年的第一次手术（后）</title>
    <link href="https://crazystudent13.github.io/2023/03/31/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%8B%E6%9C%AF%EF%BC%88%E5%90%8E%EF%BC%89/"/>
    <id>https://crazystudent13.github.io/2023/03/31/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%8B%E6%9C%AF%EF%BC%88%E5%90%8E%EF%BC%89/</id>
    <published>2023-03-31T15:10:12.000Z</published>
    <updated>2023-04-02T13:13:51.168Z</updated>
    
    <content type="html"><![CDATA[<p>因乳头状细胞癌，所以需要切除右侧甲状腺，折腾了快两周，伤口终于快好了。</p><p>这里记录一下术后的日子，也算是缅怀一下这段不同寻常的时光吧。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>梳理了一下住院前后流程，真是感觉这段时间蛮让人感慨的。</p><p>果然，就算说是小手术，对于身体来说，还是相当的遭罪啊。</p><h3 id="术前问题"><a href="#术前问题" class="headerlink" title="术前问题"></a>术前问题</h3><p>因为这个病查出来的挺突然，手术前，心里还是做了一段时间的博弈，整理了如下问题。</p><p>我感觉后续如果再遇到大病了，都可以按照这个思考逻辑来，这里也给大家做个参考。</p><ol><li>治疗方式具体都有什么？</li><li>拖着不做可以吗？</li><li>这个手术的后遗症是什么？</li><li>手术费用是否会很多？医保能报多少？（有钱人不必考虑）</li><li>手术后调理恢复要多久？是否会耽误日常生活？</li></ol><p>我的手术是甲状腺切除，咨询了医生的意见之后，我自己评估了一下，可以接受，确实不是啥大问题。</p><ol><li>只要手术切除甲状腺即可，不需要化疗，这病是危险性最小的癌症。</li><li>我这个甲状腺细胞乳头状癌拖着没啥，但癌细胞有扩散风险，尽管不高，但是要做。</li><li>后遗症就是以后都要吃优碘乐，而且手术如果出了意料外的情况，说不定会干扰声带的音色，但是医生自信9成可能不会出这种问题。</li><li>手术费用反而最不用担心，医保报了6成费用之后，自己缴费即可，术后结账我算了一下，拢共也就近4千。</li><li>手术调理按照医嘱即可，两周就差不多正常行动。</li></ol><h3 id="住院准备"><a href="#住院准备" class="headerlink" title="住院准备"></a>住院准备</h3><p>在确认必须要做手术后，事情就好办了。</p><p>和有住院经历的朋友确认了相关事宜后，我大概做了如下的准备。</p><ul><li>带本子和笔，护士的嘱托会很多，如果不记录，后续忙起来容易忘</li><li>准备住院金，提前和医生确定好预期金额，到时候交就可以</li><li>确认医院附近的食堂和外卖取餐点，不然术后，自己和家人吃饭，找起来会是个问题</li><li>确认好手术时间之后，让家人在手术当天陪同就可以，如无必要，不必第一天让家人在医院就开始等着</li><li>如有必要，让家人带一床被褥，夜里如果保持通风，房间会偏冷</li><li>带一身换洗衣服，不过我住院时间很短，所以这个不需要</li><li>医院里有褪黑素，不过没用到，那天我靠着自己强大的意志力，在同房的呼噜声中睡着了</li></ul><h3 id="提前出院"><a href="#提前出院" class="headerlink" title="提前出院"></a>提前出院</h3><p>本来想写写手术的感觉，但是吧，手术全麻太给力。</p><p>医生说让我吸两口氧，结果吸完我就没意识了。</p><p>等到再醒我就被推出来了，好家伙，手术已经结束了？这过程，就是把我腰子拿了，我估计我都没有反应。</p><p>所以，手术没啥好说的。</p><p>反而是术后，我住院时候没细说多久，结果上午刚手术完，下午就和我说，第二天上午可以出院了。</p><p>这个速度快的我有点无语，当时为了吸出伤口内的血液，我脖子还插着一个导流管呢，根本不方便行动。</p><p>然而就是这么个状态，就让我出院了，属实离谱，后来我考虑了一下，觉得可能是医院床位不足的问题。</p><p>剩下的就没啥好说的了，第二天麻药劲儿过了，伤口也愈合的可以简单行动，就按照医生说的，交钱，收拾房间，走人。</p><h3 id="术后恢复"><a href="#术后恢复" class="headerlink" title="术后恢复"></a>术后恢复</h3><p>本来以为三两天就能恢复，但是没想到花了快两周时间，现在才差不多恢复结束。</p><ul><li>两天后拆导流管</li><li>每三天换药，需要去医院</li><li>一周后拆线</li></ul><p>如上，过了一周，然后又在家里躺了一周，嗓子吃饭和说话都不太好使，还是怪难受的。</p><p>不过，现在伤口恢复的差不多了，甚至吃了个火锅，挺好，一周没有吃点辣味，简直要死了。</p><p>但是目前没有完全恢复，稍微走动就会累，而且容易困，并且如果药稍微吃晚点，就容易腿疼。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这次的手术蛮让我感慨的，不论这次的病症是不是一开始的不规律作息及饮食，我都要考虑身体的稳定了。</p><p>我只是普通人，所以这也算是足够幸运了，虽然这个病出乎意料，却没有造成太大的困扰。</p><p>随着年龄越来越大，身体愈发破败，苍老是肉眼可见的，如果再这么玩下去，我确实必死无疑。</p><p>这像是命运的警告，亦是命运的垂怜。</p><p>希望接下来身体会好起来，希望我不会是个短命鬼。</p><p>人世间很精彩，现在正是时代交界的时刻，我很想见证。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因乳头状细胞癌，所以需要切除右侧甲状腺，折腾了快两周，伤口终于快好了。&lt;/p&gt;
&lt;p&gt;这里记录一下术后的日子，也算是缅怀一下这段不同寻常的时光吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://crazystudent13.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>nas使用心得笔记————入门篇</title>
    <link href="https://crazystudent13.github.io/2023/03/11/nas%E4%BD%BF%E7%94%A8%E5%BE%97%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>https://crazystudent13.github.io/2023/03/11/nas%E4%BD%BF%E7%94%A8%E5%BE%97%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E7%AF%87/</id>
    <published>2023-03-11T06:17:35.000Z</published>
    <updated>2023-03-31T15:09:46.504Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文档给还没入坑的小伙伴一个介绍引导，如有说错，还请在评论区多多指教。</p><p>如果你是个整准备入坑的小白，可以试着和群里的大家交流搞机心得（哎嘿）。</p><p>当然，欢迎老手指正，也欢迎新手提问。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本篇内容作为入门内容，只告诉大家怎么选购，选购后可能会遇到哪些坑。</p><p>所以，这里并不会详细的深入探讨内网穿透，家庭音影搭建，脚本部署等问题。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>nas的详细定义去看<a href="https://baike.baidu.com/item/NAS/3465615?fr=aladdin">百度百科</a>，就我个人来看，这个东西就是私有的个人云盘。</p><p>正常的电脑轻度用户，一般是不会有这种需求的。所以，我们首先分析需求，这里我列一下可能的方向。</p><ol><li><strong>家庭影院</strong>，有很多电影资源，不仅在局域网看，也想在公网远程观看</li><li><strong>大文件备份</strong>，手里有很多照片，文档，压缩包之类的文件需要备份</li><li><strong>后台下载</strong>，有很多本机存不下，又想要下载的时候，可以使用。</li><li><strong>担心网盘检测</strong>，被净网行动教育过，不安心厂商网盘的检验</li></ol><p>如果有以上的一种或者多种需求，那么，我个人建议，可以考虑综合实力使用nas。</p><p>作为私人云盘来说，nas的存在，确实让很多事情方便了很多。</p><p>当然，如果你只是想存备份，不考虑远程备份。我推荐考虑<strong>硬盘柜</strong>，只要共振问题不大，就可入手。</p><h3 id="入门条件"><a href="#入门条件" class="headerlink" title="入门条件"></a>入门条件</h3><p>在需求分析之后，我们确认如果有以下硬性条件，的就可以考虑入门了。</p><ol><li>时间较充裕，如果您每日加班到深夜，就略过吧，这玩意如果想折腾的合心意，较为花时间</li><li>金钱较为充裕，至少保证有4k以上的预算，不会说因为买个机器，接下来几个月都要吃咸菜馒头算日子</li><li>有一个较为稳定的住所，保证网络和供电，可长期规划，毕竟nas更偏向于远程访问</li><li>有一定的搞机常识，对于软硬件知识有基础的了解</li><li>动手能力强，善用搜索引擎，能保证在B站或者其他论坛解决一些问题</li></ol><h3 id="主机挑选"><a href="#主机挑选" class="headerlink" title="主机挑选"></a>主机挑选</h3><p>在正式罗列之前，我先列出nas机器的评判标准（个人主观意见）。</p><p>后续如果我们选购nas，拿不定评价方向，可以参考如下思路进行评测，权重按照自己的要求衡量。</p><ol><li>系统生态，这个对于比较喜欢折腾的人来说，比较重要，社区的活力一般决定厂商是否走的长远</li><li>是否耗电，不要产品便宜，设备烧电，不然长久下来，电费也是一笔大开支</li><li>硬件损耗，是否会对机械硬盘造成强烈损耗，不然数据损毁恢复起来，也是一笔不小的开支</li><li>噪音问题，家用nas虽然设备垃圾，但是相对的，散热要求不高，所以噪音一般不大</li><li>产品价格，性价比也是个比较重要的参考项，不过一定要在满足硬件标准的情况下考虑</li></ol><h4 id="群晖系列"><a href="#群晖系列" class="headerlink" title="群晖系列"></a><a href="https://mall.jd.com/index-1000002032.html?from=pc">群晖系列</a></h4><p>不差钱的富哥首选，高薪打工人的备选，穷鬼别沾，真的太贵了！</p><p>光价格，如果要是六盘位，八盘位，就足足赶得上一台高配电脑了，这还不算硬盘的裸机价格。</p><p>我个人觉得这实在是高的离谱，即便我买的也是这个系列，但我依然感觉这个价格很咋舌，实在是有种智商税的感觉了。</p><p>不过，我当时主要是没太多时间折腾，而且，它贵确实有贵的理由，我这里罗列一下原因</p><ol><li>正版系统，不担心各种软件使用不稳定的问题，不折腾</li><li>功耗足够低，不会担心成为国家电网的合作伙伴</li><li>噪音相对不大，卧室可以放，不至于和服务器一样，一开就是飞机起飞</li><li>盗版系统社区发展好，社区足够的强大，大多数偏门的社区套件，都是从盗版社区发源来的</li><li>有客服，真出了搞不定的问题，我能找客服帮忙做事</li></ol><p>当然，不是没有缺陷，群晖的机器用的设备较拉胯，一般来说，个人组的黑群晖能吊着打正版群晖，这个看个人取舍。</p><h4 id="其他厂商"><a href="#其他厂商" class="headerlink" title="其他厂商"></a>其他厂商</h4><p>除了群晖，市面上确实之后其他厂商了，毕竟盗版系统刷群晖的居多，有什么问题都好解决。</p><p>尽管市面上<a href="https://item.jd.com/100016638665.html">威联通</a>，<a href="https://item.jd.com/100039880211.html">绿联</a>，还有各种厂商都做了很多自家的nas，尤其是威联通的性价比还不错。</p><p>但是，如果系统出了啥问题，大多数都只能去各种社区论坛找方案，找客服进度缓慢，所以这里不是很推荐。</p><h4 id="黑群晖"><a href="#黑群晖" class="headerlink" title="黑群晖"></a>黑群晖</h4><p>现在市面上是有一些自售的成品，我看了一下价格，性价比非常高。</p><p>而且，烧盘问题已经解决了，早期黑群晖系统因为系统休眠问题，对硬盘损耗极大，几个月就能烧掉一个新硬盘。</p><p>在解决掉烧盘问题之后，现在的黑群晖，几乎算是没有短板，我个人十分推荐组一个，推荐理由我这里也列一下。</p><ol><li>性能好，硬件自选，不用被官方束缚，所以很多人组的快赶上服务器了</li><li>价格超低，基本上800-1000，就能组一台暴打正版的高性能设备，盘位还多</li><li>社区解决方案多，因为早期折腾的人多，所以问题也多，所以解决方案就多</li><li>基本上和正版没什么差别的系统，现在基本上和官方一样了，只要刷白，问题不大</li><li>噪音也不大，卧室可用</li></ol><p>这里，也列一下大佬给出的组合作为参考（2023）</p><ol><li>主板，b365</li><li>cpu，g4560</li><li>机箱，蜜獾超存机箱（闲鱼上找，其他平台要么没有要么很贵） </li><li>内存条，威刚万紫千红8&#x2F;16G</li></ol><h3 id="硬盘相关"><a href="#硬盘相关" class="headerlink" title="硬盘相关"></a>硬盘相关</h3><p>硬盘是nas的核心，毕竟作为特化存储的设备，必然是要用机械硬盘的，固态盘的虽然快，但因为它的结构，所以它不能作为长久存储方案。</p><p>我个人推荐先看完<a href="https://www.bilibili.com/video/BV1rE411Q71m/?spm_id_from=333.999.0.0&vd_source=ee3784ffe5f760cb992921cb8c5c98e5">硬件茶谈的科普</a>，这个科普详尽而且务实，弄明白了，相信你自己心中也有一套选购标准。</p><p>我这里主要说一些我已经整理到的入门信息，仅供参考使用</p><ol><li>不选瓦楞盘(SMR)，<strong>选垂直盘（CMR）！</strong>具体参考<a href="https://www.bilibili.com/video/BV1rE411Q71m/?spm_id_from=333.999.0.0&vd_source=ee3784ffe5f760cb992921cb8c5c98e5">硬件茶谈的科普</a></li><li>硬盘缓存尽可能的选大的，硬盘在写入数据的时候，大缓存硬盘相对来说频率会低一些，响声不会太大，当然出问题的概率也更高</li><li>机械盘如果没有特别价位参考的话，推荐按照180&#x2F;T的单价来算，一般来说，16-18T左右的硬盘性价比最高</li><li>具体容量大小自行决定，如果只想组家庭影院，推荐上企业盘</li><li>是否组raid，要看自己整理的数据是否重要，性价比是否值得，如果是企业数据，推荐组Raid1</li><li>不要无脑Raid0，组Raid0虽然读写速度快，但是一旦出问题，所有数据会全部崩盘，所以不要乱来</li><li>机械硬盘的寿命很长，据说有十年都没问题的，你也可以选择冷备份，每隔两三年拿出来读写一次就可以</li></ol><h3 id="使用相关"><a href="#使用相关" class="headerlink" title="使用相关"></a>使用相关</h3><ol><li>尽量放在网络稳定的环境里，使用舒心，硬盘如果长期上传下载也不会出现问题</li><li>使用环境避免潮湿，灰尘，保持通风，硬盘还是蛮娇贵的，机器无所谓</li><li>电力尽可能的稳定，能够保证不会因硬关机导致机械硬盘损坏</li><li>尽量不要放在频繁振动的地方，不然会影响硬盘的指针精度，导致硬盘损毁</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来只是打算简单写篇入门文档，没想到一写就写了一天。</p><p>信息收集不易，后续如果有机会，我会继续更新nas相关文档。</p><p>如果有兴趣，可以加群813222463，大家一起讨论。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本系列文档给还没入坑的小伙伴一个介绍引导，如有说错，还请在评论区多多指教。&lt;/p&gt;
&lt;p&gt;如果你是个整准备入坑的小白，可以试着和群里的大家交流搞机心得（哎嘿）。&lt;/p&gt;
&lt;p&gt;当然，欢迎老手指正，也欢迎新手提问。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nas" scheme="https://crazystudent13.github.io/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>2023年的第一次手术（前）</title>
    <link href="https://crazystudent13.github.io/2023/03/09/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%8B%E6%9C%AF%EF%BC%88%E5%89%8D%EF%BC%89/"/>
    <id>https://crazystudent13.github.io/2023/03/09/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%8B%E6%9C%AF%EF%BC%88%E5%89%8D%EF%BC%89/</id>
    <published>2023-03-09T13:31:48.000Z</published>
    <updated>2023-03-31T15:09:46.503Z</updated>
    
    <content type="html"><![CDATA[<p>虽然做好了这次体检很糟糕的情况，但是没想到会这么糟糕。</p><p>甲状腺结节，穿刺验证之后，病理科给出判断——<strong>乳头状癌</strong>，考虑手术。</p><p>嗯，真是开年有惊喜的捏。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一开始查出来这结果，人懵了，毕竟只要沾上癌症之类的字样，基本等同于宣判死刑。</p><p>不过后来去找医生咨询了结果之后，大致可以接受。</p><p>这里把近况稍微做个梳理，也把我术前的心态记录一下。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ul><li>问题不是很严重，是一种较为常见病症，不是需要特殊命名的情况</li><li>手术可以解决，复发率不高，且对寿命等无影响，不会遗传</li><li>如果长期不解决的话，大致情况就是可能随淋巴扩散，产生其他问题</li><li>医保范围覆盖了该手术，报销之后，估计也就2-3k左右，不用考虑金钱的问题</li></ul><h3 id="难处"><a href="#难处" class="headerlink" title="难处"></a>难处</h3><ul><li>我周边没有空闲的朋友能帮忙，所以最终只能让家人来帮忙</li><li>离职后正处于搬完东西的时候，现在手里基本上没有什么日用品，不方便疗养</li><li>离职后，和预期不一样，所以房租没交，现在房东没说话，所以不稳定，不好规划</li><li>因为一开始挂号不在三甲医院，这个时候，想换医院做手术，要等不少时间，较为繁琐</li><li>下个月就要开始考试了，接下来复习和调理都很费事</li><li>苏州物价偏高，花销上可能会稍微出点问题</li></ul><h3 id="备选"><a href="#备选" class="headerlink" title="备选"></a>备选</h3><p>因为我没在三甲挂号，导致现在很多事情难以处理，如果接下来能够换到三甲医院，一切自然万事大吉。</p><p>但是如果没法换过去，只能按照如下三种备选方案做事了。</p><ol><li>在相城人民医院直接准备手术，让家人过来帮忙照顾</li><li>回老家，动用老家的人脉在三甲医院手术</li><li>拖，等到手边的事情忙完了，再考虑手术</li></ol><p>以上三种方案，都有不小的弊端，但是也只能是目前的无奈之选了。</p><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><ol><li>如果体检出麻烦的问题，<strong>一定要去三甲挂号！</strong>听人劝，吃饱饭，别为了省事绕远路，到头来只会更麻烦</li><li>第一次挂完号之后，后续可以直接拿着检测报告找医生，医生也不喜欢别人一直挂号</li><li>检测结果整理成档案，这便于下一位医生接手</li><li>医院在手术前，需要安排床位，据之前的同事的住院经验，这个时间等待的不是很长（希望如此）</li><li>确实需要一位能够相互扶持的亲近之人，不然真出了问题，朋友们是有自己的事的，他们可以帮你，但是无法陪伴你</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>身体永远是做事的本钱，无论你心中有着何等疯狂的想法，一定要有一副野蛮的体魄才能实现。</p><p>现在这个时间点，也完全不建议用身体去交换金钱————回报太低了。</p><p>最近把所有苏州同事推荐的有意思的点逛了一下，不过，最终还是觉得观前街的美食街有意思，<strong>要得火锅</strong>的番茄汤好喝。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然做好了这次体检很糟糕的情况，但是没想到会这么糟糕。&lt;/p&gt;
&lt;p&gt;甲状腺结节，穿刺验证之后，病理科给出判断——&lt;strong&gt;乳头状癌&lt;/strong&gt;，考虑手术。&lt;/p&gt;
&lt;p&gt;嗯，真是开年有惊喜的捏。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://crazystudent13.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>npm工具包————发布</title>
    <link href="https://crazystudent13.github.io/2023/03/05/npm%E5%B7%A5%E5%85%B7%E5%8C%85%E2%80%94%E2%80%94%E5%8F%91%E5%B8%83/"/>
    <id>https://crazystudent13.github.io/2023/03/05/npm%E5%B7%A5%E5%85%B7%E5%8C%85%E2%80%94%E2%80%94%E5%8F%91%E5%B8%83/</id>
    <published>2023-03-05T12:06:17.000Z</published>
    <updated>2023-03-10T14:41:27.818Z</updated>
    
    <content type="html"><![CDATA[<p>本次开源的方法是<a href="https://demo.assetech.com.cn/">cat-tools</a>，目前该工具包已经在npm上可下载，公司多个项目使用，没出什么问题。</p><p>尽管市面上开源了<a href="https://www.lodashjs.com/">loadsh</a>，<a href="http://momentjs.cn/">moment.js</a>，<a href="https://dayjs.fenxianglu.cn/">day.js</a>这类的工具包，但是总有不能满足需求的时候。</p><p>所以，我觉得，还是得造一个趁手的工具包。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一开始，是不同的项目中，有一些独立的工具类方法的整合。</p><p>后来，独立项目越来越多，不同项目之间，同步工具类方法是个大问题。</p><p>如果某项目加入了新的方法，我就要同步复制到很多项目！</p><p>折腾很多次之后，实在感觉耽误时间，且犯错太多，所有就有了本次流程记录。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>在项目开发完成之后，我们首先要打包项目，生成一个能够发布的dist包。</p><p>当然，ui包可能有自己的结构，这个只要开发那边确认之后就行。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>然后，我们需要到<a href="https://www.npmjs.com/">npm官网</a>注册一个账号。</p><p>如果之前<strong>有npm账号的人</strong>，可以略过这步。</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>在登录之前需要保证你现在使用的 <code>npm源</code> 是指向 <code>npm</code> 的。</p><p>先安装 <code>nrm</code> 工具查看和切换 <code>npm</code> 源</p><p><code>nrm</code> 安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nrm -g</span><br></pre></td></tr></table></figure><p>查看当前使用的 <code>npm</code> 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nrm ls #查看包源列表</span><br><span class="line">nrm use npm  #切换包源列表</span><br></pre></td></tr></table></figure><p>在执行nrm use npm之后，如果命令行中有如下提示，代表切换成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Registry has been set to: https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>在终端使用一下命令登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>然后根据提示输入账号、密码、邮箱，同时还有注册邮箱的一次验证码。</p><p>以我为例，我按照下边的完成填写之后，就算是登录了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Username: *********</span><br><span class="line">Password: ********</span><br><span class="line">Email: (this IS public) *********@qq.com</span><br><span class="line">npm notice Please check your email for a one-time password (OTP)</span><br><span class="line">Enter one-time password from your authenticator app: 04471694</span><br><span class="line">Logged in as crazystudent13 on https://registry.npmjs.org/.</span><br></pre></td></tr></table></figure><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm publish # 发布公有包</span><br><span class="line">或</span><br><span class="line">npm publish --access public # 发布带命名空间的包，npm publish默认私有需要付费</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="迭代需要修改版本号"><a href="#迭代需要修改版本号" class="headerlink" title="迭代需要修改版本号"></a>迭代需要修改版本号</h4><p>如果项目更新需要重新发布，必须修改 <code>package.json</code> 里的版本号。</p><p>版本号只能不断往上增加，哪怕你后边版本号拖的很长也可以。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.2&quot;</span></span><br></pre></td></tr></table></figure><h4 id="包权限管理"><a href="#包权限管理" class="headerlink" title="包权限管理"></a>包权限管理</h4><p>很多时候，一个项目包往往不只是你一个人在管理的，这时需要给其他一起维护的同学开通发布的权限，相关使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看模块 owner, 其中 demo 为模块名称</span></span><br><span class="line">$ npm owner <span class="built_in">ls</span> demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个发布者, 其中 xxx 为要添加同学的 npm 账号</span></span><br><span class="line">$ npm owner add xxx demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个发布者</span></span><br><span class="line">$ npm owner <span class="built_in">rm</span> xxx demo</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>选择npm，也是因为用的人多，出了问题，论坛的解决方案应该多。</p><p>其实一开始想过其他的同步方案，比如用一个Git来做同步管理。</p><p>但是后来考虑到用的人少，隐患大，而且，这玩意也许不止我们一个人可以用，干脆开源吧。</p><p>开源的项目，如果别人用出了问题，他们也会提示，方便了别人，也促进了自己，挺好的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6991300926099357709">原生 node 搭建最基础的 npm 工具包</a></p><p><a href="https://juejin.cn/post/6844903918414102535">使用npm发布一个vue组件</a></p><p><a href="https://juejin.cn/post/6920231981834108942">一文搞定 npm 包发布与管理</a></p><p><a href="https://juejin.cn/post/7074116683673108493">规范化开发并发布npm包</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本次开源的方法是&lt;a href=&quot;https://demo.assetech.com.cn/&quot;&gt;cat-tools&lt;/a&gt;，目前该工具包已经在npm上可下载，公司多个项目使用，没出什么问题。&lt;/p&gt;
&lt;p&gt;尽管市面上开源了&lt;a href=&quot;https://www.lodashjs.com/&quot;&gt;loadsh&lt;/a&gt;，&lt;a href=&quot;http://momentjs.cn/&quot;&gt;moment.js&lt;/a&gt;，&lt;a href=&quot;https://dayjs.fenxianglu.cn/&quot;&gt;day.js&lt;/a&gt;这类的工具包，但是总有不能满足需求的时候。&lt;/p&gt;
&lt;p&gt;所以，我觉得，还是得造一个趁手的工具包。&lt;/p&gt;</summary>
    
    
    
    
    <category term="npm" scheme="https://crazystudent13.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>hexo个人博客搭建————自动部署</title>
    <link href="https://crazystudent13.github.io/2023/03/04/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://crazystudent13.github.io/2023/03/04/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2023-03-04T08:05:55.000Z</published>
    <updated>2023-03-04T14:58:00.808Z</updated>
    
    <content type="html"><![CDATA[<p>之前写博客的时候还没注意，后来在修改博客的时候，发现不停的敲命令发布确实烦。</p><p>为了解决博客发布占用时间的问题，查了一圈论坛，和相关人员的解决方案。</p><p>最终，我选中了<a href="https://docs.github.com/zh/actions/quickstart">github Action</a>，对于托管在github上的hexo来说，这玩意真是好用。</p><p>另外，我目前只部署到github上，暂时不考虑部署到gitee和coding上。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><p>在正式确立工作流之前，这里是有两个方案的。</p><ol><li>在GIthub.io那个仓库中新建源码分支，等到分支提交时候，触发命令，然后github流程化部署，博客上线</li><li>新建一个仓库，用来管理博客，博客每次提交，就会触发命令，然后github流程化的自动部署，博客上线</li></ol><p>这两种方案，一开始我更倾向于第一种，因为没什么必要，不多开项目，总是好的。</p><p>但是后来考虑到源码内容中，总会有这种隐私性质的秘钥之类的，放在开源项目确实不好。</p><p>而且，目前很多论坛都倾向于第二种方案，想了想，那这里选择<strong>新建仓库</strong>吧。</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>参考市面上大多数人的选择，我在<a href="https://github.com/">github</a>建了一个<strong>blog</strong>仓库，注意新仓库是<strong>私有的</strong>。</p><p>因为，这个仓库是用来存博客源码的，为了规避秘钥被别人看到，所以<strong>不能设置为public！</strong></p><p>在新仓库准备完成之后，我们清空本地仓库的远程链接，然后，让本地的hexo博客源码和远程新仓库完成对接。</p><p>这里我魔改了一下<a href="https://anzhiy.cn/posts/asdx.html#%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%92%8C%E5%88%86%E6%94%AF">安知鱼大佬的流程</a>，咳咳，如果要新建仓库的话，就参考他的教程，我这是对已有的源码修改。</p><ol><li><p>删除博客主题的git文件，比如我这里是<a href="https://github.com/Lhcfl/hexo-theme-anatolo">anatolo</a>。我删除了<code>/themes/anatolo/.git</code>文件，避免主题文件夹下的<code>.git</code>文件夹其被识别成子项目，无法被上传到源码仓库。</p></li><li><p>在博客根目录下，运行指令，我这里是在E:\gitPro\blog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init #初始化</span><br><span class="line">git remote add origin git@github.com:crazystudent13/blog.git</span><br><span class="line">git checkout -b main # 切换到main分支，</span><br></pre></td></tr></table></figure></li><li><p>添加屏蔽项</p><p>因为能够使用指令进行安装的内容不包括在需要提交的源码内，所有我们需要将这些内容添加到屏蔽项，表示不上传到 github 上。这样可以显著减少需要提交的文件量和加快提交速度。</p><p>我再<code>E:\gitPro\blog\.gitignore</code>,屏蔽了以下文件，如果你应用了主题里边的配置项，记得，主题里边的gitignore文件也要完成修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TXT.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure></li><li><p>之后再运行 git 提交指令，将博客源码提交到 github 上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;github action update&quot;</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li><li><p>此时你的主题文件夹若已经被正常上传，并且你也添加了主题文件夹下的.git 文件夹的屏蔽项。那你可以考虑把第二步移走或删除的<code>.git</code>放回来，用作以后升级。（个人觉得这种升级方式不是很好）</p></li></ol><h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><p>为了确保交由<code>Github Action</code>来持续部署时，<code>Github Action</code> 具备足够的权限来进行 <code>hexo deploy</code> 操作,需要先获取 <code>Token</code></p><p>访问 Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;generate new token。</p><p>注意事项：</p><ol><li>名称自己琢磨功能随便填下就行，我这里填的是自动部署。</li><li>必须勾选 repo 项 和 workflows 项。</li><li>token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置了。</li></ol><h3 id="建立流程"><a href="#建立流程" class="headerlink" title="建立流程"></a>建立流程</h3><p>打开github在项目的actions下，点击new workflow，新建一个autodeploy.yml的文件就行，然后把我下边的脚本放上去，就能完成博客的自动化部署了。</p><p>我之前用别人的脚本并未一次通关，所以自己查资料调整了一下，这里放调整结果。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"><span class="comment"># 当有改动推送到main分支时，启动Action</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;mian&quot;</span> ]</span><br><span class="line">      <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">mian</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;16.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-npm</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cache-npm.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install gulp-cli -g #全局安装gulp</span></span><br><span class="line"><span class="string">          npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">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</span></span><br><span class="line">          <span class="attr">repository-name:</span> <span class="string">CrazyStudent13/CrazyStudent13.github.io</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">commit-message:</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.head_commit.message &#125;&#125;</span> Updated By Github Actions&quot;</span></span><br></pre></td></tr></table></figure><p>这里有很多人直接按照教程走会出现有些坑，我这里稍微提一下我遇到的情况：</p><ol><li>不要乱改命令，上述代码中checkout@v2，这个对应的是功能，不是版本。</li><li><strong>注意本地和远端的冲突</strong>，在提交完成代码之后，可以在github远端创建自动部署脚本，不用本地新建文件夹，去产生冲突。</li><li><strong>注意博客源码分支名称</strong>，2021年修改之后，新建的项目主分支应该是main，如果你用到的脚本中有些地方写的是master，记得改成main。</li><li><strong>注意博客分支名称</strong>，也不要完全都改成main分支，我的博客是2019年部署的，废弃很久不用，现在又捡起来，所以分支依然还是master，最后提交的脚本，如果是提交到main，就会报错。</li><li><strong>自己主题内的配置要提交</strong>，不然构建博客的时候，页面构造命令可能会出现跑不通的情况。</li><li><strong>移除不需要的依赖</strong>，不然可能会造成不必要的错误，另外这样也减少下载时间。</li><li><strong>尝试AI帮忙写脚本</strong>，目前2023年，chatgpt发展的还不够狂野，但是我试过，是可以书写这类脚本的。</li></ol><h3 id="调试流程"><a href="#调试流程" class="headerlink" title="调试流程"></a>调试流程</h3><p>在完成上述内容之后，基本上应该是一步到位的完成。</p><p>如果要是不成，可以打开actions，一步步点进去，看到一个类似shell命令行的界面，里边会将哪个脚本报错，具体步骤的问题提示出来，按照报错排查就行。</p><p>具体操作参考<a href="https://www.bilibili.com/video/BV19P41157no?t=487.7">安知鱼的视频讲解</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在2019年知道有这个，但是没怎么用过。</p><p>没想到几年不见，自动化部署流程这么好用了，看来我这几年的工作，导致我的眼界太不宽阔了。</p><p>这里也非常感谢大佬安知鱼这篇文档的指路，真的对我的自动化部署要求产生了很大的助力。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://anzhiy.cn/posts/asdx.html">使用 Github Action 自动部署 | 安知鱼 (anzhiy.cn)</a></p><p><a href="https://www.bilibili.com/video/BV19P41157no?t=487.7">hexo完成github action自动部署</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写博客的时候还没注意，后来在修改博客的时候，发现不停的敲命令发布确实烦。&lt;/p&gt;
&lt;p&gt;为了解决博客发布占用时间的问题，查了一圈论坛，和相关人员的解决方案。&lt;/p&gt;
&lt;p&gt;最终，我选中了&lt;a href=&quot;https://docs.github.com/zh/actions/quickstart&quot;&gt;github Action&lt;/a&gt;，对于托管在github上的hexo来说，这玩意真是好用。&lt;/p&gt;
&lt;p&gt;另外，我目前只部署到github上，暂时不考虑部署到gitee和coding上。&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://crazystudent13.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2023年的第一次体检</title>
    <link href="https://crazystudent13.github.io/2023/03/03/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%93%E6%A3%80/"/>
    <id>https://crazystudent13.github.io/2023/03/03/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%93%E6%A3%80/</id>
    <published>2023-03-03T09:35:22.000Z</published>
    <updated>2023-03-31T15:09:46.502Z</updated>
    
    <content type="html"><![CDATA[<p>23年终于进入到了休息阶段，身体不行，打算休息一下了。</p><p>本来按照人生规划，这段时间是要进入职场中高层，开始弄大钱，过城市生活的，但是身体实在顶不住了。</p><p>而且看病这个事儿吧，我从来没想到会这么麻烦，特别记录一下，如果后续在遇到这种事，有个心理准备。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>看病这个流程是个相当消耗时间的活儿，放在工作的时候，我还真没那么多时间。</p><p>现在算是离职状态，所以时间较为充足，而且终于能挂的上专家号了。之前周六周日都挂不上，现在终于能放心的等一回了。</p><h3 id="挂号"><a href="#挂号" class="headerlink" title="挂号"></a><strong>挂号</strong></h3><ul><li>尽可能的网上挂号，地方的公众号，小程序都有相关的功能</li><li>如果不是血检相关的事情，不要挂早上的，下午的相对来说人比较少</li><li>一般只有周一到周五能挂专家号，尽可能的提前查好</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>常规的流程如下</p><ol><li>挂号，等叫号</li><li>医生诊断后，开药方</li><li>拿着单子去缴费</li><li>缴费完成后，去开药的药房拿药</li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>挂号可以用电子医保卡缴费，不必用真社保卡</li><li>挂号，如果当日值班的医生专家还在，依然可以提挂号排队</li><li>叫号如果错过，只要不是当天错过医生的在职时间，都可以商量，在叫号期间稍微商量下，可以补叫号。</li><li>中间流程如果要查B超，血检之类的，那时间可就长了。最好预估自己的病症，若涉及到这类检测，自己要预估时间，最好起步做好一天甚至两天的时间准备。</li><li>如果有些小手术之类的说法，最好问清是否会干扰行动能力，只要不干扰行动能力，一切都可启动孤胆英雄模式，硬抗就可以。</li><li>身体能力不能太过虚弱，过于肥胖，老迈，都需要其他人陪同，不能自己单独行动</li></ol><h3 id="病情"><a href="#病情" class="headerlink" title="病情"></a>病情</h3><p>今年这年初的检测，我都不知道自己这个身体是什么年纪的，高血压高血脂，中度脂肪肝，甲状腺结节，肾结石。</p><p>这一堆问题几乎让我以为自己是老年人，亏得自己年轻，看来不能太卷了。</p><h4 id="甲状腺结节"><a href="#甲状腺结节" class="headerlink" title="甲状腺结节"></a>甲状腺结节</h4><p>目前还没有出现病理检测，所以不知道是什么情况，希望问题不大。</p><p>主要是做甲状腺穿刺之后，嗓子上就像是有根针顶着，稍微剧烈的吞咽，说话等动作，或者情绪激动，嗓子就疼的不行。</p><p>2023-03-10，检测结果出现，疑似乳头状癌，需要手术（艹）</p><h4 id="左肾结石"><a href="#左肾结石" class="headerlink" title="左肾结石"></a>左肾结石</h4><p>这个目前看来问题不大，医生的意思是多喝点水，定期检查就行。这个还是得注意的，毕竟是肾。</p><h4 id="中度至重度脂肪肝"><a href="#中度至重度脂肪肝" class="headerlink" title="中度至重度脂肪肝"></a>中度至重度脂肪肝</h4><p>荤食得忌口了，这一年，疗养时间怕是吃不到几次荤食了。</p><h4 id="高血压，高血脂"><a href="#高血压，高血脂" class="headerlink" title="高血压，高血脂"></a>高血压，高血脂</h4><p>盐，油估计都得节制了，医生的桌上写着，不要超过7g盐，感觉有点离谱。</p><p>因尿酸偏高，多吃低嘌呤食物，粗粮，减少饮酒。</p><h4 id="颈部曲度消失"><a href="#颈部曲度消失" class="headerlink" title="颈部曲度消失"></a>颈部曲度消失</h4><p>这个只能去找正骨科的医生问问了，现在脖子确实很难受</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>因为医保在苏州，在没有弄清楚医保机制的前提下，只能先在这边用医保了。</p><p>对病症的确诊，远比想象的麻烦，作为没有什么关系的凡人，没想到看病这么麻烦啊，看来以后真的得好好学习身体的保养了。</p><p>如果对养生这块比较了解的朋友，可以在评论区留言，如果能推荐几本书就更好了，在这里提前谢谢了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;23年终于进入到了休息阶段，身体不行，打算休息一下了。&lt;/p&gt;
&lt;p&gt;本来按照人生规划，这段时间是要进入职场中高层，开始弄大钱，过城市生活的，但是身体实在顶不住了。&lt;/p&gt;
&lt;p&gt;而且看病这个事儿吧，我从来没想到会这么麻烦，特别记录一下，如果后续在遇到这种事，有个心理准备。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://crazystudent13.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="养生" scheme="https://crazystudent13.github.io/tags/%E5%85%BB%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>hexo个人博客搭建————命令整理</title>
    <link href="https://crazystudent13.github.io/2019/02/11/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>https://crazystudent13.github.io/2019/02/11/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</id>
    <published>2019-02-10T17:53:53.000Z</published>
    <updated>2023-03-04T15:06:01.392Z</updated>
    
    <content type="html"><![CDATA[<p>虽然Hexo确实很好用，但是由于我对命令和配置的不熟悉，导致很多东西都不是很好用。</p><p>建议参考<a href="https://hexo.io/themes/">官网</a>的文档，我梳理了一份属于自己的命令文档。</p> <span id="more"></span> <h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装</span><br><span class="line">npm update hexo -g #升级 </span><br><span class="line">hexo init #初始化</span><br></pre></td></tr></table></figure><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览，会监视文件变动并自动更新，您无须重启服务器</span><br><span class="line">hexo d == hexo deploy #部署</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><table><thead><tr><th align="center">变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">标题</td></tr><tr><td align="center">layout</td><td align="center">布局</td></tr><tr><td align="center">date</td><td align="center">文件建立日期</td></tr><tr><td align="center">title</td><td align="center">标题</td></tr><tr><td align="center">categories</td><td align="center">分类</td></tr><tr><td align="center">tags</td><td align="center">标签</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014-03-03 19:07:43</span><br><span class="line">categories: Blog</span><br><span class="line">tags: [Hexo]</span><br></pre></td></tr></table></figure><h3 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上是文章摘要 </span><br><span class="line">&lt;!--more--&gt; </span><br><span class="line">以下是余下全文</span><br></pre></td></tr></table></figure><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;title&gt;</span><br><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">:title</td><td align="center">标题</td></tr><tr><td align="center">:year</td><td align="center">建立的年份（4 位数）</td></tr><tr><td align="center">:month</td><td align="center">建立的月份（2 位数）</td></tr><tr><td align="center">:i_month</td><td align="center">建立的月份（去掉开头的零）</td></tr><tr><td align="center">:day</td><td align="center">建立的日期（2 位数）</td></tr><tr><td align="center">:i_day</td><td align="center">建立的日期（去掉开头的零）</td></tr></tbody></table><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h3 id="语雀同步插件"><a href="#语雀同步插件" class="headerlink" title="语雀同步插件"></a>语雀同步插件</h3><p>之前个人使用了<a href="https://blog.lxstart.net/">小冷</a>的<a href="https://github.com/x-cold/yuque-hexo#Example">语雀对接插件</a>，感觉很不错，这里也整理一下。</p><p>不过，现在语雀用我已经停用了，它总给我一种难受的感觉，我说不上来。</p><p>虽然语雀他们各方面整的都挺好，但是不知道为啥，用起来就是膈应。</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yuque-hexo</span><br><span class="line"># or</span><br><span class="line">npm i --save-dev yuque-hexo</span><br></pre></td></tr></table></figure><p><strong>Sync</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yuque-hexo sync</span><br></pre></td></tr></table></figure><p><strong>Clean</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yuque-hexo clean</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然Hexo确实很好用，但是由于我对命令和配置的不熟悉，导致很多东西都不是很好用。&lt;/p&gt;
&lt;p&gt;建议参考&lt;a href=&quot;https://hexo.io/themes/&quot;&gt;官网&lt;/a&gt;的文档，我梳理了一份属于自己的命令文档。&lt;/p&gt;</summary>
    
    
    
    <category term="非工作技术" scheme="https://crazystudent13.github.io/categories/%E9%9D%9E%E5%B7%A5%E4%BD%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="hexo" scheme="https://crazystudent13.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo个人博客搭建————域名绑定</title>
    <link href="https://crazystudent13.github.io/2019/02/10/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"/>
    <id>https://crazystudent13.github.io/2019/02/10/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/</id>
    <published>2019-02-09T17:53:53.000Z</published>
    <updated>2023-03-04T14:57:56.144Z</updated>
    
    <content type="html"><![CDATA[<p>电脑系统为window 10专业版，64位</p><p>这里默认大家已经完成了git博客的部署，接下来的操作，就是将git的地址，绑定到我们的个人域名</p><span id="more"></span><p>接下里的教程，我大致将过程分为三个阶段</p><ul><li>准备阶段：准备自己购买<strong>自己的域名</strong>，配置<strong>域名解析</strong></li><li>绑定阶段：<strong>在github上绑定自己的域名</strong>，并在本地<strong>设置CNAME文件</strong>，提交，完成域名的固定绑定</li><li>验证阶段：收尾，测试绑定是否成功</li></ul><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>需要实名认证，然后购买，不过域名不贵，推荐随便买个cn的域名就行。</p><p>购买渠道很多，腾讯，阿里，华为等，我个人在阿里云买的域名。</p><blockquote><p>crazystudent13.cn</p></blockquote><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>以我使用的阿里云为例，我会打开管理控制台，点击<strong>解析</strong>。</p><p>按照下边的记录，配置解析，按照下方的表格去操作。</p><p>记录类型为A的，是github的网址，CNAME是个人博客的仓库。</p><table><thead><tr><th align="center">主机记录</th><th align="center">记录类型</th><th align="center">解析请求来源</th><th align="center">记录值</th></tr></thead><tbody><tr><td align="center">@</td><td align="center">A</td><td align="center">默认</td><td align="center">185.199.108.153</td></tr><tr><td align="center">@</td><td align="center">A</td><td align="center">默认</td><td align="center">185.199.109.153</td></tr><tr><td align="center">@</td><td align="center">A</td><td align="center">默认</td><td align="center">185.199.110.153</td></tr><tr><td align="center">@</td><td align="center">A</td><td align="center">默认</td><td align="center">185.199.111.153</td></tr><tr><td align="center">www</td><td align="center">CNAME</td><td align="center">默认</td><td align="center">crazystudent13.github.io</td></tr></tbody></table><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>进入自己的Git博客项目中，打开setting，下拉，找到Github Pages。</p><p>在输入框中输入我们买的域名（不要输入www.），完成内容。</p><p>如果没有立刻生效，等10分钟左右（dns的解析时间差不多是这个时间，具体可以看域名控制台的说明）。</p><h4 id="固定域名"><a href="#固定域名" class="headerlink" title="固定域名"></a>固定域名</h4><p>这一步本来是不必要的，但是每次发布，域名就会失效。为了一劳永逸，这个得做。</p><p>在博客的source文件夹中，新建文件CNAME(没有后缀，什么后缀都没有，字母必须大写)。</p><p>将个人域名存入文件中，然后发布，等待。</p><blockquote><p>crazystudent13.cn</p></blockquote><h4 id="验证绑定"><a href="#验证绑定" class="headerlink" title="验证绑定"></a>验证绑定</h4><p>浏览器输入自己的域名，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.crazystudent13.cn</span><br></pre></td></tr></table></figure><p>如果您像以上我的博客那样，您也跳转到了自己的git博客，那就代表成功了。</p><p>而且就算提交文件，也不会覆盖掉域名设置。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>至此，所有的工作全部做完了，一路看下来，其实利用Github创建博客是个很简单的事。</p><p>其实一开始，我是想利用VUE和语雀的接口做一个博客来锻炼自己技术的。</p><p>但是后来我觉得太过麻烦，而且过年又犯懒，加之网上不止一个人以个人博客为项目写了DEMO，这里自己再做，恐怕也有点过于重复，没多少意义了。</p><p>时隔数年，没想到还是用这玩意了，真的是有些令人唏嘘。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;电脑系统为window 10专业版，64位&lt;/p&gt;
&lt;p&gt;这里默认大家已经完成了git博客的部署，接下来的操作，就是将git的地址，绑定到我们的个人域名&lt;/p&gt;</summary>
    
    
    
    <category term="非工作技术" scheme="https://crazystudent13.github.io/categories/%E9%9D%9E%E5%B7%A5%E4%BD%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="hexo" scheme="https://crazystudent13.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo个人博客搭建————基础流程</title>
    <link href="https://crazystudent13.github.io/2019/02/10/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B/"/>
    <id>https://crazystudent13.github.io/2019/02/10/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B/</id>
    <published>2019-02-09T17:53:53.000Z</published>
    <updated>2023-03-04T14:57:49.531Z</updated>
    
    <content type="html"><![CDATA[<p>hexo搭建的流程几乎烂大街了，19年的时候搭建时候写的，没想到现在又用上了。</p><p>这是老早之前的文档，这次翻出来重新梳理搭建流程，完善几个细节，为了后续给其他人提供便利。</p><span id="more"></span><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>安装并配置好Node.js环境，只要常规的输入以下命令，如果输出版本号了，证明已经安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>安装Git和配置好Git环境，同上，用git版本号来确定以下有没有问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h4 id="注册项目"><a href="#注册项目" class="headerlink" title="注册项目"></a>注册项目</h4><p>Github账户注册，新建项目：账户名.github.io，并且需要勾选Initialize this repository with a README</p><p>比如我这里，是在GitHub上，建的<a href="https://github.com/CrazyStudent14/CrazyStudent14.github.io">CrazyStudent14.github.io</a>项目。</p><p><strong>注意</strong>：国内的码云实际上也是支持这个操作的，不过码云有个缺陷，就是如果你后续想绑定域名来访问这个博客的话，码云因为国内的政策问题，无法绑定，而github无所谓，所以，部署的时候，考虑清楚自己的需求。</p><h4 id="本地准备"><a href="#本地准备" class="headerlink" title="本地准备"></a>本地准备</h4><p>这个流程有点长，主要是在本地完成博客的准备和构建</p><p>以下流程尽可能的全程命令行操作</p><p>本地自己先部署Hexo项目，在自己认为合适的地方创个文件夹。</p><p>我是在E盘建了一个blog文件夹，然后npm全局安装一个Hexo依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;cd gitpro/blog</span><br><span class="line">E:\gitPro\blog&gt;npm install hexo -g</span><br></pre></td></tr></table></figure><p>安装完成hexo之后，hexo -v，查hexo的版本号，检查hexo是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\gitPro\blog&gt;hexo -v</span><br></pre></td></tr></table></figure><p>至此，本地部署的前期工作完成，输入hexo init，初始化该文件夹（有点漫长的等待。。。）</p><p>完成安装后，出现Start blogging with Hexo！这就代表Hexo已经在这个文件夹下初始化成功可，在本地完成项目新建了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\gitPro\blog&gt;hexo init</span><br></pre></td></tr></table></figure><p>这时候的项目，是个架子，没有安装依赖，相当于炒菜有锅没买菜一样，所以，需要npm来安装依赖。</p><p>输入npm install，安装所需要的组件，等安装成功之后就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>输入hexo g，先完成项目构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\gitPro\blog&gt;hexo g</span><br></pre></td></tr></table></figure><p>输入hexo s，开启服务器，访问本地化网址，如果没有端口占用的话，一般是<a href="http://localhost:4000/">http://localhost:4000/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\gitPro\blog&gt;hexo s</span><br></pre></td></tr></table></figure><p>假如页面一直无法跳转，那么可能端口被占用了，输入“hexo server -p 端口号”来改变端口号。</p><p>这样的话，我们会直接启动<a href="http://localhost:5000/">http://localhost:5000/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\gitPro\blog&gt;hexo s -p 5000</span><br></pre></td></tr></table></figure><h4 id="准备秘钥"><a href="#准备秘钥" class="headerlink" title="准备秘钥"></a>准备秘钥</h4><p>这一步操作有点繁琐，我的教程只是个大纲，如果要是不清楚细节，可以在<a href="https://juejin.cn/">掘金</a>详细搜一下这里的小标题，里边应该有很多详细操作。</p><p><strong>注意</strong>：如果是首次设置git本地的秘钥，请按照如下流程操作，如果已经有秘钥了，其实生成部分可以跳过。</p><h5 id="设置Git的user-name和email"><a href="#设置Git的user-name和email" class="headerlink" title="设置Git的user name和email"></a>设置Git的user name和email</h5><p>我这里随便取个crazystudent14的假名字做演示，如果自己部署，不要抄名字，名字和邮箱换成自己的！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\gitPro\blog&gt;git config --global user.name &quot;crazystudent14&quot;</span><br><span class="line">E:\gitPro\blog&gt;git config --global user.name &quot;crazystudent14@test.com&quot;</span><br></pre></td></tr></table></figure><h5 id="Git生成SSH密钥"><a href="#Git生成SSH密钥" class="headerlink" title="Git生成SSH密钥"></a>Git生成SSH密钥</h5><p>为了将Hexo与Github page联系起来，切换到C盘，准备生成秘钥文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\crazystudent14&gt;cd C:\Users\crazystudent14\.ssh</span><br><span class="line">C:\Users\crazystudent14&gt;ssh-keygen -t rsa -C &quot;crazystudent14@163.com&quot;</span><br></pre></td></tr></table></figure><p>判断<strong>id_rsa</strong>，<strong>id_rsa.pub</strong>，<strong>known_hosts</strong>这三个文件是否存在。</p><p>我这里是win系统，如果是linux和mac系统，自己查一下相关的命令，或者到对应的文件夹去看一下。反正就是看看这个文件夹下边有没有这是三个文件，有的话，可以继续做。</p><h5 id="在github上添加key"><a href="#在github上添加key" class="headerlink" title="在github上添加key"></a>在github上添加key</h5><p>登录Github，点击头像下的settings，找到左侧的SSH and GPG keys。</p><p>点击new ssh key按钮，将id_rsa.pub文件里的内容复制上去，title就填写blog（这个title就是告诉你，这个Key是做什么用的，相当于备注）</p><h5 id="检测Key是否添加成功"><a href="#检测Key是否添加成功" class="headerlink" title="检测Key是否添加成功"></a>检测Key是否添加成功</h5><p>输入ssh -T <a href="">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@coding.net</span><br></pre></td></tr></table></figure><h4 id="准备发布"><a href="#准备发布" class="headerlink" title="准备发布"></a>准备发布</h4><p>好了，一切终于快结束了，我们再确认下流程。</p><ol><li>配置完成本地环境</li><li>在github注册好项目</li><li>本地完成Hexo博客的准备</li><li>在github添加自己的本地生成的key</li></ol><p>确认以上流程完成后，我们可以进行最后一步了。</p><h5 id="设置deploy"><a href="#设置deploy" class="headerlink" title="设置deploy"></a>设置deploy</h5><p>在博客项目的根件夹中，我这里是E:\gitPro\blog，找到_config.yml文件。</p><p>配置Deployment，修改repo值（在末尾），repo值是你在github项目里的ssh（右下角）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repository: &#x27;git@github.com:CrazyStudent14/CrazyStudent14.github.io.git&#x27;</span><br><span class="line">  branch: &#x27;master&#x27;</span><br></pre></td></tr></table></figure><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="部署deploy"><a href="#部署deploy" class="headerlink" title="部署deploy"></a>部署deploy</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>项目根目录中，执行命令hexo d -g，生成以及部署了（记住这个命令，这是用来把文章提交到Github上的命令，以后会经常用的）</p><p>部署成功后访问你的地址：<a href="http://用户名.github.io/">http:&#x2F;&#x2F;用户名.github.io</a>。那么将看到生成的文章</p><h5 id="写新博客"><a href="#写新博客" class="headerlink" title="写新博客"></a>写新博客</h5><p>通过以下命令创建新文件，我们会在source&#x2F;_posts目录下将会看到已经创建的文件，然后在新文件中写文章就行了。</p><p>写完之后，继续部署ok。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;博客名&quot;</span><br></pre></td></tr></table></figure><p>好了，到此为止，最基本的hexo+github搭建流程结束了。</p><p>我们看看效果吧。</p><h4 id="外部访问"><a href="#外部访问" class="headerlink" title="外部访问"></a>外部访问</h4><p>在建好的项目，点击右侧settings的tab栏目，向下拉到GitHub Pages，你会看到那边有个网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://CrazyStudent14.github.io</span><br></pre></td></tr></table></figure><p>这时候，你已经有了一个部署在github上的hexo博客了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hexo搭建的流程几乎烂大街了，19年的时候搭建时候写的，没想到现在又用上了。&lt;/p&gt;
&lt;p&gt;这是老早之前的文档，这次翻出来重新梳理搭建流程，完善几个细节，为了后续给其他人提供便利。&lt;/p&gt;</summary>
    
    
    
    <category term="非工作技术" scheme="https://crazystudent13.github.io/categories/%E9%9D%9E%E5%B7%A5%E4%BD%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="hexo" scheme="https://crazystudent13.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
