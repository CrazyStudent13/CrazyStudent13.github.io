<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远川的个人博客</title>
  
  <subtitle>CrazyStudent13的个人日志</subtitle>
  <link href="https://crazystudent13.github.io/atom.xml" rel="self"/>
  
  <link href="https://crazystudent13.github.io/"/>
  <updated>2025-01-05T08:57:32.000Z</updated>
  <id>https://crazystudent13.github.io/</id>
  
  <author>
    <name>CrazyStudent13</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025年第一次失业</title>
    <link href="https://crazystudent13.github.io/2025/01/05/2025%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%B1%E4%B8%9A/"/>
    <id>https://crazystudent13.github.io/2025/01/05/2025%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%B1%E4%B8%9A/</id>
    <published>2025-01-05T08:57:32.000Z</published>
    <updated>2025-01-05T08:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>没想到2025年开局第一件事就是失业，只能说时也命也。</p><p>好好休息吧，新的工作就不在苏州找了，后续大概率要去南京或者上海。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>2025年的，本来做好的规划几乎都失效，经济状态也稍微陷入了些。</p><p>不过，几个月的工作下来，多少经济账是缓过来一下，一切比之前一段时间好了不少。</p><p>而且新工作是由于公司原因，所以接下来离职也可以领取失业金度过日常生活，所以问题相对没那么大。</p><h3 id="近期规划"><a href="#近期规划" class="headerlink" title="近期规划"></a>近期规划</h3><p>2025年的长期规划暂时还没想好，因为变数实在是太多了。</p><p>不过，可以确定一件事，在苏州短时间找不到工作，第一季度还是先回老家家修养一下吧。</p><p>趁着近期空闲，好好放松一下吧，顺便清一下医保，洗了个牙。</p><p>之前的工作强度不高，但是上班做公司项目，下班搞开源项目，其实也是挺消耗精力的。</p><h4 id="领失业金"><a href="#领失业金" class="headerlink" title="领失业金"></a>领失业金</h4><p>后续等失业金到手之后，大概率不会在苏州这边继续做事。</p><p>主要原因是苏州这边找相关工作对学历要求太高，短时间内要是找不到工作，而且这个房租相对来说有点高，有点吃不住。</p><p>另外，关于失业金的领取，如果要是经济十分困难的情况下，且之前有过工作，那么推荐这里。</p><ol><li>离职合同要是非自愿的，可以是协商解除（领不到n+1），但是绝对不能是因为个人意愿。</li><li>之前交了至少一年以上的失业险，这个是按照累计来算的。</li><li>办理失业登记，这点可以在网上办理，各地人社局都有自己的线上办理的APP，可以去打地方人社局的电话咨询一下。</li></ol><p>之后，失业金申请大概等个一周左右（快的话可能不要一周），就能完成失业金的领取。</p><h4 id="补全技能"><a href="#补全技能" class="headerlink" title="补全技能"></a>补全技能</h4><p><code>nestjs</code>的后端项目差不多铺起来了，不过，<code>TypeScript</code>用的还是不够纯熟，有些时候面试还是会被问倒，这里还得再学习一下。</p><p>不过具体其他的技能是否需要补全，这个就需要看接下来是在哪里工作的了，可能是南京，也可能是上海。</p><p>具体的技能规划，根据到时候找的公司要求开始具体学习。</p><h3 id="景点游玩"><a href="#景点游玩" class="headerlink" title="景点游玩"></a>景点游玩</h3><p>因为可能是最后一段时间呆在苏州了，所以后续玩的地方大概就是以下的方向。</p><p>朋友推荐了游湖之类的景区路线，这个我打算放在后续。趁着最近个人还闲着，随便逛逛吧。</p><p>古镇这种的看多了也没什么意思，主要看看苏州的历史遗迹，这些相对于其他的地方还是很有区分度的。</p><p>另外，<strong>博物馆，拙政园，苏州大学</strong>这三个景点都在一块，如果你精力足够的话，完全可以一天玩完。</p><h4 id="苏州博物馆"><a href="#苏州博物馆" class="headerlink" title="苏州博物馆"></a>苏州博物馆</h4><p>主要展品是战国吴越，太平天国，民国时期相关文物，相对来说较为推荐。</p><p>周末和节假日人非常多，可以提前网上预约走绿色通道（周一闭馆）。</p><ul><li><p>游玩门票：免费(可在官网提前预约)</p></li><li><p>开放时间：每星期二至星期日9:00~17:00（16:00停止入馆）</p></li><li><p>建议用时：1-2小时</p></li></ul><h4 id="拙政园"><a href="#拙政园" class="headerlink" title="拙政园"></a>拙政园</h4><p>拙政园的大气是别的<a href="https://zhida.zhihu.com/search?content_id=102759840&content_type=Article&match_order=1&q=%E8%8B%8F%E5%B7%9E%E5%9B%AD%E6%9E%97&zhida_source=entity">苏州园林</a>不可比拟的，毕竟也是皇家行宫，亭台楼阁、粉墙瓦黛十分适合拍大场景照片。</p><p>Ps：<a href="https://zhida.zhihu.com/search?content_id=102759840&content_type=Article&match_order=3&q=%E6%8B%99%E6%94%BF%E5%9B%AD&zhida_source=entity">拙政园</a>比较大，建议在游客中心领取园区导览图，小心迷路</p><ul><li><p>门票：50元（淡季）；90元（旺季），建议去苏州本地宝预约一下。</p></li><li><p>开放时间： 07:30-17:30</p></li><li><p>建议用时：2-3小时</p></li></ul><h4 id="苏州大学"><a href="#苏州大学" class="headerlink" title="苏州大学"></a><a href="https://zhida.zhihu.com/search?content_id=102759840&content_type=Article&match_order=1&q=%E8%8B%8F%E5%B7%9E%E5%A4%A7%E5%AD%A6&zhida_source=entity">苏州大学</a></h4><p>苏大可以拍照的地方太多了，而且一年四季均可，不过，苏大不开放十梓街，而是本部，这个大家要注意一下。</p><p>本部的钟楼搭配绿树、著名的<a href="https://zhida.zhihu.com/search?content_id=102759840&content_type=Article&match_order=1&q=%E6%83%85%E4%BA%BA%E5%9D%A1&zhida_source=entity">情人坡</a>、复古欧式红楼建筑，都十分适合拍小清新风格。</p><ul><li><p>地址：苏州大学天赐庄校区（本部）</p></li><li><p>门票：免费，但是需要苏州大学公众号预约</p></li><li><p>开放时间：8:00~17:00</p></li><li><p>建议用时：2-3小时</p></li></ul><p><strong>Tips：提前预约。搜索“苏州大学”公众号→菜单栏“校园导览”里有鉴赏日一栏→根据要求填上姓名，身份证等信息就可以啦</strong></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这就是在苏州的最后一周了，朋友有空，最后吃了一顿小烧烤，在苏州这边的生活就结束了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/65838789">苏州值得一玩的景点合集（内附详细旅游攻略） - 知乎</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;没想到2025年开局第一件事就是失业，只能说时也命也。&lt;/p&gt;
&lt;p&gt;好好休息吧，新的工作就不在苏州找了，后续大概率要去南京或者上海。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://crazystudent13.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>解决Vue3项目中Markdown文件展示的问题</title>
    <link href="https://crazystudent13.github.io/2024/12/24/%E8%A7%A3%E5%86%B3Vue3%E9%A1%B9%E7%9B%AE%E4%B8%ADMarkdown%E6%96%87%E4%BB%B6%E5%B1%95%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://crazystudent13.github.io/2024/12/24/%E8%A7%A3%E5%86%B3Vue3%E9%A1%B9%E7%9B%AE%E4%B8%ADMarkdown%E6%96%87%E4%BB%B6%E5%B1%95%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-12-24T08:59:31.000Z</published>
    <updated>2024-12-24T08:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做前端项目，需要MD文件的录入及展示效果。</p><p>然后从录入组件到展示，出乎意料的麻烦。</p><p>倒不是这事儿实现的思路多难，而是实现过程中有很多出乎意料的岔道。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本来一开始打算使用<a href="https://www.wangeditor.com/">wangeEditor</a>直接解决用户录入富文本的需求。</p><p>但是想了一段时间，我个人觉得还是用markdown编辑器效果更好，毕竟我个人更喜欢markdown。</p><p>于是，有了这个需求之后，立刻着手开始修改。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>一开始我自然是考虑使用掘金同款的<a href="https://bytemd.js.org/">ByteMD</a>，毕竟，我最开始写文档的时候就是通过掘金。</p><p>当时就是因为掘金，才感觉<code>markdown</code>这种书写模式特别牛。</p><p>但是，ByteMD的pnpm安装一直不行，虽然用npm安装就正常了，但是这个问题搞得我很膈应，最终还是不了了之了。</p><p>除此之外，我查阅了现在市面上很多其他项目，现有的很多实现方式都偏向vue2，没有更好的方式。</p><p>截止2024年12月24日18点，我这边统计了一下市面上的三个较为热门的MD插件。</p><table><thead><tr><th>插件名</th><th>最后更新时间</th><th>是否中文文档</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://code-farmer-i.github.io/vue-markdown-editor/zh/">v-md-editor</a></td><td>2023年9月</td><td>√</td><td>pnpm安装似乎有警报，但是不影响</td></tr><tr><td><a href="https://bytemd.js.org/">ByteMD</a></td><td>2023年12月</td><td>×</td><td>pnpm安装有问题</td></tr><tr><td><a href="https://markdown-it.docschina.org/">markdown-it</a></td><td>2024年3月</td><td>√</td><td>目前安装上没有什么太大问题</td></tr></tbody></table><p>经过多次试错后，这三款<code>markdown</code>的插件，我最终选定了<a href="https://markdown-it.docschina.org/#%E5%AE%89%E8%A3%85">markdown-it</a>。</p><p>主要有群友推荐了<code>markdown-it</code>，其次在vue3中，另外两款插件并不好用，而且也没有他人的试错文档。</p><p>而markdown-it，我目前是完全把流程走通了。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先下载相关的工具库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm install highlight.js</span><br><span class="line">pnpm install markdown-it</span><br></pre></td></tr></table></figure><p>然后，我们需要先写个展示相关的组件，我个人命名为md-preview，然后全局使用。</p><p>目前尚未完成，等后续测试完毕，会更新该文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;markdown-body&quot;&gt;</span><br><span class="line">    &lt;div v-html=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">/* 安装流程</span><br><span class="line"> * pnpm install markdown-it</span><br><span class="line"> * pnpm install highlight.js</span><br><span class="line"> * pnpm install clipboard --save</span><br><span class="line"> * https://juejin.cn/post/6844904105970761741?searchId=20241219215618B6B10490F62417012BAF</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import MarkdownIt from &#x27;markdown-it&#x27;</span><br><span class="line">import Clipboard from &#x27;clipboard&#x27;</span><br><span class="line">import &#x27;highlight.js/styles/github-dark.css&#x27;</span><br><span class="line">import &#x27;@/assets/styles/github-markdown.scss&#x27;</span><br><span class="line">import &#x27;@/assets/styles/github-markdown-dark.scss&#x27;</span><br><span class="line">import &#x27;@/assets/styles/github-markdown-light.scss&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  value: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const md = new MarkdownIt(&#123;</span><br><span class="line">  html: true,</span><br><span class="line">  linkify: true,</span><br><span class="line">  typographer: true,</span><br><span class="line">  highlight: function (str, lang) &#123;</span><br><span class="line">    // 当前时间加随机数生成唯一的id标识</span><br><span class="line">    const codeIndex = parseInt(Date.now()) + Math.floor(Math.random() * 10000000)</span><br><span class="line">    // 复制功能主要使用的是 clipboard.js</span><br><span class="line">    let html = `&lt;button class=&quot;copy-btn&quot; type=&quot;button&quot; data-clipboard-action=&quot;copy&quot; data-clipboard-target=&quot;#copy$&#123;codeIndex&#125;&quot;&gt;复制&lt;/button&gt;`</span><br><span class="line">    const linesLength = str.split(/\n/).length - 1</span><br><span class="line">    // 生成行号</span><br><span class="line">    let linesNum = &#x27;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&#x27;</span><br><span class="line">    for (let index = 0; index &lt; linesLength; index++) &#123;</span><br><span class="line">      linesNum = linesNum + &#x27;&lt;span&gt;&lt;/span&gt;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    linesNum += &#x27;&lt;/span&gt;&#x27;</span><br><span class="line">    if (lang &amp;&amp; hljs.getLanguage(lang)) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        // highlight.js 高亮代码</span><br><span class="line">        const preCode = hljs.highlight(lang, str, true).value</span><br><span class="line">        html = html + preCode</span><br><span class="line">        if (linesLength) &#123;</span><br><span class="line">          html += &#x27;&lt;b class=&quot;name&quot;&gt;&#x27; + lang + &#x27;&lt;/b&gt;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        // 将代码包裹在 textarea 中，由于防止textarea渲染出现问题，这里将 &quot;&lt;&quot; 用 &quot;&amp;lt;&quot; 代替，不影响复制功能</span><br><span class="line">        return `&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;$&#123;html&#125;&lt;/code&gt;$&#123;linesNum&#125;&lt;/pre&gt;&lt;textarea style=&quot;position: absolute;top: -9999px;left: -9999px;z-index: -9999;&quot; id=&quot;copy$&#123;codeIndex&#125;&quot;&gt;$&#123;str.replace(</span><br><span class="line">          /&lt;\/textarea&gt;/g,</span><br><span class="line">          &#x27;&amp;lt;/textarea&gt;&#x27;</span><br><span class="line">        )&#125;&lt;/textarea&gt;`</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const preCode = md.utils.escapeHtml(str)</span><br><span class="line">    html = html + preCode</span><br><span class="line">    return `&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;$&#123;html&#125;&lt;/code&gt;$&#123;linesNum&#125;&lt;/pre&gt;&lt;textarea style=&quot;position: absolute;top: -9999px;left: -9999px;z-index: -9999;&quot; id=&quot;copy$&#123;codeIndex&#125;&quot;&gt;$&#123;str.replace(</span><br><span class="line">      /&lt;\/textarea&gt;/g,</span><br><span class="line">      &#x27;&amp;lt;/textarea&gt;&#x27;</span><br><span class="line">    )&#125;&lt;/textarea&gt;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const result = ref(&#x27;&#x27;)</span><br><span class="line">result.value = md.render(props.value)</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  const clipboard = new Clipboard(&#x27;.copy-btn&#x27;)</span><br><span class="line"></span><br><span class="line">  console.log(clipboard)</span><br><span class="line">  clipboard.on(&#x27;success&#x27;, function (e) &#123;</span><br><span class="line">    e.clearSelection()</span><br><span class="line">  &#125;)</span><br><span class="line">  clipboard.on(&#x27;error&#x27;, function (e) &#123;</span><br><span class="line">    console.error(&#x27;Action:&#x27;, e.action)</span><br><span class="line">    console.error(&#x27;Trigger:&#x27;, e.trigger)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">  props.value,</span><br><span class="line">  (val) =&gt; &#123;</span><br><span class="line">    nextTick(() =&gt; &#123;</span><br><span class="line">      if (val !== null &amp;&amp; typeof val !== &#x27;undefined&#x27; &amp;&amp; val !== &#x27;&#x27;) &#123;</span><br><span class="line">        result.value = md.render(val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.markdown-body &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  min-width: 200px;</span><br><span class="line">  max-width: 980px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: 45px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">  .markdown-body &#123;</span><br><span class="line">    padding: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hljs &#123;</span><br><span class="line">  padding: 12px 2px 12px 40px !important;</span><br><span class="line">  border-radius: 5px !important;</span><br><span class="line">  position: relative;</span><br><span class="line">  font-size: 14px !important;</span><br><span class="line">  line-height: 22px !important;</span><br><span class="line">  overflow: hidden !important;</span><br><span class="line"></span><br><span class="line">  code &#123;</span><br><span class="line">    display: block !important;</span><br><span class="line">    margin: 0 10px !important;</span><br><span class="line">    overflow-x: auto !important;</span><br><span class="line"></span><br><span class="line">    &amp;::-webkit-scrollbar &#123;</span><br><span class="line">      z-index: 11;</span><br><span class="line">      width: 6px;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::-webkit-scrollbar:horizontal &#123;</span><br><span class="line">      height: 6px;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::-webkit-scrollbar-thumb &#123;</span><br><span class="line">      border-radius: 5px;</span><br><span class="line">      width: 6px;</span><br><span class="line">      background: #666;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::-webkit-scrollbar-corner,</span><br><span class="line">    &amp;::-webkit-scrollbar-track &#123;</span><br><span class="line">      background: #1e1e1e;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::-webkit-scrollbar-track-piece &#123;</span><br><span class="line">      background: #1e1e1e;</span><br><span class="line">      width: 6px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .line-numbers-rows &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">    top: 12px;</span><br><span class="line">    bottom: 12px;</span><br><span class="line">    left: 0;</span><br><span class="line">    font-size: 100%;</span><br><span class="line">    width: 40px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    letter-spacing: -1px;</span><br><span class="line">    border-right: 1px solid rgba(0, 0, 0, 0.35);</span><br><span class="line">    user-select: none;</span><br><span class="line">    counter-reset: linenumber;</span><br><span class="line">    span &#123;</span><br><span class="line">      pointer-events: none;</span><br><span class="line">      display: block;</span><br><span class="line">      counter-increment: linenumber;</span><br><span class="line">      &amp;:before &#123;</span><br><span class="line">        content: counter(linenumber);</span><br><span class="line">        color: #999;</span><br><span class="line">        display: block;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  b.name &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 2px;</span><br><span class="line">    right: 50px;</span><br><span class="line">    z-index: 10;</span><br><span class="line">    color: #999;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hljs &#123;</span><br><span class="line">  position: relative;</span><br><span class="line"></span><br><span class="line">  .copy-btn &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 16px;</span><br><span class="line">    top: 0;</span><br><span class="line">    z-index: 99;</span><br><span class="line">    color: #333;</span><br><span class="line">    padding: 4px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>关于样式库，我没有特别挑，因为markdown-it可以自己摆弄样式库。</p><p>如果你有足够的时间，可以去看<a href="http://zlyd.iccnconn.com/markdowncss/index.html">MarkDown在线样式</a>，在这里慢慢的挑选你中意的样式。</p><p>不得不说，越简单往往越耐看，朴素简约的风格往往能更快的让人提炼信息。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前只是把展示的效果做好了，后续会考虑解决编辑器的问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/60135717/answer/2925050258">知乎：有哪些Markdown的CSS样式表推荐？ - Yangg的回答</a> </p><p><a href="https://juejin.cn/post/6844904105970761741">markdown-it代码块渲染、自定义行号、复制代码功能之前写过一篇关于代码块渲染添加自定义行号的文章：markdow - 掘金</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做前端项目，需要MD文件的录入及展示效果。&lt;/p&gt;
&lt;p&gt;然后从录入组件到展示，出乎意料的麻烦。&lt;/p&gt;
&lt;p&gt;倒不是这事儿实现的思路多难，而是实现过程中有很多出乎意料的岔道。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue3" scheme="https://crazystudent13.github.io/tags/vue3/"/>
    
    <category term="疑难杂症" scheme="https://crazystudent13.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>2024年最后一次搬家</title>
    <link href="https://crazystudent13.github.io/2024/12/22/2024%E5%B9%B4%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%90%AC%E5%AE%B6/"/>
    <id>https://crazystudent13.github.io/2024/12/22/2024%E5%B9%B4%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%90%AC%E5%AE%B6/</id>
    <published>2024-12-22T13:39:08.000Z</published>
    <updated>2024-12-22T13:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然房间有点贵，而且房东和中介给我整了个大活，但新房间真是好，算是我目前租的所有房间里边最爽的之一。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>原先的房间除了便宜之外，但是缺陷太多。</p><p>在正式讲新房间优势前，大概先说一下想换房的原因。</p><ol><li>规矩多，因为有家庭单位合租的租客，把冰箱占满了不说，还天天说厕所不打扫什么的，废话特别多。</li><li>面积小，虽然我对房间空间没啥太大要求，但我想有个电脑桌来做事，旧房不论怎么算都没法再添置一个常规的电脑桌了。</li><li>没厨房，厨房被其他人占满了，对于我来说等于没厨房。</li><li>有女生，因为是共用浴室，每次洗完澡我还得穿衣服出来，不喜欢潮乎乎的状态穿衣服。</li></ol><p>当然，也不是没有优势，周边很安静。</p><p>原先的房间隔音不错，且因为是低层住户，大陆上的噪音基本都被小区绿植阻挡了，所以噪音小。</p><p>在这点上，新房间远远不及，因为新房间是高层建筑，没有什么挡板。</p><p>而且，新房子附近旁边就是一条热门车道，基本上一到白天汽车的声音全部都会飘到高层建筑里边，很吵，好在夜里稍微安稳点。</p><h3 id="新房间"><a href="#新房间" class="headerlink" title="新房间"></a>新房间</h3><p>新房间优势很多，核心缺点就一个，贵。</p><p>月相当于之前的房租翻了一倍，现房租近两千。</p><p>不过，只要能做饭一切都是值得的，新房间的厨房很宽敞，终于有空间做饭了。</p><ol><li><strong>厨房好</strong>，这是<strong>核心出装</strong>，厨房其实并不是多出色，只是功能全，而且用的人少，冰箱有足够的空间。</li><li><strong>规矩少</strong>，基本上都是男生，只要不是家庭单位的，很多事没那么多需要计较的，不推荐和有家庭的人合租。</li><li>面积大，房间整体看上去应该是130平以上的，我租到的这间，虽然是次卧，但是连带着独立卫浴，近25平米。</li><li>功能全，独立卫浴，内有公用的宽带（合租他人的），独立小阳台，新式的节能空调。</li><li>装修好，卧室实木地板，床的靠整面墙是软靠垫，独立卫生间内的装修也都很不错，看得出原家主是精心装修的。</li><li>距离近，和之前的住宿定位差不多，几乎就是一街之隔，到工作地骑车只要半小时，电动车甚至可以控制在12分钟左右。</li></ol><h3 id="新设备"><a href="#新设备" class="headerlink" title="新设备"></a>新设备</h3><p>新的房间很大，但缺不少东西，于是去拼多多稍微花了点钱添置了一下新设备</p><h4 id="家具"><a href="#家具" class="headerlink" title="家具"></a>家具</h4><table><thead><tr><th>名称</th><th>价格</th><th>备注</th></tr></thead><tbody><tr><td>电脑桌</td><td>¥230</td><td>K字腿，20cm厚的桌板，140cm * 70cm * 75cm</td></tr><tr><td>台灯</td><td>¥70</td><td>悬臂带夹式，色温三挡调节，亮度十档调节</td></tr></tbody></table><p>我想了不少时间，本来想买个椅子，但还是犹豫，打算再挑挑。</p><p>后续考虑再补充其他硬件，但是大概率不会再加了。</p><h4 id="厨具"><a href="#厨具" class="headerlink" title="厨具"></a>厨具</h4><table><thead><tr><th>名称</th><th>价格</th><th>备注</th></tr></thead><tbody><tr><td>厨具套装</td><td>¥13</td><td>厨刀+瓜刨+案板，虽然厨刀不是传统的菜刀，但是于现状而言，能用就行</td></tr><tr><td>炖锅</td><td>¥40</td><td>日常炖锅</td></tr><tr><td>空气炸锅</td><td>¥0</td><td>家里之前买过，让家里人寄过来就行</td></tr><tr><td>高压蒸饭锅</td><td>¥0</td><td>家里有，直接寄过来就行，不仅能炖肉，也能用来蒸饭</td></tr><tr><td>玻璃碗</td><td>-</td><td>两个玻璃碗，一个碗用来处理</td></tr><tr><td>饭盒</td><td>-</td><td>暂时还没买，上班带饭用</td></tr><tr><td>调料</td><td>-</td><td>大润发购物卡买，油，盐，酱油，醋，八角，花椒，味精</td></tr><tr><td>火鸡面炸酱</td><td>¥43</td><td>350g*3瓶，估计能吃两个月左右，拌面速食还是很有用的</td></tr></tbody></table><h4 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h4><table><thead><tr><th>名称</th><th>价格</th><th>备注</th></tr></thead><tbody><tr><td>米饭</td><td>-</td><td>大润发购物卡买，一袋米价格约莫50左右，一天一顿估计能吃两个月不是问题</td></tr><tr><td>挂面</td><td>-</td><td>大润发购物卡换，一把挂面差不多够4顿，两把挂面，吃满一周不是问题</td></tr></tbody></table><p>以上是主食，填肚子用的，厨房存储空间也够，问题不大。</p><p>日常主菜，打算直接从附近的超市买点生菜瓜果，随便买买就可以，稍微买点就够一个人吃了，补充一下维C就行。</p><p>人也要经常吃点粗粮，调整一下肠胃，这个有点麻烦，附近没煎饼啥的卖，只能偶尔煮点红薯啥的，对付一下应该可以。</p><h3 id="新教训"><a href="#新教训" class="headerlink" title="新教训"></a>新教训</h3><p>前后房东都是一个二房东，之前没注意，换房结果还是换到一个房东手下了，真闹心。</p><p>这都不止最要命的，最要命的是我之前的押金他没退，说等他这个月找到下一个租客，这个租金才会退。</p><p>我从大学毕业以来走的太顺，从来没吃过房租这块的亏，都是公司包办的，哪怕是后来租房都是小区内找房东的合租房来解决的。</p><p>这也算是补了大学时没吃过的亏吧，以后尽可能注意这类二房东的问题，真他妈的操蛋。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>2025是新的一年，先准备更多新菜式吧，为后续找新工作做准备。</p><p>后续新工作必还需要新房间，我去年准备的一些菜式现在正好派上了用场，不过口味有点单调。</p><p>希望新年可以整理更多的有意思的家庭快餐，便于将来再派上用场了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>无</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然房间有点贵，而且房东和中介给我整了个大活，但新房间真是好，算是我目前租的所有房间里边最爽的之一。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://crazystudent13.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>解决vue中params传参刷新页面参数丢失问题</title>
    <link href="https://crazystudent13.github.io/2024/12/11/%E8%A7%A3%E5%86%B3vue%E4%B8%ADparams%E4%BC%A0%E5%8F%82%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%82%E6%95%B0%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>https://crazystudent13.github.io/2024/12/11/%E8%A7%A3%E5%86%B3vue%E4%B8%ADparams%E4%BC%A0%E5%8F%82%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%82%E6%95%B0%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</id>
    <published>2024-12-11T11:28:27.000Z</published>
    <updated>2024-12-11T11:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来我在vue项目开发中习惯用query传参，毕竟刷新不会丢失参数。</p><p>但是这次项目中固定为params传参，方式要改的话，需要改动的地方太多，索性就找个params传参刷新页面参数不丢失的办法。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>官方文档虽然有，但是实例写的不够清晰，自己这里索性整理下。</p><p>本文算是转载了其他人的帖子，详情可以翻阅底部的参考。</p><h3 id="实现params刷新页面传参不丢参"><a href="#实现params刷新页面传参不丢参" class="headerlink" title="实现params刷新页面传参不丢参"></a>实现params刷新页面传参不丢参</h3><p>配置路由文件<code>router.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/main&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/main&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Main&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/Main.vue&quot;</span>),</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//path: &#x27;/testPage&#x27;, //这种方式不配置参数名，页面刷新会丢失参数</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/testPage/:aaa/:bbb&quot;</span>, <span class="comment">//这样通过name 和 params进行路由传参时，刷新页面就不会丢失参数aaa和bbb 了。</span></span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;TestPage&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/TestPage/TestPage.vue&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调整函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">//路由调整传参测试</span></span><br><span class="line">  <span class="title function_">goRouterTest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// this.$router.push(&#x27;/testpage&#x27;);</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;TestPage&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">aaa</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">bbb</span>: <span class="string">&#x27;222&#x27;</span> &#125; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样传参时，地址栏就会出现参数了，这样属性就不会丢失了。</p><h3 id="实现vue配置可选路由参数"><a href="#实现vue配置可选路由参数" class="headerlink" title="实现vue配置可选路由参数"></a>实现vue配置可选路由参数</h3><p>假如下面是我们的某个路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;examPaperMultiPurpose/:action/:id&#x27;</span>, <span class="comment">//多加 ? 代表这个参数是可选的。</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;examPaperMultiPurpose&#x27;</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;考卷管理&#x27;</span>,</span><br><span class="line">  <span class="attr">notKeepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span> (<span class="string">&#x27;@/views/exam/examManage/examPaperMultiPurpose.vue&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们这样进行页面跳转时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>( &#123; <span class="attr">name</span>: <span class="string">&#x27;examPaperMultiPurpose&#x27;</span>, <span class="attr">params</span>: &#123;<span class="attr">action</span>: <span class="string">&#x27;add&#x27;</span>&#125; &#125; );</span><br></pre></td></tr></table></figure><p>很显然我们在跳转时， 没有进行 id 参数 的 传递。我们在控制台也会看到这样的警告。</p><p>提醒我们缺少参数，id是一个没有定义的。</p><p>当我们有时候不是都想传递每个参数，我们可以把参数配置成可选的。配置方法为：在不想传递的参数后只要多加一个 ? 即可。如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增、编辑、查询考卷</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;examPaperMultiPurpose/:action?/:id?&#x27;</span>, <span class="comment">//多加 ? 代表这个参数是可选的。</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;examPaperMultiPurpose&#x27;</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;考卷管理&#x27;</span>,</span><br><span class="line">  <span class="attr">notKeepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span> (<span class="string">&#x27;@/views/exam/examManage/examPaperMultiPurpose.vue&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就把两个参数action 和 id 配置成可选的路由参数了，之后，当我们继续进行上面的方式进行传参时，就不会警告我们 缺少参数了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个<code>params</code>传参可以说是最基础的了，我以前用过，但是工作中从未深入过。</p><p>这次因为工作必须要用，也是没有办法，特别记录一下，后续忘了之后可以过来梳理一下。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html#%E5%93%8D%E5%BA%94%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E7%9A%84%E5%8F%98%E5%8C%96">带参数的动态路由匹配 | Vue Router</a></p><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F">将 props 传递给路由组件 | Vue Router</a></p><p><a href="https://blog.csdn.net/sunyctf/article/details/129269397">原文：解决：vue通过params传参刷新页面参数丢失问题以及实现vue路由可选参数的解决办法_路由跳转携带参数刷新页面不丢失使用props-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来我在vue项目开发中习惯用query传参，毕竟刷新不会丢失参数。&lt;/p&gt;
&lt;p&gt;但是这次项目中固定为params传参，方式要改的话，需要改动的地方太多，索性就找个params传参刷新页面参数不丢失的办法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue2" scheme="https://crazystudent13.github.io/tags/vue2/"/>
    
    <category term="疑难杂症" scheme="https://crazystudent13.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>智能家居，远程下载机</title>
    <link href="https://crazystudent13.github.io/2024/12/06/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%EF%BC%8C%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD%E6%9C%BA/"/>
    <id>https://crazystudent13.github.io/2024/12/06/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%EF%BC%8C%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD%E6%9C%BA/</id>
    <published>2024-12-06T10:57:53.000Z</published>
    <updated>2024-12-06T10:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于智能家居的构想，一开始我只是想有个家用网盘能存东西就够。</p><p>但是，今年外出之后，才发现很多事的麻烦超出预料，不说别的，外部访问和下载速度就是一个很恶心的问题。</p><p>实际使用过程中，官方自带的外部访问速度很慢，并不好用，有时候甚至没法在外部看一些<code>1080p</code>的番剧。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一开始是没这么个需求的，但我在外地工作的时候，frp（就是内网穿透）出了问题，nas断掉了外部访问。</p><p>而这时候，我偏偏不在家，家里电脑不方便开，所以我又没法进行远程操作。</p><p>实际上，我的家庭上传带宽是可以满足需求的，我测过峰值，实际使用的时候，很多时间是没问题的。</p><p>我和朋友谈论过关于远程上传下载的问题，当时都觉得Frp是个好办法，已经足够应对外部的访问了，毕竟外部访问只取决于家庭带宽。</p><p>而且，为了保证使用，我一开始在家里开的最稳定最好用的电信带宽。</p><p>但是这次FRP出问题，我完全没法去操作家里的电脑。</p><p>这时候，我需要一台电脑充当跳板，远程操作家里的电脑来控制nas，进而解决frp的穿透问题。</p><p>而且，这台电脑不仅可以充当跳板来解决很多不方便的事，也能去做一些自动化的事情。</p><p>比如，挂载方舟手游，辅助挂机，给一些游戏挂点卡和在线时长之类的，或者充当NAS的下载机，辅助下载一些大文件。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>结合上述的场景，情况基本上很明白了。</p><p>我需要一台配置简单还能用的电脑充当跳板机，来做最后的保险，顺带解决一些其他的事。</p><p>同时，我需要能在外部控制远程开关机，让这台机子足够省电，毕竟，这只是一个保底手段，我需要的不是一台服务器。</p><p>这个电脑需要具有如下特性：</p><ol><li>够便宜，因为现在钱极少，所以这是最核心的需求，价格最好能压到<strong>600元</strong>以下，不是新件也无所谓，有就可以。</li><li>够耐操，不是对环境有什么要求，单纯就是这台机子可能放在某个角落用3年以上，希望中间别用几个月就崩掉就好</li><li>低能耗，至少不能是个电老虎，常规的<code>400w</code>电源能撑住就行，当然，主要是稳妥，别出现炸电源的情况</li><li>容量大，硬盘的容量必须够大，而且因为现在固态容量低，且这玩意的本质就是下载机，所以希望有个自带2T的固态</li><li>高扩展，希望主板能保证有一个<code>m2</code>的固态插槽位置，<code>sata</code>口的固态很麻烦，我后续装硬盘不好装，如果可以，最好再预留一个固态的位置</li><li>速度快，希望主板能自带千兆的网卡，保证外部访问的速度，虽然外网肯定跑不满，但是家庭内网之间，这个带宽是可以跑满的，便于大文件的传输</li></ol><p>除此之外，常规状态下，我还是希望能运行一些稍微有点吃性能的工具软件。</p><p>如：<code>cad</code>，<code>手机模拟器</code>以及<code>DNF</code>这类经典的横版游戏，大致要求就是这样了。</p><p>不考虑笔记本，二手笔记本价格都不低，且如果配件出问题，台式机配件更便宜，且方便更换。</p><h3 id="配置方案"><a href="#配置方案" class="headerlink" title="配置方案"></a>配置方案</h3><p>经过和朋友的联络，成功的搞到两台不错的选项，事情比预想中的要好很多。</p><h4 id="肯德基套餐"><a href="#肯德基套餐" class="headerlink" title="肯德基套餐"></a>肯德基套餐</h4><p>硬件都是朋友的赞助，算是人情价，我自己再弄点机箱，线板之类的，累计约莫不到200就能入手，我只需要包邮加上<code>V50的疯狂星期四</code>即可。</p><p>显卡有两个朋友都愿意出，我正好也愿意收，AMD RX580 包邮就能拿，爽到。</p><p>不过这台电脑没有机箱，目前得想办法弄个机箱用，正好附近有个网吧，过两天发工资了过去问问，有没有废旧机箱收一个。</p><table><thead><tr><th>配件</th><th>硬件类型</th><th>市场估价&#x2F;购买价</th></tr></thead><tbody><tr><td>CPU</td><td>I5的</td><td>朋友赠送</td></tr><tr><td>主板</td><td>精粤</td><td>朋友赠送</td></tr><tr><td>内存</td><td>16G</td><td>朋友赠送</td></tr><tr><td>电源</td><td>长城650</td><td>朋友赠送</td></tr><tr><td>主硬盘</td><td>致钛 Ti600 1TB</td><td>370</td></tr><tr><td>显卡A</td><td>R9 270 2G</td><td>150</td></tr><tr><td>机箱</td><td>威盛ATX 大机箱</td><td>54</td></tr></tbody></table><p>这么一整套，价格被压倒了极致，配合手里的一些零碎物件，用来做家里的跳板机，简直再合适不过。</p><p>朋友送的电脑有CPU+主板+内存+电源，几乎算是全套机器了，我自己买的加朋友的配置，拢共600左右，并不算高的配置。</p><h4 id="回旋镖电脑"><a href="#回旋镖电脑" class="headerlink" title="回旋镖电脑"></a>回旋镖电脑</h4><p>这是我一年前转给朋友的电脑，当时价格是3600，这电脑最开始我配置的时候原价差不多近6000，三年掉了近一半，真是没想到。</p><p>后来朋友需要电脑，我拆掉了部分配置，按照当时市场价卖他了。</p><p>正好，当时显卡价格有点虚，所以我砍了不少价格卖出去。</p><p>时隔一年，朋友换了新电脑，我正好要有台家用的远程电脑，这一套我卖出去的电脑仿佛去年的纸飞机回到我手里（暂时还没买，只是一个备选项）。</p><p>一开始，我预计现在价格差不多应该在2k左右，但是查了一下市价，比想象中的要低一些。</p><table><thead><tr><th>配件</th><th>硬件类型</th><th>市场估价</th></tr></thead><tbody><tr><td>CPU</td><td>i7-8700 CPU</td><td>500-600</td></tr><tr><td>主板</td><td>技嘉 B360 M</td><td>150</td></tr><tr><td>内存</td><td>32.00 GB (   2666 MHz)</td><td>180-200</td></tr><tr><td>主硬盘</td><td>256 GB  (三星 SAMSUNG MZVLB256HAHQ)</td><td>50</td></tr><tr><td>显卡</td><td>NVIDIA GeForce GTX 1060 3GB (3072MB)</td><td>450-500</td></tr><tr><td>机箱</td><td>先马的，原价近500的</td><td>270</td></tr></tbody></table><p>这套配置已经出乎意料的强了，没想到现在价格居然差不多两千就能入手，折价有点太狠，一时间有些唏嘘。</p><p>不过，暂时不考虑入手，毕竟现在手里经济已经拮据到一定程度了，实在是没有办法。</p><h3 id="远程方案"><a href="#远程方案" class="headerlink" title="远程方案"></a>远程方案</h3><p>远程方案我看了市面上的很多方案，大致总结了一下，主要要分为两步。</p><ol><li>远程开机，通过遥控的方式，在需要使用的时候打开家用电脑，在不需要的时候关闭，节省能耗</li><li>远程操作，目前市面上的第三方操作工具用的都不是很舒心，而开源的<code>rust-desk</code>效果不错，未来说不定会以此为主</li></ol><p>操作已经确定，剩下的就是确定方案了。</p><p>首先，是远程开机方案，而目前市面上有两种常规的方案：</p><ol><li>远程电源控制+<code>BIOS</code>联动开机的方案。</li><li>另一种就是第三方提供的远程开机棒。</li></ol><p>因为现状窘迫，我更倾向于第一种，远程电源控制+<code>BIOS</code>联动的方式来开机，我这里参考了<a href="https://www.bilibili.com/video/BV1484y1Y71e/?spm_id_from=333.337.search-card.all.click&vd_source=ee3784ffe5f760cb992921cb8c5c98e5">Asus主板开启来电自启</a>。</p><p>两者都要花钱，但是小米的远程控制供电还是更稳妥些，后续我按流程亲测，基本上不会出什么问题。</p><p>就是偶尔上电之后会有不开机，这大概是因为电源放电没搞完，只要间隔时间久一点就不会有什么问题。</p><p>不过远程控制暂时没确定，目前还是用向日葵来处理，未来我会替换成其他的工具。</p><h4 id="rust-desk使用"><a href="#rust-desk使用" class="headerlink" title="rust-desk使用"></a>rust-desk使用</h4><p>在比较了向日葵和rust-desk之后，我个人目前更倾向于使用<code>rust-desk</code>，和朋友互相测试讨论过后，优势如下。</p><ol><li>流量消耗低，按照朋友自己的测试，一周白天都开远程，也就消耗500M左右的流量，而服务器每月有20G的免费流量，完全没问题</li><li>低延迟，操作延迟基本上无感，只要服务器是境内的，带宽够的话，亲测用来玩单机没有问题。</li><li>安装方便，如果是传统方式安装可能很麻烦，但现在用了1panel的安装面板之后，事情就简单很多了，基本上就是傻瓜化的点点就行。</li><li>能播放音频，向日葵无法做到，而rust-desk则可以做到</li></ol><p>需要注意的点：</p><ol><li>打开1panel中，rust-desk的安装路径<code>/opt/1panel/apps/rustdesk/rustdesk/data/hbbs</code>，找到id_××××.pub的文件，找到对应的key复制进客户端就行。</li><li>客户端，设置-&gt;网络，只要配置ID服务器和key就可以，其他的不用配置了</li><li>手机端操作可能不太好用，这点是朋友说的，不过我不在移动端操作，所以无所谓这点</li></ol><p>rust-desk开源的项目，没有会员费用啥的，用着也省心。</p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>本来打算用win10系统的，但是系统好像会自动升级win11，考虑到自己已经掌握了美化工具star11，这里就直接用win11的系统了。</p><p>激活win11系统的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm https://massgrave.dev/get|iex</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前已经完成了家用电脑作为跳板机的操作，在外边可以用家庭电脑来远程完成一些消耗性能的事情。</p><p>比如，AI生成图片，家庭NAS操作之类的事情。</p><p>不过，远程操作还是有点不方便，比如音频无法远程，后续看看有没有更好的方案。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于智能家居的构想，一开始我只是想有个家用网盘能存东西就够。&lt;/p&gt;
&lt;p&gt;但是，今年外出之后，才发现很多事的麻烦超出预料，不说别的，外部访问和下载速度就是一个很恶心的问题。&lt;/p&gt;
&lt;p&gt;实际使用过程中，官方自带的外部访问速度很慢，并不好用，有时候甚至没法在外部看一些&lt;code&gt;1080p&lt;/code&gt;的番剧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="智能家居" scheme="https://crazystudent13.github.io/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
  </entry>
  
  <entry>
    <title>2024年度个人大事件总结</title>
    <link href="https://crazystudent13.github.io/2024/11/27/2024%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E5%A4%A7%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://crazystudent13.github.io/2024/11/27/2024%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E5%A4%A7%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BB%93/</id>
    <published>2024-11-27T13:43:56.000Z</published>
    <updated>2024-11-27T13:43:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>马上就要年末了，这是经历的最多的一年，发生了很多事，值得总结。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在2024阳历年落幕之前，我从技术，生活，游戏相关方向整理一下今年发生的事情。</p><p>顺带的，我会对今年的时政新闻做个简单的总结，算是对这个魔幻的时代做个记录。</p><p>这大概是我人生第二精彩的一年，因为今年有趣的事和糟糕的经历实在是多。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>今年上半年，按照个人规划，原本是要在徐州工作，原因是离家近，将来很多事儿方便。</p><p>但因为种种原因，加上自己家里出了事，且徐州工资较低，最终，我还是放弃了徐州的工作。</p><p>果然，低工资低消费会产生一个大问题，就是容错会极低。</p><h4 id="工作地"><a href="#工作地" class="headerlink" title="工作地"></a>工作地</h4><p>今年的工作地就两处，徐州和苏州，最终还是选择苏州，工资和生活水平相对没那么难受。</p><h5 id="徐州"><a href="#徐州" class="headerlink" title="徐州"></a>徐州</h5><p>徐州的工资水平难以超过8000，按照地方的工资水平，8000算是T1级别的工资，如果是上万，就算是妥妥的T0级别了。</p><p>关于地方物价，个人评价：极低。</p><p>一碗盖浇饭最多8-12左右，一碗偏荤的好菜，大约15就能吃到相当不错的菜了，而且这能保证我这个大胃王都能吃饱。</p><p>房租700左右，就能租到一个相当不错的单间，这房子放在苏州稍微热门的区域，估计得1500左右。</p><p>且今年还做了一个百公里骑行，把自己的自行车弄回来了，这种夸张的行为，可能是我这辈子仅见的事情了。</p><h5 id="苏州"><a href="#苏州" class="headerlink" title="苏州"></a>苏州</h5><p>苏州算是我的起始之地，很多朋友熟人都在这边，他们帮了我很多。</p><p>相对于上海的超高消费，苏州的消费没那么离谱，不至于让我第一步都走的那么艰难。</p><p>而且，苏州生活节奏相对较慢，是个清闲之地。</p><p>不过，这里毕竟是苏南，相对于徐州，苏州这边物价相对偏高，但是工资还算是不错。</p><p>虽然现在的工资没高过以前，只能算是持平。</p><p>这个没办法，毕竟很长时间没工作，这个空窗期让很多人招聘有顾忌，如今能有一份能持平之前薪资的工作，已经不错了。</p><p>而且，自己的学历没弄好，在苏州很难找到一个15K以上的工作。</p><p>又有今年工作特别难找的缘故，很多面试机会都没有，自己的经济水平又极为着急，所以我就先安稳下来了。</p><p>如今勉强算是稳定下来，好在工作不错，相对稳定，且作息很准时，不会像以前一样瞎搞加班。这让我有充分的时间能安排自己，这让我很开心，也很感激现在的老板和项目组。</p><p>不过，这边的技术栈相对来说有点旧，不知道后续能不能主导升级。</p><p>同年，做了小自考的报名，给大自考做个托底，省的自己大自考后续拖延了自己的进度。</p><h4 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h4><ol><li>年终体检，左肾结石，右肾有结晶，且中度偏重度脂肪肝，尿酸偏高，同时高血脂，这问题比较糟糕，得作为下一年的重要事项。</li><li>明明经常换衣服，同事还是好意提醒说体味较大，怀疑是身体内分泌出了问题</li><li>血压控制初见成效，后续保持服药，剩下的等报告出来之后再细究。</li></ol><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>技术相对于之前固定的技术栈有了长足的进步，因为今年徐州之行接触的公司，至少技术不错。</p><p>可以说，今年很多相关的新技术都是在那时候开始使用实践的，加上今年新工作难度不高，业余时间相对充裕，所以，做了很多事。</p><ol><li>通过<code>vue3</code>的相关项目开发，学习了<code>vue3</code>+ <code>ts</code>的开发方式，建立了<code>vue3</code>的开框架</li><li>整合了自己前端的知识体系，填充了很多边缘地带的技术</li><li>补习<code>nestjs</code>为底的相关后端技术，让自己的技术体系逐渐完整，不算半吊子开发了，从运维，后端开发的角度提升了自己</li><li>参与了数个开源项目的开发，让自己拓展的知识体系能够有实践的平台</li></ol><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>今年是玩游戏最憋屈的一年，要么是没有时间玩，只能说当穷了的时候，什么事情都做的很憋屈。</p><p>这里整理一下，今年要是有钱有闲了，我得花个时间好好玩玩一下。</p><ol><li>6月，艾尔登法环<code>dlc</code>发布，但是没钱，没时间，也没配置</li><li><code>820</code>黑神话发售，但是没钱买，没配置，但是此时其实勉强有时间，只能去贴吧进行论坛PVP</li><li>买了<code>逸剑风云决</code>，但是没时间玩，此时有空间</li><li>玩了卡琳典狱长，玩了，也很喜欢，但是没时间整理相关攻略，太可惜了，难得游戏性不错的黄游</li></ol><h3 id="时政"><a href="#时政" class="headerlink" title="时政"></a>时政</h3><p>今年的时政是极为特殊的一年，甚至可以说是这数年最为有趣的一年了。</p><p>果然，懂王上台，时政区就是会变得极为有趣。</p><ol><li>特朗普以极为有趣形式重新回归，如有神佑的那一幕真是太酷了，传说他要整治<code>LGBT</code>的相关内容，不知道能不能成型。</li><li>因为特朗普登台，乌克兰现阶段没有了援助，未来俄乌战场似乎会变得消停，这有些太无趣了</li><li>国内房价似乎开始终于开始回归理性，不少地方的房价开始逐渐腰斩，就这样还卖不出去，但是也不是全部腰斩，核心地段的房价依然坚挺，只能依靠等待了</li><li>市面上，技术工作开始逐渐难找，前端技术开发和3年前的招聘要求完全是滑档了两个层次</li><li>京东在今年双11找杨笠代言，引发了众怒，今年平台居然罕见的被大部分男性群体抵制，这大概是男女矛盾第一次如此直观剧烈的显现出来</li><li>2024年12月，韩国总统尹锡悦在任期内发动一场政变，似乎要搞集权，但是不到一晚就失败，过程极为戏剧性，似乎不到六小时，我几乎以为我活在一个戏剧的世界里，这场政变中，李明博直接翻墙（因为士兵封锁大门，但是也许出于师出无名的问题，又没有完全封锁），结果就是这种磨洋工的现状，我还以为会是新的一场光州无限制格斗大赛来着。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前先整理这么多，后续在2024年阳历年结束之前，我会逐步整理。</p><p>这虽然是我过的最操蛋的一年，但确实是最近数年来最精彩的一年，值得记录。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>暂无</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;马上就要年末了，这是经历的最多的一年，发生了很多事，值得总结。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://crazystudent13.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>10分钟了解强缓存与协商缓存</title>
    <link href="https://crazystudent13.github.io/2024/11/16/10%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/"/>
    <id>https://crazystudent13.github.io/2024/11/16/10%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/</id>
    <published>2024-11-16T15:43:09.000Z</published>
    <updated>2024-11-16T15:43:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于强缓存与协商缓存，之前从未深入了解过。</p><p>一直到最近优化项目的时候，群友提到了刷新页面的时候，为什么资源会比第一次更快？</p><p>我自然知道这是缓存，深入一些就是强缓存，然后具体的呢？我回答不上了。</p><p>于是，为了弄明白为什么浏览器第二次访问效果会更快，我这里就整理了本篇，便于自己理解相关概念。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>所谓强缓存，可以理解为强制缓存的意思</p><p>即浏览器在访问某个资源时会判断是否使用本地缓存里已经存在的资源文件，使用本地缓存的话则不会发送请求到服务器，从而达到减轻服务器访问压力的作用。</p><p>且由于直接从本地缓存读取资源文件，大大提高了加载速度。</p><p>强缓存的具体流程为：</p><p>浏览器第一次请求远程服务器的某个资源时，如果服务器希望浏览器得到该资源后一段时间内不要再发送请求过来，直接从浏览器里的缓存里取，则服务器可以通过在响应头里设置<code>Cache-Control: max-age=31536000</code>，max-age代表缓存时间，单位为秒，这里的数据换算过来就是一年，意味着在一年内浏览器不会再向服务器发送请求。</p><p>使用缓存的话，状态码200后面会标明情况。浏览器缓存资源的地方有两个：磁盘缓存（disk cache）和内存缓存（memory cache）。</p><p>当缓存时间到期后再次访问时，状态码200后面便没有括号内的内容了。</p><blockquote><p>一般来说，浏览器会将较大的资源缓存到disk cache，而较小的资源则被缓存到memory cache里。内存缓存与磁盘缓存相比，访问速度要更快一些！</p></blockquote><p><code>Cache-Control</code>除了max-age外，还可以设置其它属性值：</p><ul><li>no-cache: 不使用强缓存（但仍会使用协商缓存）。</li><li>no-store: 不使用缓存（不使用强缓存也不使用协商缓存），每次都向服务器发送资源请求。</li><li>private： 只允许客户端使用缓存，不允许其他代理服务器进行缓存。</li><li>public: 客户端和代理服务器都可缓存。</li><li>s-maxage: 与max-age类似，区别是s-maxage是设定代理服务器的缓存时间。</li></ul><p>强缓存除了使用<code>Cache-Control</code>实现之外，还可以使用<code>Expires</code>字段，<code>Expires</code>是Http1.0规范，<code>Cache-Control</code>是Http1.1规范，<code>Expires</code>返回一个具体的时间值（如下图所示），代表缓存的有效期，在该日期内浏览器不会向服务器发起请求，而是直接从缓存里获取资源。</p><p>因为<code>Expires</code>参照的是本地客户端的时间，而客户端的时间是可以被修改的，所以会有误差产生的情况，这也是<code>Expires</code>的一个缺点，所以有了后来Http1.1规范的<code>Cache-control</code>。</p><p>另外，<code>Cache-control</code>的优先级要高于<code>Expires</code>，如果两者同时设置，会优先使用<code>Cache-control</code>而忽略掉Expires。</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>在强缓存里，是否使用缓存是由浏览器来确定的，而协商缓存则是由服务器来告诉浏览器是否使用缓存资源，也就是浏览器每一次都要发送请求到服务器询问是否使用缓存。</p><p>协商缓存的具体流程如下：</p><p>浏览器初次请求资源，服务器返回资源，同时生成一个<code>Etag</code>值携带在响应头里返回给浏览器，当浏览器再次请求资源时会在请求头里携带<code>If-None-Match</code>，值是之前服务器返回的<code>Etag</code>的值，服务器收到之后拿该值与资源文件最新的<code>Etag</code>值做对比。</p><ul><li>如果没有变化则返回304，告诉浏览器继续使用缓存（不返回资源文件）。</li><li>如果发生变化，则返回200和最新的资源文件给浏览器使用。</li></ul><p>除了<code>Etag</code>外，还有一个<code>Last-Modified</code>的属性，它是Http1.0规范的，服务器返回<code>Last-Modified</code>，浏览器请求头对应携带的是<code>If-Modified-since</code>，与<code>Etag</code>不同的是，<code>Last-Modified</code>的值是一个时间值，代表文件的修改时间，服务器通过对比文件的修改时间是否发生改变来判断是否使用缓存。</p><p>相比<code>Last-Modified</code>，<code>Etag</code>优先级更高，使用上也更精确一些，因为有时候会存在文件内容并没有改变，但文件的修改时间变更了，<code>Last-Modified</code>不一致所以服务器会重新返回资源文件，实际上还是可以继续使用缓存的。</p><blockquote><p>强缓存优先级大于协商缓存，即两者同时存在时，如果强缓存开启且在有效期内，则不会走协商缓存。</p></blockquote><h3 id="总结比较"><a href="#总结比较" class="headerlink" title="总结比较"></a>总结比较</h3><h4 id="强缓存-1"><a href="#强缓存-1" class="headerlink" title="强缓存"></a>强缓存</h4><p>浏览器本地根据服务器设置的过期时间来判断是否使用缓存，未过期则从本地缓存里拿资源，已过期则重新请求服务器获取最新资源。</p><h4 id="协商缓存-1"><a href="#协商缓存-1" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>则是浏览器本地每次都向服务器发起请求，由服务器来告诉浏览器是从缓存里拿资源还是返回最新资源给浏览器使用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文大多并非原创，主要内容是摘录他人文章后整合的。</p><p>但是因为转载的内容并不单一，标注为转载又有点不太合适，且确实有我个人的理解在内。</p><p>于是，本文仅作为自己的收藏，而不发布到掘金。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7259298281578889273">什么是强缓存、协商缓存？</a></p><p><a href="https://juejin.cn/post/6844903838768431118?searchId=202411162334056453EA14D654B17A5778">http面试必会的：强制缓存和协商缓存</a></p><p><a href="https://juejin.cn/post/7065895592613904392?searchId=202411162334056453EA14D654B17A5778">不废话，代码实践带你掌握 强缓存、协商缓存！</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于强缓存与协商缓存，之前从未深入了解过。&lt;/p&gt;
&lt;p&gt;一直到最近优化项目的时候，群友提到了刷新页面的时候，为什么资源会比第一次更快？&lt;/p&gt;
&lt;p&gt;我自然知道这是缓存，深入一些就是强缓存，然后具体的呢？我回答不上了。&lt;/p&gt;
&lt;p&gt;于是，为了弄明白为什么浏览器第二次访问效果会更快，我这里就整理了本篇，便于自己理解相关概念。&lt;/p&gt;</summary>
    
    
    
    
    <category term="浏览器" scheme="https://crazystudent13.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://crazystudent13.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>解决前端JS精度丢失的问题</title>
    <link href="https://crazystudent13.github.io/2024/11/04/%E8%A7%A3%E5%86%B3%E5%89%8D%E7%AB%AFJS%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://crazystudent13.github.io/2024/11/04/%E8%A7%A3%E5%86%B3%E5%89%8D%E7%AB%AFJS%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-11-04T13:36:13.000Z</published>
    <updated>2024-11-04T13:36:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端数据精度丢失是个常见的问题，本次记录说实话有点大可不必，毕竟这是一个前端常见的问题。</p><p>但是考虑到自己的记忆水平不够，每次再去找攻略又有点不太合适，太过浪费时间。</p><p>索性这次就记录一下，便于后续快速使用。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在前端开发中，尤其是在处理财务数据或需要高精度计算的场景下，JavaScript 的浮点数运算可能会导致精度丢失。</p><p>例如，<code>0.1 + 0.2</code> 的结果不是 <code>0.3</code>，而是 <code>0.30000000000000004</code>。</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><ul><li>JavaScript 使用 IEEE 754 标准来表示浮点数，这种表示方法在某些情况下会导致精度丢失。</li><li>浮点数的二进制表示无法精确表示某些十进制小数，从而导致计算结果不准确。</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>我知道有很多可能为了方便会用使用 <code>toFixed</code> 或 <code>Math.round</code> ，对于简单的应用场景，这可能已经足够。</p><p>但是大多数我们要处理精度的场景，往往都是涉及到支付金额的计算，这些都是非常重要的场景，一定不能出现精度丢失的情况。</p><p>所以，此时我们就需要引入精度库。</p><p>市面上有常见的好几种精度库，我这里距离如下：</p><ul><li><a href="https://juejin.cn/post/7012270695145029639?searchId=20241104222945653935635CFFEC49C964">decimal.js</a>：功能最全面，适合大多数高精度计算需求。</li><li><a href="https://juejin.cn/post/6931167908429037582">big.js</a>：体积最小，适合对性能和体积有严格要求的项目。</li><li><a href="https://juejin.cn/post/6844903704714280968">bignumber.js</a>：功能强大，支持多种数据类型，适合复杂的高精度计算场景。</li></ul><p>以上是市面上常用的三种精度库，如果你想了解更多，欢迎参考下放链接。</p><p><a href="https://juejin.cn/post/7069965114564165662">big.js、bignumber.js 和 decimal.js 之间的差别（翻译）</a></p><h3 id="decimal-js"><a href="#decimal-js" class="headerlink" title="decimal.js"></a>decimal.js</h3><p>我这里就先介绍我自己常用的精度库，泛用性最广，使用起来也相对简单的库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install decimal.js</span><br></pre></td></tr></table></figure><p>Decimal.js 支持以下运算符的重载</p><table><thead><tr><th>运算符名称</th><th>运算符</th></tr></thead><tbody><tr><td>加法</td><td>+</td></tr><tr><td>减法</td><td>-</td></tr><tr><td>乘法</td><td>*</td></tr><tr><td>除法</td><td>&#x2F;</td></tr><tr><td>取模运算</td><td>%</td></tr><tr><td>指数运算</td><td>**</td></tr><tr><td>自增运算</td><td>++</td></tr><tr><td>自减运算</td><td>–</td></tr></tbody></table><p>这些运算符被重载后，可以直接用于 Decimal 对象之间的运算，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="string">&#x27;2.5&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = a + b; <span class="comment">// 等同于 a.plus(b)</span></span><br><span class="line"><span class="keyword">const</span> d = b - a; <span class="comment">// 等同于 b.minus(a)</span></span><br><span class="line"><span class="keyword">const</span> e = a * b; <span class="comment">// 等同于 a.times(b)</span></span><br><span class="line"><span class="keyword">const</span> f = a / b; <span class="comment">// 等同于 a.div(b)</span></span><br><span class="line"><span class="keyword">const</span> g = b % a; <span class="comment">// 等同于 b.mod(a)</span></span><br><span class="line"><span class="keyword">const</span> h = a ** <span class="number">2</span>; <span class="comment">// 等同于 a.toPower(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">i++; <span class="comment">// 等同于 i = i.plus(1);</span></span><br><span class="line">i--; <span class="comment">// 等同于 i = i.minus(1);</span></span><br></pre></td></tr></table></figure><p>以下是它的通常用法：</p><h4 id="格式化数值"><a href="#格式化数值" class="headerlink" title="格式化数值"></a>格式化数值</h4><p>数值被处理后，不能直接展示到页面，得格式化一下，一般常用的由以下几种。</p><ul><li><code>toString()</code> 格式化为字符串。</li><li><code>valueOf()</code> 格式化为字符串，但是有符号零 <code>console.log((new Decimal(-0)).valueOf()) // -0</code>。</li><li><code>toNumber()</code> 格式化为Number类型，转换为原始数字的值。</li><li><code>toFixed()</code> 格式化为字符串类型，用法和JS中<code>toFixed()</code>一样，不同的是decimal.js中的<code>toFixed()</code>有第二参数，可以设置舍入的类型。</li></ul><p>还有一些不常用的</p><ul><li><code>toBinary()</code> 格式化为二进制。</li><li><code>toHexadecimal()</code> 格式化为十六进制。</li><li><code>toOctal()</code> 格式化为八进制。</li></ul><h4 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h4><p>在计算中最经常用到就是加减乘除，下面来看一下decimal.js中的加减乘除。</p><p>有两种用法，一种是使用<code>Decimal</code>类的静态方法，一种是使用<code>Decimal</code>类实例方法。</p><ul><li>加法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Decimal</span>.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> result = x.<span class="title function_">plus</span>(<span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>减法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Decimal</span>.<span class="title function_">sub</span>(<span class="number">3</span>, <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> result = x.<span class="title function_">sub</span>(<span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>乘法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Decimal</span>.<span class="title function_">mul</span>(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> result = x.<span class="title function_">mul</span>(<span class="number">2</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><ul><li>除法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Decimal</span>.<span class="title function_">div</span>(<span class="number">6</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">const</span> result = x.<span class="title function_">div</span>(<span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>使用除法时候要注意 除数（分母）不能为0。</strong></p><h4 id="取绝对值"><a href="#取绝对值" class="headerlink" title="取绝对值"></a>取绝对值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Decimal</span>.<span class="title function_">abs</span>(-<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(-<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> result = x.<span class="title function_">abs</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ul><li>大于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">greaterThan</span>(y)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>大于等于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">greaterThanOrEqualTo</span>(y)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>小于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">lessThan</span>(x)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>小于等于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">lessThanOrEqualTo</span>(x)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>等于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">equals</span>(y)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><ul><li>是否是整数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">1</span>) </span><br><span class="line">x.<span class="title function_">isInteger</span>(); <span class="comment">// true </span></span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">123.456</span>) </span><br><span class="line">y.<span class="title function_">isInt</span>(); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>是否是正数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">0</span>);</span><br><span class="line">x.<span class="title function_">isPositive</span>();<span class="comment">// true</span></span><br><span class="line">y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(-<span class="number">2</span>);</span><br><span class="line">y.<span class="title function_">isPos</span>(); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>是否是负数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">new</span> <span class="title class_">Decimal</span>(-<span class="number">0</span>); </span><br><span class="line">x.<span class="title function_">isNegative</span>(); <span class="comment">// true </span></span><br><span class="line">y = <span class="keyword">new</span> <span class="title class_">Decimal</span>(<span class="number">2</span>); </span><br><span class="line">y.<span class="title function_">isNeg</span>(); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有传言说这三种精度库是一个作者，其实用哪个都可以。</p><p>但是这个传言我记不清自己是在哪里看到的了，不过这里我就不去详细考证了。</p><p>于此时的我而言，能用就行。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/nanfei/p/17247991.html">js 中使用 decimal.js 进行不丢失精度的小数计算 - 空明流光 - 博客园</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前端数据精度丢失是个常见的问题，本次记录说实话有点大可不必，毕竟这是一个前端常见的问题。&lt;/p&gt;
&lt;p&gt;但是考虑到自己的记忆水平不够，每次再去找攻略又有点不太合适，太过浪费时间。&lt;/p&gt;
&lt;p&gt;索性这次就记录一下，便于后续快速使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JS" scheme="https://crazystudent13.github.io/tags/JS/"/>
    
    <category term="疑难杂症" scheme="https://crazystudent13.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>性能优化，gzip压缩加速访问</title>
    <link href="https://crazystudent13.github.io/2024/10/28/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%8Cgzip%E5%8E%8B%E7%BC%A9%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE/"/>
    <id>https://crazystudent13.github.io/2024/10/28/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%8Cgzip%E5%8E%8B%E7%BC%A9%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE/</id>
    <published>2024-10-28T11:28:47.000Z</published>
    <updated>2024-10-28T11:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>gzip</code>文件压缩是一个常用的性能提升手段，几乎是现代前端做性能优化的必须手段。</p><p>以前一直想整理一下，但是没有合适的例子，最近正好在整理自己的开源项目，且服务器带宽很烂。</p><p>于是，这次经历就是一个极佳的性能优化案例了，一定要整理下。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先说结论，<code>gzip</code>压缩效果出乎意料的好，大幅提升了访问速度，将一个访问极慢的页面改为至少勉强能用了。</p><p>废话不说多，我们直接看结果。</p><h3 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h3><table><thead><tr><th align="center">对比指标</th><th align="center">优化前</th><th align="center">优化后</th></tr></thead><tbody><tr><td align="center">文件大小</td><td align="center">2M左右</td><td align="center">500k左右</td></tr><tr><td align="center">访问时间</td><td align="center">90s左右</td><td align="center">15s左右</td></tr></tbody></table><p>可以看到，性能提升了不止一点点，尽管很慢，但是速度确实肉眼可见的大幅提升。</p><p>不过因为服务器带宽太低，这里访问速度效果还是很差。</p><h3 id="Vue3配置"><a href="#Vue3配置" class="headerlink" title="Vue3配置"></a>Vue3配置</h3><p>在 Vite 项目中配置 Gzip 压缩，可以通过 <code>vite.config.js</code> 文件来实现。</p><p>安装依赖， 如果你还没有安装 <code>vite-plugin-compression</code> 插件，可以使用以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-compression --save-dev</span><br></pre></td></tr></table></figure><p>配置 <code>vite.config.js</code>， 在 <code>vite.config.js</code> 文件中引入并配置 <code>vite-plugin-compression</code> 插件。</p><p>这里单独配置了一个插件，如下，当我们在生产环境时候再使用<code>gzip</code>比较好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compression <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-compression&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createCompression</span>(<span class="params">env</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="variable constant_">VITE_BUILD_COMPRESS</span> &#125; = env</span><br><span class="line">    <span class="keyword">const</span> plugin = []</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">VITE_BUILD_COMPRESS</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> compressList = <span class="variable constant_">VITE_BUILD_COMPRESS</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (compressList.<span class="title function_">includes</span>(<span class="string">&#x27;gzip&#x27;</span>)) &#123;</span><br><span class="line">            plugin.<span class="title function_">push</span>(</span><br><span class="line">                <span class="title function_">compression</span>(&#123;</span><br><span class="line">                    <span class="attr">ext</span>: <span class="string">&#x27;.gz&#x27;</span>,</span><br><span class="line">                    <span class="attr">deleteOriginFile</span>: <span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (compressList.<span class="title function_">includes</span>(<span class="string">&#x27;brotli&#x27;</span>)) &#123;</span><br><span class="line">            plugin.<span class="title function_">push</span>(</span><br><span class="line">                <span class="title function_">compression</span>(&#123;</span><br><span class="line">                    <span class="attr">ext</span>: <span class="string">&#x27;.br&#x27;</span>,</span><br><span class="line">                    <span class="attr">algorithm</span>: <span class="string">&#x27;brotliCompress&#x27;</span>,</span><br><span class="line">                    <span class="attr">deleteOriginFile</span>: <span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plugin</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里将所有的文件都封装为一个config文件，搞定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> createCompression <span class="keyword">from</span> <span class="string">&#x27;./compression&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createVitePlugins</span>(<span class="params">viteEnv, isBuild = <span class="literal">false</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vitePlugins = [<span class="title function_">vue</span>()]</span><br><span class="line">isBuild &amp;&amp; vitePlugins.<span class="title function_">push</span>(...<span class="title function_">createCompression</span>(viteEnv))</span><br><span class="line">    <span class="keyword">return</span> vitePlugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>vue.config.js</code>的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createVitePlugins <span class="keyword">from</span> <span class="string">&#x27;./vite/plugins&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig, loadEnv &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> createVitePlugins <span class="keyword">from</span> <span class="string">&#x27;./vite/plugins&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(<span class="function">(<span class="params">&#123; mode, command &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> env = <span class="title function_">loadEnv</span>(mode, process.<span class="title function_">cwd</span>())</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="variable constant_">VITE_APP_ENV</span> &#125; = env</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 部署生产环境和开发环境下的URL。</span></span><br><span class="line">    <span class="comment">// 默认情况下，vite 会假设你的应用是被部署在一个域名的根路径上</span></span><br><span class="line">    <span class="attr">base</span>: <span class="variable constant_">VITE_APP_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/&#x27;</span> : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: <span class="title function_">createVitePlugins</span>(env, command === <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>光完成vue3的配置打包，并不能在线上访问，这时候需要自行去处理<code>nginx</code>的配置，保证用户可以获取对应的配置。</p><h4 id="为什么要开启-gzip-压缩？"><a href="#为什么要开启-gzip-压缩？" class="headerlink" title="为什么要开启 gzip 压缩？"></a>为什么要开启 gzip 压缩？</h4><p>在深入了解如何开启之前，让我们先弄清楚为什么要使用 gzip 压缩。</p><p>简单来说，gzip 压缩可以将网页文件大小压缩至原大小的 30% 甚至更低，这直接导致了数据传输时间的缩短，进而提升了网站加载速度，提高用户体验。</p><p>尤其是对于文本类文件（如 HTML、CSS、JavaScript），gzip 可以极大地优化其传输效率。</p><h4 id="开启-Nginx-的-gzip-压缩"><a href="#开启-Nginx-的-gzip-压缩" class="headerlink" title="开启 Nginx 的 gzip 压缩"></a>开启 Nginx 的 gzip 压缩</h4><p>接下来，我们一步步来操作如何在 Nginx 中开启 gzip 压缩。</p><p>首先，你需要找到 Nginx 的配置文件 <code>nginx.conf</code>，通常位于 <code>/etc/nginx/nginx.conf</code>。</p><h5 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h5><p>使用你喜欢的文本编辑器打开 <code>nginx.conf</code>，然后在 <code>http</code> 模块（不是 <code>server</code> 或 <code>location</code>）中添加如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip on<span class="comment">;  # 开启 gzip 压缩</span></span><br><span class="line">gzip_min_length 1k<span class="comment">;  # 设置允许压缩的页面最小字节数</span></span><br><span class="line">gzip_buffers 16 64k<span class="comment">;  # 设置系统获取多少缓冲区，以及每个缓冲区的大小</span></span><br><span class="line">gzip_http_version 1.1<span class="comment">;  # 启用 HTTP/1.1 时的 gzip 压缩</span></span><br><span class="line">gzip_comp_level 9<span class="comment">;  # 设置 gzip 压缩级别，1（最快）到 9（最小）9是最高压缩率但占用CPU较多</span></span><br><span class="line">gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml<span class="comment">;  # 指定压缩的 MIME 类型</span></span><br><span class="line">gzip_vary on<span class="comment">;  # 根据请求的Accept-Encoding头信息来判断是否启用gzip</span></span><br></pre></td></tr></table></figure><p>这里简单解释一下关键参数：</p><ul><li><code>gzip on;</code>：启用 gzip 模块。</li><li><code>gzip_min_length 1k;</code>：仅压缩大于 1KB 的响应体内容，避免对小文件进行压缩反而增大体积。</li><li><code>gzip_comp_level 9;</code>：设置压缩等级，1-9，数值越大，压缩率越高，但相对会占用更多的 CPU 资源。</li><li><code>gzip_types</code>：定义哪些类型的文件需要被压缩，常见的有 HTML、CSS、JS 等文件类型。</li></ul><h4 id="重启-Nginx"><a href="#重启-Nginx" class="headerlink" title="重启 Nginx"></a>重启 Nginx</h4><p>编辑完毕后，通过以下命令重新加载 Nginx 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="验证-gzip-压缩是否开启"><a href="#验证-gzip-压缩是否开启" class="headerlink" title="验证 gzip 压缩是否开启"></a>验证 gzip 压缩是否开启</h4><p>最简单的验证方式是通过浏览器的开发者工具。</p><p>在浏览器地址栏输入你的网站地址，打开网站，然后按 F12 打开开发者工具，选择“网络”(Network)标签页。</p><p>刷新网页，点击任意一个请求，在响应标头（Response Headers）中查找 <code>Content-Encoding</code> 字段。</p><p>如果看到 <code>gzip</code>，恭喜你，gzip 压缩已经成功开启！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述步骤，你可以轻松地在 Nginx 服务器上启用 gzip 压缩功能。</p><p>虽然这会稍微增加服务器的 CPU 负荷，但考虑到带宽成本和网站性能的提升，这通常是值得的。</p><p>另外，不要忘了定期检查你的网站性能，确保它能够为用户提供最佳的访问体验。</p><p>开启 gzip 压缩只是众多性能优化策略中的一个，持续优化，让我们的网站更快！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000045033478">Nginx 开启 gzip 压缩，让网站飞一会！ - 左诗右码 - SegmentFault 思否</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;gzip&lt;/code&gt;文件压缩是一个常用的性能提升手段，几乎是现代前端做性能优化的必须手段。&lt;/p&gt;
&lt;p&gt;以前一直想整理一下，但是没有合适的例子，最近正好在整理自己的开源项目，且服务器带宽很烂。&lt;/p&gt;
&lt;p&gt;于是，这次经历就是一个极佳的性能优化案例了，一定要整理下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue3" scheme="https://crazystudent13.github.io/tags/vue3/"/>
    
    <category term="nginx" scheme="https://crazystudent13.github.io/tags/nginx/"/>
    
    <category term="性能优化" scheme="https://crazystudent13.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>解决MySQL8小时无连接自动关闭问题</title>
    <link href="https://crazystudent13.github.io/2024/10/10/%E8%A7%A3%E5%86%B3MySQL8%E5%B0%8F%E6%97%B6%E6%97%A0%E8%BF%9E%E6%8E%A5%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98/"/>
    <id>https://crazystudent13.github.io/2024/10/10/%E8%A7%A3%E5%86%B3MySQL8%E5%B0%8F%E6%97%B6%E6%97%A0%E8%BF%9E%E6%8E%A5%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98/</id>
    <published>2024-10-10T12:18:23.000Z</published>
    <updated>2024-10-10T12:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近部署了<code>nest-admin</code>线上环境，但是线上的<code>MySQL</code>总是在次日无法连接，每次都要重启。</p><p>一开始没弄明白的时候，被这个定期关机的情况折腾的心累。</p><p>后来稍微搜了一下，才发现这事儿好像是线上长时间断连之后，MySQL会自动关闭导致的。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>经测试，此方法虽然在一定程度上缓解了这种问题，但是似乎并不能完美解决数据库断连的问题，如果有更好的办法，还请评论留言。</p><p>这里以常见的MySQL数据库为例，介绍如何配置其自动重启功能。</p><p>这些步骤同样适用于其他类型的数据库服务，如PostgreSQL、MongoDB等，但具体的命令和服务名称可能会有所不同。</p><p>在此之前，请确保已经装过了MySQL工具，另外，部分命令可能因为MySQL的版本不同而有差异，推荐用通义千问之类的AI工具辅助操作。</p><h3 id="确保服务开机自启"><a href="#确保服务开机自启" class="headerlink" title="确保服务开机自启"></a>确保服务开机自启</h3><p>对于大多数Linux发行版，可以通过以下命令来设置MySQL服务开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><p>这会创建一个符号链接到<code>/etc/systemd/system/multi-user.target.wants/</code>目录下，使得systemd在启动multi-user目标时也会启动MySQL服务。</p><h3 id="配置systemd自动重启策略"><a href="#配置systemd自动重启策略" class="headerlink" title="配置systemd自动重启策略"></a>配置systemd自动重启策略</h3><p>为了使数据库服务在意外停止时能够自动重启，可以编辑服务的systemd单元文件，添加或修改<code>[Service]</code>部分中的<code>Restart</code>选项。</p><p>对于MySQL，文件通常位于<code>/lib/systemd/system/mysql.service</code>或<code>/etc/systemd/system/mysql.service</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /lib/systemd/system/mysqld.service</span><br></pre></td></tr></table></figure><p>在文件中加入或修改如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ini[Service]</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br></pre></td></tr></table></figure><ul><li><code>Restart=always</code> 指定当服务退出时，systemd将总是尝试重启它。</li><li><code>RestartSec=10s</code> 定义了systemd在尝试重新启动服务前等待的时间。</li></ul><p>修改完成后，重载systemd配置并重启MySQL服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart  mysqld.service</span><br></pre></td></tr></table></figure><blockquote><p><code>sudo systemctl daemon-reload</code> 是一个用于刷新 systemd 系统和服务管理器配置的命令。</p><p>执行该命令后，systemd 会重新加载所有服务单元文件，包括新添加的或已修改的单元文件。</p><p>这个命令通常在修改了服务配置文件（如 <code>.service</code> 文件）之后使用，以使更改生效。</p><p>无需重启系统即可应用新的配置，提高了配置调整的效率和灵活性。</p></blockquote><h3 id="测试自动重启功能"><a href="#测试自动重启功能" class="headerlink" title="测试自动重启功能"></a>测试自动重启功能</h3><p>为了验证上述配置是否有效，你可以手动停止MySQL服务，并观察它是否按照预期自动重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysqld</span><br></pre></td></tr></table></figure><p>然后等待一段时间，检查服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></table></figure><p>如果一切正常，你应该能看到服务已经自动重新启动。</p><h3 id="监控与日志"><a href="#监控与日志" class="headerlink" title="监控与日志"></a>监控与日志</h3><p>为了更好地管理和监控数据库服务的状态，建议设置日志记录和告警机制。</p><p>可以利用Linux的日志系统（如syslog）或者第三方工具（如Prometheus, Grafana）来实现这一目的。</p><p>通过以上步骤，你可以为Linux环境下的数据库服务配置自动重启功能，从而提高系统的可靠性和可用性。</p><h3 id="修改MySQL配置"><a href="#修改MySQL配置" class="headerlink" title="修改MySQL配置"></a>修改MySQL配置</h3><p>如果你的配置不是8小时无连接导致的自动断连，可能是你的配置有问题。</p><p>你可以通过修改间隔时长，至少保证不会因为间隔时间太短导致频繁断连。</p><p><code>interactive_timeout</code>参数，定义了对于交互式连接，服务端等待数据的最大时间。</p><p>如果超过这个时间，服务端仍然没有收到数据，则会关闭连接，默认是28800，单位秒，即8个小时。</p><h4 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h4><p>打开<code>/etc/my.cnf</code>，在属性组mysqld下面添加如下参数。</p><p>这样，我们有8H的间隔连接时间，这样我们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interactive_timeout=28800000</span><br><span class="line">wait_timeout=28800000</span><br></pre></td></tr></table></figure><h4 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h4><p>和linux一样，打开my.ini，添加同样配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interactive_timeout=28800000</span><br><span class="line">wait_timeout=28800000</span><br></pre></td></tr></table></figure><p>有实践表明，没有办法把这个值设置成无限大，即永久。</p><p>因此如果你无法保证你的应用程序必定在设定的秒数内至少有一次操作，那么最好用第二个方法解决这个问题。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我目前采用的方法算是治标不治本，简单的来说，就是设置一个定时重启MySQL的脚本配置，保证MySQL不断连。</p><p>实际开发中，大多使用连接池或者其他方式来解决这种问题，后续随着我对后端的深入，我会使用考虑使用其他方式来解决此类问题。</p><p>目前先用配置这种笨一些的方式吧，至少简单好用，能解决问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tongyi.aliyun.com/qianwen/">通义千问</a></p><p><a href="https://www.cnblogs.com/lanyangsh/p/11667233.html">MySQL 的连接时长控制–interactive_timeout和wait_timeout - 翔云123456 - 博客园 (cnblogs.com)</a></p><p><a href="https://developer.aliyun.com/article/131129">如何解决mysql数据库8小时无连接自动关闭</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近部署了&lt;code&gt;nest-admin&lt;/code&gt;线上环境，但是线上的&lt;code&gt;MySQL&lt;/code&gt;总是在次日无法连接，每次都要重启。&lt;/p&gt;
&lt;p&gt;一开始没弄明白的时候，被这个定期关机的情况折腾的心累。&lt;/p&gt;
&lt;p&gt;后来稍微搜了一下，才发现这事儿好像是线上长时间断连之后，MySQL会自动关闭导致的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="MySQL" scheme="https://crazystudent13.github.io/tags/MySQL/"/>
    
    <category term="疑难杂症" scheme="https://crazystudent13.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>解决浏览器不支持getUserMedia!</title>
    <link href="https://crazystudent13.github.io/2024/09/25/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E6%94%AF%E6%8C%81getUserMedia/"/>
    <id>https://crazystudent13.github.io/2024/09/25/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E6%94%AF%E6%8C%81getUserMedia/</id>
    <published>2024-09-25T12:35:21.000Z</published>
    <updated>2024-09-25T12:35:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>这种问题在本地开发不会出现，只会在线上部署之后才会出现这种问题。</p><p>如果不是特殊情况，建议还是用更好的录音组件。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>因为最近有个录音需求，要求使用者能进行录音上传，然后读取后端传回来的链接，进行语音播放。</p><p>在比较了多个录音工具之后，我选用了<code>js-audio-recorder</code>，效果还不错。</p><p>在本地完成这个需求后，测了一下是没有问题的，但发布线上才发现不行。</p><h3 id="问题情况"><a href="#问题情况" class="headerlink" title="问题情况"></a>问题情况</h3><p>查了一下才知道，这是最新的api被浏览器锁了权限。</p><p>发布到线上之后，浏览器会报如下错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error :浏览器不支持 getUserMedia !</span><br></pre></td></tr></table></figure><p><code>js-audio-recorder</code>用的是<code>getUserMedia</code>这个<code>api</code>。</p><p> chrome，edge, <a href="https://so.csdn.net/so/search?q=fireFox&spm=1001.2101.3001.7020">fireFox</a> 等主流浏览器由于安全限制将不会暴露getUserMedia 方法，所以就不能够访问用户的媒体设备。</p><p><code>getUserMedia</code>在高版本的chrome下需要使用https，如果你的项目是部署在https页面，那么则不用此类方法也可以解决。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>复制下方链接，到浏览器上打开，进入配置页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome://flags/#unsafely-treat-insecure-origin-as-secure</span><br></pre></td></tr></table></figure><p>将要录音的网站地址(ip+端口号)输入到<code>Insecure origins treated as secure</code>中，然后将<code>Disabled</code>下拉改为<code>Enabled</code></p><p>此时下方会提示重启浏览器，点击Relaunch重启浏览器。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>填入当前使用的网站，而不是要上传的服务器链接。</li><li>不用担心会关闭所有页面，所有页面在重启浏览器之后依然会重新打开。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这种方式属于是临时解决方式，如果有更好的录音解决方式，建议还是换其他的组件。</p><p>而且，<code>js-audio-recorder</code>的最新版本已经是4年前了，活跃度没那么高了。</p><p>虽然稳定，但是没什么活跃度和更新的组件，将来就算真的出问题，恐怕也很难解决。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/126965558">Vue中使用js-audio-recorder实现录音时提示:浏览器不支持getUserMedia!_浏览器不支持 getusermedia-CSDN博客</a></p><p><a href="https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/126957202">Vue中使用js-audio-recorder插件实现录音功能并实现上传Blob数据到SpringBoot后台接口-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这种问题在本地开发不会出现，只会在线上部署之后才会出现这种问题。&lt;/p&gt;
&lt;p&gt;如果不是特殊情况，建议还是用更好的录音组件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue2" scheme="https://crazystudent13.github.io/tags/vue2/"/>
    
    <category term="疑难杂症" scheme="https://crazystudent13.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>【转】腾讯云OpenCloudOS部署NestJS项目</title>
    <link href="https://crazystudent13.github.io/2024/09/23/%E3%80%90%E8%BD%AC%E3%80%91%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E9%83%A8%E7%BD%B2NestJS%E9%A1%B9%E7%9B%AE/"/>
    <id>https://crazystudent13.github.io/2024/09/23/%E3%80%90%E8%BD%AC%E3%80%91%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E9%83%A8%E7%BD%B2NestJS%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-09-23T11:40:52.000Z</published>
    <updated>2024-09-23T11:40:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前还在艰难摸索部署流程中，虽然初步完成了项目的部署。</p><p>不过由于种种原因，暂时还没成功，后续我会继续摸索完善该文档。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>整个流程其实和本地开发流程大概类似，安装配置好node环境，再安装PM2工具，用于管理进程。</p><p>在完成准备工作之后，上传<code>nestjs</code>的后端环境压缩包，然后在线上npm装好包，到此完成</p><p>只是流程多了个PM2工具来管理进程。</p><h3 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装node环境</h3><p>安装完成后也要创建一个软链接才可以全局使用</p><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /server/soft/node</span><br></pre></td></tr></table></figure><h4 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/soft/node</span><br></pre></td></tr></table></figure><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>下载最新版本的Node.js，这里我用<code>wget</code>命令下载，如果不能用，建议查一下其他的linux下载命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v20.5.0/node-v20.5.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><h4 id="解压到指定目录"><a href="#解压到指定目录" class="headerlink" title="解压到指定目录"></a>解压到指定目录</h4><p>这里我们就解压到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xJvf node-v20.5.0-linux-x64.tar.xz -C /server/soft/node</span><br></pre></td></tr></table></figure><h4 id="配置nodejs环境"><a href="#配置nodejs环境" class="headerlink" title="配置nodejs环境"></a>配置nodejs环境</h4><p>看了其他人的文档，有人说创建软链接的方式不太好，个人参考那篇文档没跑通。</p><p>折腾了一段时间之后，还是选择如下方案，node环境推荐按照当前最新的稳定版本（node20）。</p><h5 id="在默认路径中创建对应的软链-推荐"><a href="#在默认路径中创建对应的软链-推荐" class="headerlink" title="在默认路径中创建对应的软链 (推荐)"></a>在默认路径中创建对应的软链 (推荐)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 node 软链</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /server/soft/node/node-v20.5.0-linux-x64/bin/node /usr/bin/node</span><br><span class="line"><span class="comment"># 创建 npm 软链</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /server/soft/node/node-v20.5.0-linux-x64/bin/npm /usr/bin/npm</span><br><span class="line"><span class="comment"># 创建 npx 软链</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /server/soft/node/node-v20.5.0-linux-x64/bin/npx /usr/bin/npx</span><br></pre></td></tr></table></figure><p>优点: 创建一次，所有用户均可运行node相关命令<br>缺点: 每增加一个全局node相关命令都要创建软链</p><h5 id="移除对应内容"><a href="#移除对应内容" class="headerlink" title="移除对应内容"></a>移除对应内容</h5><p>如果要是对应的软连接已经被占用，可以用以下命令移除对应的软连接，再重新执行上边的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /usr/bin/node</span><br><span class="line">sudo <span class="built_in">rm</span> /usr/bin/npm</span><br><span class="line">sudo <span class="built_in">rm</span> /usr/bin/npx</span><br></pre></td></tr></table></figure><h4 id="验证版本"><a href="#验证版本" class="headerlink" title="验证版本"></a>验证版本</h4><p>如果这里版本验证成功后，到此，<code>node</code>安装的流程就算是完成了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="安装PM2"><a href="#安装PM2" class="headerlink" title="安装PM2"></a>安装PM2</h3><p>安装<code>pm2</code>也要添加软连接，因为使用npm下载安装，所以下载目录就在node的<code>bin</code>目录下。</p><h4 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><h4 id="添加软连接"><a href="#添加软连接" class="headerlink" title="添加软连接"></a>添加软连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /server/soft/node/node-v20.5.0-linux-x64/bin/pm2  /usr/bin/pm2</span><br></pre></td></tr></table></figure><h3 id="启动nest项目"><a href="#启动nest项目" class="headerlink" title="启动nest项目"></a>启动nest项目</h3><p>将本地的nest项目打包成tar包，然后传到对应的目录。</p><p>不过，如果你nest项目如果是独立的，你也可以考虑直接在服务器上用<code>git</code>下载，只不过这么做太费事，我懒得整了，直接本地打包放上去就好。</p><h4 id="创建目录-1"><a href="#创建目录-1" class="headerlink" title="创建目录"></a>创建目录</h4><p>当前目录是用来放nest项目后端的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /server/soft/nest-admin</span><br></pre></td></tr></table></figure><h4 id="解压到指定目录-1"><a href="#解压到指定目录-1" class="headerlink" title="解压到指定目录"></a>解压到指定目录</h4><p>这里我们将对应的压缩包解压到我们刚才创建的目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvf nest-server.tar -C /server/soft/nest-admin</span><br></pre></td></tr></table></figure><h4 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h4><p>这里我们切换到对应的项目目录，然后为npm安装做准备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/soft/nest-admin/server/</span><br></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>因为我这里没有多个项目，所以我就不额外安装<code>pnpm</code>来做包管理了，直接用<code>npm</code>安装包依赖就够了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>如果要是你喜欢使用pnpm来进行管理，也可以提添加一个pnpm的软连接，方便后续用pnpm管理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 npm 软链</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /server/soft/node/node-v20.5.0-linux-x64/bin/pnpm /usr/bin/pnpm</span><br></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/soft/nest-admin/server/dist</span><br><span class="line">pm2 start main.js</span><br></pre></td></tr></table></figure><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>我这里是用腾讯云小程序开了防火墙的对应的端口。</p><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><p>因为我这里端口是8080，所以我这里就用8080启动项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip地址:8080/swagger-ui/</span><br></pre></td></tr></table></figure><h3 id="pm2相关操作"><a href="#pm2相关操作" class="headerlink" title="pm2相关操作"></a>pm2相关操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js # 运行pm2启动项目</span><br><span class="line">pm2 restart app.js # 运行pm2启动项目</span><br><span class="line">pm2 stop app.js # 运行pm2启动项目</span><br><span class="line">pm2 list # 显示所有进程状态</span><br><span class="line">pm2 monit # 监视所有进程</span><br><span class="line">pm2 logs # 显示所有进程日志</span><br><span class="line">pm2 stop all # 停止所有进程</span><br><span class="line">pm2 restart all # 重启所有进程</span><br><span class="line">pm2 reload all # 0 秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class="line">pm2 stop 0 # 停止指定的进程</span><br><span class="line">pm2 restart 0 # 重启指定的进程</span><br><span class="line">pm2 startup # 产生 init 脚本 保持进程活着</span><br><span class="line">pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class="line">pm2 delete 0 # 杀死指定的进程</span><br><span class="line">pm2 delete all # 杀死全部进程</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前项目中的问题还比较多，开发环境可以连接，但是部署到线上，因为没有合适的文档，所以总是会有各种问题。</p><p>现在还在艰难排查中，总算是总结出了一套可能并不好用的部署方式。</p><p>万里长征现在刚走了第一步，艰难摸索中，希望能有一些好的收获。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/lxy869718069/article/details/110185280">nestjs项目打包部署之linux系统上线]_nestjs部署-CSDN博客</a></p><p><a href="https://www.cnblogs.com/xiaodi-js/p/17883906.html">node.js - 在linux系统上安装和配置nodejs - 箫笛 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前还在艰难摸索部署流程中，虽然初步完成了项目的部署。&lt;/p&gt;
&lt;p&gt;不过由于种种原因，暂时还没成功，后续我会继续摸索完善该文档。&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="linux" scheme="https://crazystudent13.github.io/tags/linux/"/>
    
    <category term="nestjs" scheme="https://crazystudent13.github.io/tags/nestjs/"/>
    
  </entry>
  
  <entry>
    <title>解决公众号自动回复嵌套跳转链接失效的问题</title>
    <link href="https://crazystudent13.github.io/2024/09/19/%E8%A7%A3%E5%86%B3%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D%E5%B5%8C%E5%A5%97%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://crazystudent13.github.io/2024/09/19/%E8%A7%A3%E5%86%B3%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D%E5%B5%8C%E5%A5%97%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-09-19T02:29:59.000Z</published>
    <updated>2025-03-26T01:08:50.628Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容不多，主要是记录如何在小程序自动回复的内容中嵌入一个小程序自动回复文本。</p><p>很难想像是2024年的一款产品，居然需要再富文本中手动输入超链接。</p><p>实打实的垃圾玩意，这种东西居然一直没优化，我参考4年前的文档居然还能用，真他妈的离谱。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>整个过程其实非常简单，但是因为微信小程序实在过于蹩脚，有些问题还是要整理一下，给自己提个醒。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>需要先关联小程序，这个你在左侧菜单找一找就行，只要找到 <strong>小程序管理</strong> 的字样，点开，然后关联你接下来要用到的小程序即可。</p><p>这个过程，需要管理员扫码同意，如果你开发人员，记得要让管理员扫个码。</p><h3 id="自动回复"><a href="#自动回复" class="headerlink" title="自动回复"></a>自动回复</h3><p>自动回复这里，只要常常写MD文档的都知道怎么设置超链接，只不过公众号这里麻烦了些，需要用户自己用<code>&lt;a&gt;</code>标签包裹一下。</p><p>今天主要处理的是跳转小程序的问题，实现方式不麻烦，实现过程多灾多难。</p><p>以我工作的内容为例，这里需要嵌入一个小程序超链，我只要按照如下内容，粘贴到回复文本中就可以了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://yyb.happydo.net&quot;</span> <span class="attr">data-miniprogram-appid</span>=<span class="string">&quot;wxfce54d063c1fd52a&quot;</span> <span class="attr">data-miniprogram-path</span>=<span class="string">&quot;pages/home/index&quot;</span>&gt;</span>关注小程序银养宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码中各字段含义"><a href="#代码中各字段含义" class="headerlink" title="代码中各字段含义"></a>代码中各字段含义</h4><table><thead><tr><th align="left">字段</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">href</td><td align="left">如果无法正常跳转小程序，备用跳转的H5链接</td></tr><tr><td align="left">data-miniprogram-appid</td><td align="left">要跳转的目标小程序appid</td></tr><tr><td align="left">data-miniprogram-path</td><td align="left">要跳转的小程序页面地址（不知道的话可以问服务商或者开发者要）</td></tr></tbody></table><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>最好直接把上述内容复制粘贴，然后修改，避免一些奇怪的问题，有时候你自己手打的超链接，可能会因为种种问题没法用。</p><p>这里整理一些可能的情况，如有不对的地方，可自行参考。</p><ol><li>需要注意代码中间的空格不能缺少和增加</li><li>如果需要自行编辑需要注意<code>&lt;a&gt;</code>标签内的内容符号需要使用英文格式</li><li><code>&lt;a&gt;</code>标签适用与其他H5链接，对应代码为：<code>&lt;a href=&quot;https://www.saas.top&quot;&gt;点击进入h5&lt;/a&gt;</code></li><li>小程序跳转需要公众号关联小程序 <a href="https://developers.weixin.qq.com/community/develop/doc/000242cccdc670f02ea977e105e409?highLine=%E5%A6%82%E4%BD%95%E5%85%B3%E8%81%94%E5%B0%8F%E7%A8%8B%E5%BA%8F">公众号关联小程序绑定流程官方文档</a></li><li>附<a href="https://developers.weixin.qq.com/community/develop/doc/000c424a27c118ee347a587a950009?highLine=%E5%A6%82%E4%BD%95%E5%85%B3%E8%81%94%E5%B0%8F%E7%A8%8B%E5%BA%8F">自定义菜单设置小程序相关问题官方文档</a></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关于微信小程序及公众号这种开历史倒车的玩意，我一向是不喜欢的。</p><p>但因工作需求，这里遇到问题也不得不记录一下，防止后续忘记。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000ce41a2a4e08e973fafded857813">免开发实现公众号自动回复小程序文字链接 | 微信开放社区 (qq.com)</a></p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/00022268e2c8902d56aae394156013">如何关注公众号以后自动推送小程序？ | 微信开放社区 (qq.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文内容不多，主要是记录如何在小程序自动回复的内容中嵌入一个小程序自动回复文本。&lt;/p&gt;
&lt;p&gt;很难想像是2024年的一款产品，居然需要再富文本中手动输入超链接。&lt;/p&gt;
&lt;p&gt;实打实的垃圾玩意，这种东西居然一直没优化，我参考4年前的文档居然还能用，真他妈的离谱。&lt;/p&gt;</summary>
    
    
    
    
    <category term="疑难杂症" scheme="https://crazystudent13.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    <category term="小程序" scheme="https://crazystudent13.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>10分钟了解开源项目PR流程</title>
    <link href="https://crazystudent13.github.io/2024/09/17/10%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AEPR%E6%B5%81%E7%A8%8B/"/>
    <id>https://crazystudent13.github.io/2024/09/17/10%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AEPR%E6%B5%81%E7%A8%8B/</id>
    <published>2024-09-17T15:22:20.000Z</published>
    <updated>2024-09-17T15:22:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于今年工作相对较清闲，所以闲暇时间想在github参与开源项目。</p><p>不过，我以前对于git操作仅限于同组内的项目，很少有跨组合作修改，故此，我不是很了解开源项目的PR流程。</p><p>因此，稍微花了两天时间测试和梳理了一下PR流程，写成文档抛砖引玉，供大家参考和拍砖。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这套流程目前已经在github上测试过数次，目前我个人没有遇到什么问题，算是比较完善的流程。</p><p>随着后续我对git的熟悉，我后续会不断完善该文档，这里抛砖引玉，大家如果有意见，欢迎在评论区留言。</p><p>本文面向有一定git基础知识的朋友，完全不懂git的朋友，最好先学习一下git的基础知识，不用太多，如下列所示，够用就行。</p><ul><li>明白git他人仓库和自己仓库的区别</li><li>使用git进行项目的下载和提交</li><li>明白git分支及如何操作分支合并</li></ul><p>好，话不多说，我们直接开始。</p><h3 id="fork项目"><a href="#fork项目" class="headerlink" title="fork项目"></a>fork项目</h3><p>首先，找到一个你有兴趣贡献的开源项目，可以是GitHub、GitLab或其他代码托管平台上的任何项目。</p><p>然后，我们需要fork你感兴趣的这个项目。</p><p>“fork”，是指创建一个现有仓库的副本到自己的git账户下。</p><p>这个副本通常是在你自己的账户或组织下创建的，这样你就有了原始项目的个人副本，可以在其中自由地进行修改而不会影响到原项目。</p><p>当你“fork”一个项目时，会发生以下几件事情：</p><ol><li>你会得到一个与原始仓库完全相同的仓库副本。</li><li>这个副本位于你自己的GitHub、GitLab等代码托管服务的账户下。</li><li>你可以在这个副本上进行任何修改而不影响到原始仓库。</li></ol><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><p>在fork了项目之后，我们需要将这个副本下载到本地进行开发，然后在这个副本的基础上进行修改。</p><p>这里要注意，我们需要clone的，是已经fork到自己名下的项目仓库，而不是这个原始项目的仓库。</p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>我们在<code>clone</code>下来的项目基础上，签出一个分支，为接下来的开发做准备。</p><h4 id="同步分支"><a href="#同步分支" class="headerlink" title="同步分支"></a>同步分支</h4><p>这里要注意，我们fork过来，默认应该是<code>master</code>或<code>main</code>分支，我们并没有fork过来其他分支。</p><p>因此，我们需要关联原有项目，将源项目的其他分支也同步到自己的库中。</p><p>这里以我为例，比如，我这里要提交的项目是<code>taozhi1010/nest-admin</code>这个项目（这是源项目）。</p><p>那么，现在将源项目（<code>taozhi1010/nest-admin</code>）同步到自己的fork的项目仓库中（<code>CrazyStudent13/nest-admin</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git remote add 源项目别名（自己随便命名） git提供的ssh地址</span></span><br><span class="line">git remote add upstream git@github.com:taozhi1010/nest-admin.git</span><br></pre></td></tr></table></figure><p>执行这条命令后，你就可以通过名称<code>upstream</code>来引用这个远程仓库了。</p><p>例如，如果你想从这个远程仓库拉取更新，可以使用<code>git fetch upstream</code>或<code>git pull upstream</code>命令；</p><p>如果你要推送更改到该仓库，则可以使用<code>git push upstream</code>命令（前提是拥有相应的权限）。</p><p>我们这里不做其他操作，先将远端的分支更新到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure><p>将远程仓库（在这里别名为 <code>upstream</code>）的 <code>master</code> 分支合并到你当前所在的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge upstream/master</span><br></pre></td></tr></table></figure><h4 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h4><p>根据项目的贡献指南，我们开始本地修改代码或文档，这里确保遵循项目的代码规范和风格指南。</p><p>在完成修改之后，我们可以使用命令或者图形化的git管理工具，提交内容。</p><p>总之，就是如下两个步骤。</p><ul><li><strong>添加更改</strong>：使用<code>git add .</code>来将所有更改标记为准备提交。</li><li><strong>提交更改</strong>：使用<code>git commit -m &quot;Your commit message&quot;</code>提交更改，并附上描述性的提交信息。</li></ul><h4 id="推送更改到远程仓库"><a href="#推送更改到远程仓库" class="headerlink" title="推送更改到远程仓库"></a>推送更改到远程仓库</h4><p>这里注意，推送不是推送到他人的仓库，而是推送到自己的远端仓库。</p><p>如之前一样，使用图形化工具或命令，将本地的<code>commit</code>推送到远端仓库。</p><h3 id="创建Pull-Request-PR"><a href="#创建Pull-Request-PR" class="headerlink" title="创建Pull Request (PR)"></a>创建Pull Request (PR)</h3><p>这时候，我以github为例，你登录到github的界面，打开那个同步过来的项目，你会发现有个非常明显的对比。</p><p>这里你点击一下，他会让你推送到源项目，是否要创建一个PR（pull request）。</p><p>这里，我们按照要求，填写PR描述，说明所做的更改及其原因。</p><p>然后，指定要合并的目标分支，通常是开发分支（dev），也可能主分支（如master或main）。</p><h3 id="等待审查"><a href="#等待审查" class="headerlink" title="等待审查"></a>等待审查</h3><p>提交后，项目的维护者或其他贡献者会审查你的PR。</p><p>他们会决定是否合并你的PR到自己的分支内。</p><h4 id="解决反馈"><a href="#解决反馈" class="headerlink" title="解决反馈"></a>解决反馈</h4><p>如果收到反馈需要解决某些问题，那我们重新修改代码，再次推送。</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>一旦你的PR被批准，它会被合并到主分支中。此时，你可以删除自己的功能分支（可选）。</p><p>以上就是给开源项目添加PR的一般流程。</p><p>不同的项目可能有不同的具体要求，所以请务必阅读项目的贡献指南以获得更详细的说明。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>走完上述流程，我们就算是完成一个PR了，如此，我们也算是参与开源项目了。</p><p>社区活跃度应该一些面试官比较喜欢的指标，多参与社区内的活跃项目，不仅能见识他人代码的精妙，也能让自己的努力被社区所见证。</p><p>因此，我很是推荐大家在开源社区中做出自己的贡献，哪怕只是一点点，都会让社区感到欣喜。</p><p>另外，本文由通义千问辅助编写，在一些命令的具体解释上，AI比人强了不少，比搜索引擎更是好用了太多。</p><p>不得不感叹，时代的伟力，能赶上AI风靡的大时代，不知道是幸运还是不幸。</p><p>当然，AI虽然辅助解释了部分命令，整体流程依然是我亲自把关的。</p><p>目前我已经根据这个流程提交了数次开源项目的PR，其中有些已经通过审核，确认整个流程无误，大家可以按照流程放心食用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1Qp4y1T797/?spm_id_from=333.337.search-card.all.click&vd_source=ee3784ffe5f760cb992921cb8c5c98e5">【Git】如何给一个开源项目提交代码？Fork、PR一次搞懂！</a></p><p><a href="https://tongyi.aliyun.com/qianwen">通义千问</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于今年工作相对较清闲，所以闲暇时间想在github参与开源项目。&lt;/p&gt;
&lt;p&gt;不过，我以前对于git操作仅限于同组内的项目，很少有跨组合作修改，故此，我不是很了解开源项目的PR流程。&lt;/p&gt;
&lt;p&gt;因此，稍微花了两天时间测试和梳理了一下PR流程，写成文档抛砖引玉，供大家参考和拍砖。&lt;/p&gt;</summary>
    
    
    
    
    <category term="github" scheme="https://crazystudent13.github.io/tags/github/"/>
    
    <category term="git" scheme="https://crazystudent13.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【转】腾讯云OpenCloudOS部署redis</title>
    <link href="https://crazystudent13.github.io/2024/09/14/%E3%80%90%E8%BD%AC%E3%80%91%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E9%83%A8%E7%BD%B2redis/"/>
    <id>https://crazystudent13.github.io/2024/09/14/%E3%80%90%E8%BD%AC%E3%80%91%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E9%83%A8%E7%BD%B2redis/</id>
    <published>2024-09-14T10:30:32.000Z</published>
    <updated>2025-03-26T01:08:50.623Z</updated>
    
    <content type="html"><![CDATA[<p>接上文，之前的安装redis是用docker安装的。</p><p>本来感觉很方便，但是不知道为什么，换了一个系统后，那个安装流程不行了。</p><p>由于个人对docker不是很熟，所以还是按照常规流程，在服务器上安装部署redis。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>书接上文，我们在配置完MySQL之后，按照之前的目录，我们继续完成redis的安装。</p><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><p>这里图省事，用命令行创建了目录，你也可以根据自己需求，用SSH工具自行创建。</p><h4 id="创建下载目录"><a href="#创建下载目录" class="headerlink" title="创建下载目录"></a>创建下载目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">mkdir -p server/soft/redis</span><br></pre></td></tr></table></figure><p>切换到下载目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /server/soft/redis</span><br></pre></td></tr></table></figure><h4 id="下载并解压安装"><a href="#下载并解压安装" class="headerlink" title="下载并解压安装"></a>下载并解压安装</h4><p>这里用wget命令下载，有的系统可能不支持<code>wget</code>命令，总之是去下对应的压缩包就好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-7.0.1.tar.gz</span><br></pre></td></tr></table></figure><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf redis-7.0.1.tar.gz</span><br></pre></td></tr></table></figure><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><p>这里我需要先切到对应的解压后的目录下，然后才能解压。</p><p>我们先切换到已经解压好的目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /server/soft/redis/redis-7.0.1</span><br></pre></td></tr></table></figure><h5 id="编译redis"><a href="#编译redis" class="headerlink" title="编译redis"></a>编译redis</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><h5 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h5><p>使用以下命令将编译后的Redis安装到系统中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="版本验证"><a href="#版本验证" class="headerlink" title="版本验证"></a>版本验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --version</span><br></pre></td></tr></table></figure><p>只要出现类似如下内容，就代表成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis server v=7.0.1 sha=00000000:0 malloc=jemalloc-5.2.1 bits=64 build=cb8ffba948693cc7</span><br></pre></td></tr></table></figure><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><p>经过上边的流程，我们已经安装完了redis。</p><p>接下来我们要去改配置，可能有人不清楚自己要改的配置文件在哪。</p><p>这里我们可以用linux自带的命令查找对应的配置文件。</p><h4 id="找到配置"><a href="#找到配置" class="headerlink" title="找到配置"></a>找到配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;redis.conf&quot;</span><br></pre></td></tr></table></figure><p>然后，我们切换到对应的目录。</p><p>这里以我为例，我找到之后，按照目录输出内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /server/soft/redis/redis-7.0.1/</span><br><span class="line">ls redis.conf</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>之前我们说过Redis，这里我们就不再讲了，而且，我们这里只是做必要的修改，大多配置我们不必去修改。</p><p>这里，我们只要改一条配置：<code>bind</code>，我们需要<code>bind</code>属性，允许外部访问当前服务器上的redis。</p><p>修改配置太多，使用命令行修改太麻烦，我建议大家用SSH工具直接打开配置文件。</p><p>默认情况下，Redis监听所有网络接口（0.0.0.0），也有的默认绑定（127.0.0.1）。</p><p>我们打开<code>redis.conf</code>，注释掉bind就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bind 127.0.0.1</span><br></pre></td></tr></table></figure><p>同时，配置一下redis密码，比如我这里配置123456为密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><p>切换到对应的redis目录，然后启动redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /server/soft/redis/redis-7.0.1/</span><br></pre></td></tr></table></figure><p>启动redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><h3 id="修改防火墙配置"><a href="#修改防火墙配置" class="headerlink" title="修改防火墙配置"></a>修改防火墙配置</h3><p>为了确保外部流量可以到达Redis服务器，你需要配置防火墙来开放相应的端口。</p><p>和MySQL需要打开<code>3306</code>的端口的一样，redis如果没有进行端口配置的话，默认应该是<code>6379</code>的端口。</p><p>于是，我们也需要关闭对应端口的防火墙，这里可以用腾讯云自带的防火墙配置，当然，我们也可以用如下的命令来配置。</p><p>这里，我们需要安装<code>ufw</code>来关闭防火墙。</p><h4 id="配置准备"><a href="#配置准备" class="headerlink" title="配置准备"></a>配置准备</h4><p>我之前抄的文档用的是<code>apt</code>命令配置，但因为我的系统是<code>OpenCloudOS</code>，所以这里无法使用<code>apt</code>。</p><p>如果你遇到了 <code>apt: command not found</code> 的错误，这通常意味着你当前使用的Linux发行版可能不是基于Debian的系统，或者是某个环境变量问题导致 apt 命令无法找到。</p><p>不同的Linux发行版使用不同的包管理系统，对于基于Red Hat的系统（如CentOS、Fedora、RHEL），可以使用<code>yum</code>命令来安装。</p><p>在打开防火墙端口之前，我们需要先安装并启动<code>ufw</code>，如下，我们先准备一下。</p><h4 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h4 id="安装UFW"><a href="#安装UFW" class="headerlink" title="安装UFW"></a>安装UFW</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ufw</span><br></pre></td></tr></table></figure><h4 id="启用UFW"><a href="#启用UFW" class="headerlink" title="启用UFW"></a>启用UFW</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum enable ufw</span><br></pre></td></tr></table></figure><h4 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 6379/tcp</span><br></pre></td></tr></table></figure><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>大多数人应该都有自己习惯的数据库连接工具，这里我个人推荐用：<a href="https://www.navicat.com.cn/download/navicat-premium-lite">Navicat Premium Lite 17</a>。</p><p>相对于其他的数据库连接工具，Navicat简单易操作，界面干净美观，且算是这几年市场上的流行工具。</p><p>虽然分为免费版和付费版，但是免费版提供的功能足够用户去使用。</p><p>这里具体的流程我就不教了，因为太简单。</p><p>总之，和MySQL一样，我们配置一个新的redis连接，配置完成后，点击测试连接。</p><p>测试成功，至此，redis部署流程完成。</p><h3 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h3><p>有些时候，我们可能因为各种原因要停止或者重启，我们可以用如下命令重启redis。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>redis的部署与使用并非什么麻烦事儿，但是没有一个靠谱的文档，这个流程就会变得极为麻烦。</p><p>所以，我特此整理了此文档，便于下次再服务器上部署该流程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/2358816">手把手安装部署Redis-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://tongyi.aliyun.com/qianwen/">通义千问</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接上文，之前的安装redis是用docker安装的。&lt;/p&gt;
&lt;p&gt;本来感觉很方便，但是不知道为什么，换了一个系统后，那个安装流程不行了。&lt;/p&gt;
&lt;p&gt;由于个人对docker不是很熟，所以还是按照常规流程，在服务器上安装部署redis。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="https://crazystudent13.github.io/tags/redis/"/>
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>【转】腾讯云OpenCloudOS部署MySQL</title>
    <link href="https://crazystudent13.github.io/2024/09/13/%E3%80%90%E8%BD%AC%E3%80%91%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E9%83%A8%E7%BD%B2MySQL/"/>
    <id>https://crazystudent13.github.io/2024/09/13/%E3%80%90%E8%BD%AC%E3%80%91%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E9%83%A8%E7%BD%B2MySQL/</id>
    <published>2024-09-13T12:50:56.000Z</published>
    <updated>2025-03-26T01:08:50.623Z</updated>
    
    <content type="html"><![CDATA[<p>之前的安装是用docker安装的，本来感觉很方便，但是不知道为什么，换了系统之后安装流程不行了。</p><p>这次索性就简单不用docker安装了，直接用最传统的方式安装配置。</p><p>毕竟我对docker还是不够的熟练，此时上docker，出问题我还是不太会改。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>就和win环境一样，我们在服务器上需要先安装，再配置一个软件。</p><p>所以，本篇教程分为两个大部分：安装MySQL，配置MySQL。</p><p>亲测可用，系统配置：<code>OpenCloudOS 9</code>，安装流程顺畅，没有什么问题。</p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>很多人不熟悉Linux，安装的主要麻烦就是安装命令。</p><p>所以，这里重新整理</p><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p>切换到根目录创建一个用来存mySql的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">mkdir -p server/soft/mysql</span><br></pre></td></tr></table></figure><h4 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /server/soft/mysql</span><br></pre></td></tr></table></figure><h4 id="查看自带数据库"><a href="#查看自带数据库" class="headerlink" title="查看自带数据库"></a>查看自带数据库</h4><p>有的系统会在镜像安装时候就自带数据库，我们先检测一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa l grep mari</span><br></pre></td></tr></table></figure><p>如果画框中的内容有，则rpm -e –nodeps XXX删除。</p><p>比如，我们这里举例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-connector-c-3.1.11-2.oc8.1.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps mariadb-connector-c-config-3.1.11-2.oc8.1.noarch</span><br></pre></td></tr></table></figure><h4 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h4><p>切换到目录之后，我们先下载MySQL的压缩包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><h4 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><h4 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h4><p>这里会问你是否同意，y就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">yum install libncurses*</span><br></pre></td></tr></table></figure><h4 id="启动并测试连接"><a href="#启动并测试连接" class="headerlink" title="启动并测试连接"></a>启动并测试连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br><span class="line">ps -ef |grep mysql</span><br></pre></td></tr></table></figure><p>这里只要检测到mySQL的进程，就可以确认是启动成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql     613867       1  0 21:20 ?        00:00:00 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">root      614796  498031  0 21:22 pts/0    00:00:00 grep --color=auto mysql</span><br></pre></td></tr></table></figure><h3 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h3><p>好了，就像是win上边，我们终于装好mySQL了。</p><p>接下来就是配置时间了。</p><h4 id="查看密码"><a href="#查看密码" class="headerlink" title="查看密码"></a>查看密码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>这时候，mysql会帮我们生成一个临时密码，如下提示，我们拿到密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A temporary password is generated for root@localhost: xy?pa,n1o%M-</span><br></pre></td></tr></table></figure><h4 id="配置密码"><a href="#配置密码" class="headerlink" title="配置密码"></a>配置密码</h4><p>系统生成的密码安全性很强，但是也很难记，所以我们可能需要自己改动出一个好记的密码。</p><p>输入如下命令后，需要我们输入自己的密码，记得保存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p>当我们输入明码，进入mySQL的之后，需要逐行的输入密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;你的密码&#x27;;</span><br></pre></td></tr></table></figure><p>修改完成之后，我们刷新提交修改内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><strong>示例如下</strong>，我的密码是123456。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_length=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="修改host配置"><a href="#修改host配置" class="headerlink" title="修改host配置"></a>修改host配置</h4><p>之前我们的配置默认是指向<code>localhost</code>，这里我们需要把<code>host</code>改到能给外部访问。</p><p><code>%</code>是一个通配符，表示任何主机。</p><p>这意味着具有<code>root</code>用户名的用户可以从任何IP地址或主机名连接到MySQL服务器。</p><p>通过将其<code>Host</code>列设置为<code>%</code>，这种设置通常用于扩展管理员账户的访问权限，使其不仅限于本地主机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">SELECT Host, User FROM user;</span><br><span class="line">UPDATE user SET Host = &#x27;%&#x27; WHERE User = &#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SELECT Host, User FROM user;</span><br><span class="line">+-----------+---------------+</span><br><span class="line">| Host      | User          |</span><br><span class="line">+-----------+---------------+</span><br><span class="line">| localhost | mysql.session |</span><br><span class="line">| localhost | mysql.sys     |</span><br><span class="line">| localhost | root          |</span><br><span class="line">+-----------+---------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; UPDATE user SET Host = &#x27;%&#x27; WHERE User = &#x27;root&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="MySQL忘记密码了怎么办？"><a href="#MySQL忘记密码了怎么办？" class="headerlink" title="MySQL忘记密码了怎么办？"></a>MySQL忘记密码了怎么办？</h3><p>这段的操作我不推荐使用，原文的意思是，修改my.cnf配置。</p><p>在<code>skip-grant-tables</code>配置后，启动MySQL服务器时忽略权限表。</p><p>这意味着启动时不需要密码就可以访问数据库。这通常只在恢复或紧急情况下使用，因为这样会使数据库变得不安全。</p><p>改完配置文件之后，重新设置密码，然后再删除该</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>我们可以通过图形界面直接去<code>etc</code>文件夹下修改<code>my.cnf</code>。</p><p>我们也可以通过命令行去修改，不过需要你稍微了解一下linux命令行编辑的方式。</p><p>这里，我们需要在linux的目录下，如果之前还在mySQL路径里边，记得退出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><p>修改配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"># 我们在这里添加我们需要的命令</span><br><span class="line">skip-grant-tables</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><p>编辑完成后，<code>:wq</code>退出编辑</p><p>保存退出，重启MySQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h4 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure><h4 id="修改密码刷新权限"><a href="#修改密码刷新权限" class="headerlink" title="修改密码刷新权限"></a>修改密码刷新权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set authentication_string=password(&#x27;新密码&#x27;) where user=&#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit；</span><br></pre></td></tr></table></figure><p>删除刚刚新增的命令，这里我们需要再删除配置里边的 <code>skip-grant-tables</code></p><h4 id="重新登录"><a href="#重新登录" class="headerlink" title="重新登录"></a>重新登录</h4><p>这里我们用新密码重新登录一下，或者是navicat之类的远程工具连一下看看。</p><p>只要保证新密码能连接上，那就没问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来打算用docker简单安装一下就算了，但是换了系统之后，之前的流程反而装不上了。</p><p>真是麻烦所以干脆自己再走个流程重新装一下。</p><p>本来也想选几个8.0版本的MySQL，但是好几个教程都因为各种问题走不下去。</p><p>反而是这个低版本的远古教程，居然意外的好用，于是特此记录下，便于后续使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_44079964/article/details/132016831">在腾讯云服务器OpenCLoudOS系统中安装mysql（有图详解）_opencloudos 安装mysql-CSDN博客</a></p><p><a href="https://tongyi.aliyun.com/">通义千问</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前的安装是用docker安装的，本来感觉很方便，但是不知道为什么，换了系统之后安装流程不行了。&lt;/p&gt;
&lt;p&gt;这次索性就简单不用docker安装了，直接用最传统的方式安装配置。&lt;/p&gt;
&lt;p&gt;毕竟我对docker还是不够的熟练，此时上docker，出问题我还是不太会改。&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="MySQL" scheme="https://crazystudent13.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【转】linux上安装nginx</title>
    <link href="https://crazystudent13.github.io/2024/09/12/%E3%80%90%E8%BD%AC%E3%80%91linux%E4%B8%8A%E5%AE%89%E8%A3%85nginx/"/>
    <id>https://crazystudent13.github.io/2024/09/12/%E3%80%90%E8%BD%AC%E3%80%91linux%E4%B8%8A%E5%AE%89%E8%A3%85nginx/</id>
    <published>2024-09-12T11:01:28.000Z</published>
    <updated>2025-03-26T01:08:50.622Z</updated>
    
    <content type="html"><![CDATA[<p>因为新升级了linux的系统，原有的部署命令失效了，因此这次整个新的部署流程。</p><p>这不是无意义的搬运，这是为了将来更快的部署nginx。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本次使用的是腾讯云OpenCloudOS系统。</p><p>在 OpenCloudOS 上安装 Nginx 可以通过包管理器 yum 来完成，因为 OpenCloudOS 与 CentOS 高度兼容，所以你可以使用类似的方法。</p><p>以下是通过 yum 来安装 Nginx 的基本步骤。</p><h3 id="安装启动流程"><a href="#安装启动流程" class="headerlink" title="安装启动流程"></a>安装启动流程</h3><p>因为我这台服务器比较干净，所以我这边不考虑切换到任何目录，直接在root目录下进行操作。</p><h4 id="更新系统包列表"><a href="#更新系统包列表" class="headerlink" title="更新系统包列表"></a>更新系统包列表</h4><p> 在安装任何软件包之前，通常建议先更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><h4 id="安装-EPEL-仓库"><a href="#安装-EPEL-仓库" class="headerlink" title="安装 EPEL 仓库"></a>安装 EPEL 仓库</h4><p>EPEL（Extra Packages for Enterprise Linux）是一个大型的社区维护的仓库，包含了大量额外的软件包。虽然某些 OpenCloudOS 的版本可能已经预装了 EPEL，但如果你的系统没有，可以这样安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure><h4 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h4><p>使用 yum 来安装 Nginx，这里会问你是否ok，惯例，一路y就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><h4 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h4><p>安装完成后，启动 Nginx 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><p>为了让 Nginx 在每次系统启动时自动启动，你可以启用 Nginx 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h4 id="检查状态"><a href="#检查状态" class="headerlink" title="检查状态"></a>检查状态</h4><p>检查 Nginx 服务是否正在运行，正常情况下会显示 active (running)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>最后，在浏览器中输入服务器公网 IP 地址，如果一切正常，你应该能看到 Nginx 的默认欢迎页面了。</p><p>如果访问不成功，记得去看一下是不是防火墙忘了关。</p><h3 id="配置重启流程"><a href="#配置重启流程" class="headerlink" title="配置重启流程"></a>配置重启流程</h3><p>在上边部署完成之后，我们需要开始进行配置。</p><h4 id="查看-nginx-安装目录"><a href="#查看-nginx-安装目录" class="headerlink" title="查看 nginx 安装目录"></a>查看 nginx 安装目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><h4 id="查看配置文件-nginx-conf-路径"><a href="#查看配置文件-nginx-conf-路径" class="headerlink" title="查看配置文件 nginx.conf 路径"></a>查看配置文件 nginx.conf 路径</h4><p>这条命令也可以用于检查配置文件是否正确。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>当然也可以使用 find 命令进行文件查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 / 根目录下查找文件名为 nginx.conf 的文件</span></span><br><span class="line">find / -name nginx.conf</span><br><span class="line"><span class="comment"># 从 /etc 目录下查找文件名为 nginx.conf 的文件</span></span><br><span class="line">find /etc -name nginx.conf</span><br></pre></td></tr></table></figure><h4 id="按需求配置目录"><a href="#按需求配置目录" class="headerlink" title="按需求配置目录"></a>按需求配置目录</h4><p>核心就是server指向目录的问题，这里不管https的事情了。</p><p>配置完目录，记得把自己的文件放到自己指定的目录上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">server &#123;  </span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  cattools.crazystudent13.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      root /server/website/docsCatTools;</span><br><span class="line">      index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;  </span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  lintdoc.crazystudent13.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      root /server/website/lintdoc;</span><br><span class="line">      index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  resume.crazystudent13.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      root /server/website/resume;</span><br><span class="line">      index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h4><p>配置完成后，这时候如果打开自己的目录会发现可能还是nginx的页面，这就需要我们重启一下nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>一般来说，重启是正常成功的，如果出于保险的考虑，可以在看看状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><h4 id="如果遇到问题"><a href="#如果遇到问题" class="headerlink" title="如果遇到问题"></a>如果遇到问题</h4><ul><li><p>查看错误日志文件通常可以帮助诊断问题，Nginx的错误日志位置通常在<code>/var/log/nginx/error.log</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/nginx/error.log</span><br></pre></td></tr></table></figure></li><li><p>或者检查Nginx配置是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yanyunfeng.com/article/48">腾讯轻量服务器 OpenCloudOS 上安装 Nginx - 鄢云峰的个人网站 (yanyunfeng.com)</a></p><p><a href="https://www.cnblogs.com/ryanzheng/p/13124128.html">Linux 查看 nginx 安装目录和配置文件路径 - Ryan_zheng - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为新升级了linux的系统，原有的部署命令失效了，因此这次整个新的部署流程。&lt;/p&gt;
&lt;p&gt;这不是无意义的搬运，这是为了将来更快的部署nginx。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nginx" scheme="https://crazystudent13.github.io/tags/nginx/"/>
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>【转】10分钟了解redis应用</title>
    <link href="https://crazystudent13.github.io/2024/09/08/%E3%80%90%E8%BD%AC%E3%80%9110%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3redis%E5%BA%94%E7%94%A8/"/>
    <id>https://crazystudent13.github.io/2024/09/08/%E3%80%90%E8%BD%AC%E3%80%9110%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3redis%E5%BA%94%E7%94%A8/</id>
    <published>2024-09-08T12:00:33.000Z</published>
    <updated>2025-03-26T01:08:50.622Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是从<a href="https://juejin.cn/post/7031189105648074766?searchId=20240907222806EBEAF5650B7F2A5FFB08">Redis在docker下的的安装和基本使用</a>这篇文章中切出来的部分。</p><p>不过算是redis的基础知识和应用篇，目前还未完全了解，仅仅只是学习记录一下。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>目前独立开发项目时，出于节省时间的考虑，我试用了1panel进行部署。</p><p>如果你只是想快速完成开发，推荐使用1panel进行快速部署。</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h4><p>默认连接：IP 127.0.0.1 端口 6379</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>指定IP端口：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli –h <span class="number">127.0</span>.<span class="number">0.1</span> –<span class="selector-tag">p</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>Redis提供了PING-PONG机制，测试与客户端和服务器链接是否正常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">redis 127.0.0.1:6379&gt;ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>正常回复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;SET <span class="built_in">test</span> 123</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>错误回复（以error开头，后面跟着错误信息）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;TEST</span><br><span class="line">(error) ERR unknown <span class="built_in">command</span> <span class="string">&#x27;TEST&#x27;</span></span><br></pre></td></tr></table></figure><p>整数回复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;INCR test_incr</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>字符串回复（最长久的一种回复，双引号包裹）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;get test</span><br><span class="line">“<span class="number">123</span>”</span><br></pre></td></tr></table></figure><p>多行字符串回复</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">127.0.0.1:6379&gt;KEYS *</span></span><br><span class="line">1) <span class="string">&quot;test_incr&quot;</span></span><br><span class="line">2) <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br></pre></td></tr></table></figure><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><p>字符串类型是redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据。可以存储JSON化的对象、字节数组等。一个字符串类型键允许存储的数据最大容量是512MB。</p><p>赋值与取值：</p><p>SET key value</p><p>GET key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> test1 123</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> test2 ab</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;test1&quot;</span></span><br><span class="line">2) <span class="string">&quot;test2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get test1</span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get test2</span><br><span class="line"><span class="string">&quot;ab&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get test3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="keys通配符"><a href="#keys通配符" class="headerlink" title="keys通配符"></a>keys通配符</h4><p>获取符合规则的建名列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KEYS *</span><br><span class="line">keys <span class="built_in">test</span>[_]* </span><br><span class="line">keys t[a-d]</span><br></pre></td></tr></table></figure><p>说明：</p><p>？ 匹配一个字符，例如 keys ?est1</p><p>*  匹配任意个（包括0个）字符</p><p>[] 匹配括号间的任一字符，例如 keys test[12]。还可以使用“-“表示范围。</p><p>例如test[1-3]匹配test1&#x2F;test2&#x2F;test3</p><p>\x 匹配字符x，用于转义符合，如果要匹配“？“就需要使用?</p><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>redis默认支持16个数据库，对外都是以一个从0开始的递增数字命名，可以通过参数database来修改默认数据库个数。客户端连接redis服务后会自动选择0号数据库，可以通过select命令更换数据库，例如选择1号数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;GET <span class="built_in">test</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>说明：</p><p>Redis不支持自定义数据库名称。</p><p>Redis不支持为每个数据库设置访问密码。</p><p>Redis的多个数据库之间不是安全隔离的，FLUSHALL命令会清空所有数据库的数据。</p><p>清除屏幕内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><p>判断一个键是否存在。</p><p>如果键存在则返回整数类型1，否则返回0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;test_incr&quot;</span></span><br><span class="line">2) <span class="string">&quot;test1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists test1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; exists test3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>删除键，可以删除一个或者多个键，多个键用空格隔开，返回值是删除的键的个数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del test1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; del test1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; del test1 test_incr</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>获得键值的数据类型，返回值可能是string（字符串）、hash（散列类型）、list（列表类型）、set（集合类型）、zset（有序集合类型）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;test1&quot;</span></span><br><span class="line">2) <span class="string">&quot;test2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> test1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> test2</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span></span><br><span class="line">redis-cli 2.8.19</span><br><span class="line">Type: <span class="string">&quot;help @&lt;group&gt;&quot;</span> to get a list of commands <span class="keyword">in</span> &lt;group&gt;</span><br><span class="line">      <span class="string">&quot;help &lt;command&gt;&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span> on &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">      <span class="string">&quot;help &lt;tab&gt;&quot;</span> to get a list of possible <span class="built_in">help</span> topics</span><br><span class="line">      <span class="string">&quot;quit&quot;</span> to <span class="built_in">exit</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">  TYPE key</span><br><span class="line">  summary: Determine the <span class="built_in">type</span> stored at key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br></pre></td></tr></table></figure><p>官网：<a href="https://link.juejin.cn/?target=http://www.redis.io%E5%B8%AE%E5%8A%A9">www.redis.io帮助</a></p><h4 id="flushall"><a href="#flushall" class="headerlink" title="flushall"></a>flushall</h4><p>清空所有数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="flushdb"><a href="#flushdb" class="headerlink" title="flushdb"></a>flushdb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="Redis数据类型之字符串"><a href="#Redis数据类型之字符串" class="headerlink" title="Redis数据类型之字符串"></a><strong>Redis数据类型之字符串</strong></h3><p>存放的字符串为二进制是安全的。字符串长度支持到512M。</p><h4 id="incry-x2F-incyby"><a href="#incry-x2F-incyby" class="headerlink" title="incry&#x2F;incyby"></a>incry&#x2F;incyby</h4><p>递增数字INCR key当存储的字符串是整数时，redis提供了一个实用的命令INCR，其作用是让当前键值递增，并返回递增后的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;test1&quot;</span></span><br><span class="line">2) <span class="string">&quot;test2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get test1</span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get test1</span><br><span class="line"><span class="string">&quot;abc&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get test2</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;num&quot;</span></span><br><span class="line">2) <span class="string">&quot;test1&quot;</span></span><br><span class="line">3) <span class="string">&quot;test&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>从上面例子可以看出，如果num不存在，则自动会创建，如果存在自动+1。</p><p>指定增长系数</p><p>语法：INCRBY key increment</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; incrby num 2</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; incrby num 2</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; incrby num 2</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="decr-x2F-decrby"><a href="#decr-x2F-decrby" class="headerlink" title="decr&#x2F;decrby"></a>decr&#x2F;decrby</h4><p>减少指定的整数</p><p>DECR key  按照默认步长(默认为1)进行递减</p><p>DECRBY key decrement 按照指定步长进行递减</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; decrby num 3</span><br></pre></td></tr></table></figure><h4 id="incrbyfloat"><a href="#incrbyfloat" class="headerlink" title="incrbyfloat"></a>incrbyfloat</h4><p>整数时，第一次加可以得到正确结果，浮点数后再加浮点就会出现精度问题。</p><p>原来下面的例子2.8.7注意在新版本中已经修正了这个浮点精度问题。3.0.7</p><p>INCRBYFLOAT key decrement</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> num 131</span><br><span class="line">(<span class="built_in">integer</span>) 131</span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat num 0.7</span><br><span class="line">“131.7”</span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat num 0.7</span><br><span class="line">“132.3999999999999999”</span><br></pre></td></tr></table></figure><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>向尾部追加值。如果键不存在则创建该键，其值为写的value，即相当于SET key value。返回值是追加后字符串的总长度。</p><p>语法：APPEND key value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;num&quot;</span></span><br><span class="line">2) <span class="string">&quot;test1&quot;</span></span><br><span class="line">3) <span class="string">&quot;test&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; append <span class="built_in">test</span> <span class="string">&quot;abc&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br><span class="line"><span class="string">&quot;123abc&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p>字符串长度，返回数据的长度，如果键不存在则返回0。注意，如果键值为空串，返回也是0。</p><p>语法：STRLEN key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br><span class="line"><span class="string">&quot;123abc&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen <span class="built_in">test</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; strlen tnt</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> tnt <span class="string">&quot;&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; strlen tnt</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; exists tnt</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="mset-x2F-mget"><a href="#mset-x2F-mget" class="headerlink" title="mset&#x2F;mget"></a>mset&#x2F;mget</h4><p>同时设置&#x2F;获取多个键值</p><p>语法：MSET key value [key value …]</p><p>MGET key [key …]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; mset a 1 b 2 c 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget a b c</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="Redis有效时间"><a href="#Redis有效时间" class="headerlink" title="Redis有效时间"></a><strong>Redis有效时间</strong></h3><h4 id="Expire-设置生效时长-单位秒"><a href="#Expire-设置生效时长-单位秒" class="headerlink" title="Expire (设置生效时长-单位秒)"></a>Expire (设置生效时长-单位秒)</h4><p>Redis在实际使用过程中更多的用作缓存，然而缓存的数据一般都是需要设置有效时间的(缓存内存是有限的，不可能无限制增加)，即到期后数据自动销毁。</p><p>语法：EXPIRE key seconds</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> bomb tnt</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire bomb 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>TTL查看key的剩余时间，当返回值为-2时，表示键被删除。</p><p>当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。</p><p>注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。</p><h4 id="Persist-取消时长设置"><a href="#Persist-取消时长设置" class="headerlink" title="Persist(取消时长设置)"></a>Persist(取消时长设置)</h4><p>通过persist让对特定key设置的生效时长失效。</p><p>语法：PERSIST key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> bomb tnt</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire bomb 60</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 49</span><br><span class="line">127.0.0.1:6379&gt; persist bomb</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>设置新的数据时需要重新设置该key的生存时间，重新设置值也会清除生存时间。</p><h4 id="pexpire-单位毫秒"><a href="#pexpire-单位毫秒" class="headerlink" title="pexpire(单位毫秒)"></a>pexpire(单位毫秒)</h4><p>pexpire 让key的生效时长以毫秒作为计量单位，可应用于秒杀场景。</p><p>语法：PEXPIRE key milliseconds</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> bomb tnt</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pexpire bomb 10000</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>设置生存时间为毫秒，可以做到更精确的控制。</p><h3 id="Redis高级中的hash结构"><a href="#Redis高级中的hash结构" class="headerlink" title="Redis高级中的hash结构"></a>Redis高级中的hash结构</h3><p>在redis中用的最多的就是hash和string类型。</p><h4 id="（1）问题"><a href="#（1）问题" class="headerlink" title="（1）问题"></a>（1）问题</h4><p>假设有User对象以JSON序列化的形式存储到redis中，User对象有id、username、password、age、name等属性，存储的过程如下：</p><p>保存、更新：</p><p>User对象-&gt;json(string)-&gt;redis</p><p>如果在业务上只是更新age属性，其他的属性并不做更新应该怎么做呢？</p><p>Redis数据类型之散列类型hash</p><p>散列类型存储了字段（field）和字段值的映射，但字段值只能是字符串，不支持其他类型，也就是说，散列类型不能嵌套其他的数据类型。一个散列类型可以包含最多232-1个字段。</p><h4 id="（2）hset-x2F-hget"><a href="#（2）hset-x2F-hget" class="headerlink" title="（2）hset&#x2F;hget"></a>（2）hset&#x2F;hget</h4><p>相关命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HSET key field value</span><br><span class="line">HGET key field</span><br><span class="line">HMSET key field value [field value…]</span><br><span class="line">HMGET key field [field]</span><br><span class="line">HGETALL key</span><br></pre></td></tr></table></figure><p>HSET和HGET赋值和取值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user username chenchen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user username</span><br><span class="line"><span class="string">&quot;chenchen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hset user username chen</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys user</span><br><span class="line">1) <span class="string">&quot;user&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) <span class="string">&quot;username&quot;</span></span><br><span class="line">2) <span class="string">&quot;chen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; hset user age 18</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user address <span class="string">&quot;xi&#x27;an&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) <span class="string">&quot;username&quot;</span></span><br><span class="line">2) <span class="string">&quot;chen&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">3) <span class="string">&quot;address&quot;</span></span><br><span class="line">4) <span class="string">&quot;xi&#x27;an&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>HSET命令不区分插入和更新操作，当执行插入操作时HSET命令返回1，当执行更新操作时返回0。</p><h4 id="（3）hincrby"><a href="#（3）hincrby" class="headerlink" title="（3）hincrby"></a>（3）hincrby</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdecrby article total 1<span class="comment">#执行会出错</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby article total -1<span class="comment">#没有hdecrby自减命令</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget article total<span class="comment">#获取值</span></span><br></pre></td></tr></table></figure><h4 id="（4）hmset-x2F-hmget"><a href="#（4）hmset-x2F-hmget" class="headerlink" title="（4）hmset&#x2F;hmget"></a>（4）hmset&#x2F;hmget</h4><p>HMSET和HMGET设置和获取对象属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset person username tony age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget person age username</span><br><span class="line">1) <span class="string">&quot;18&quot;</span></span><br><span class="line">2) <span class="string">&quot;tony&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall person</span><br><span class="line">1) <span class="string">&quot;username&quot;</span></span><br><span class="line">2) <span class="string">&quot;tony&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>注意：上面HMGET字段顺序可以自行定义</p><h4 id="（5）hexists"><a href="#（5）hexists" class="headerlink" title="（5）hexists"></a>（5）hexists</h4><p>属性是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists killer</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;hexists&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; hexists killer a</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists user username</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists person age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（6）-hdel"><a href="#（6）-hdel" class="headerlink" title="（6） hdel"></a>（6） hdel</h4><p>删除属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdel user age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) <span class="string">&quot;username&quot;</span></span><br><span class="line">2) <span class="string">&quot;chen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall person</span><br><span class="line">1) <span class="string">&quot;username&quot;</span></span><br><span class="line">2) <span class="string">&quot;tony&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;18&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（7）hkeys-x2F-hvals"><a href="#（7）hkeys-x2F-hvals" class="headerlink" title="（7）hkeys&#x2F;hvals"></a>（7）hkeys&#x2F;hvals</h4><p>只获取字段名HKEYS或字段值HVALS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys person</span><br><span class="line">1) <span class="string">&quot;username&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals person</span><br><span class="line">1) <span class="string">&quot;tony&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（8）hlen"><a href="#（8）hlen" class="headerlink" title="（8）hlen"></a>（8）hlen</h4><p>元素个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hlen person</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="Redis高级中的list结构"><a href="#Redis高级中的list结构" class="headerlink" title="Redis高级中的list结构"></a>Redis高级中的list结构</h3><h4 id="（1）问题-1"><a href="#（1）问题-1" class="headerlink" title="（1）问题"></a>（1）问题</h4><p>Redis高级中的list结构</p><p>Redis的list类型其实就是一个每个子元素都是string类型的双向链表。可以通过push,pop操作从链表的头部或者尾部添加删除元素。这使得list既可以用作栈，也可以用作队列。</p><p>有意思的是list的pop操作还有阻塞版本的，当我们[lr]pop一个list对象时，如果list是空，或者不存在，会立即返回nil。但是阻塞版本的b[lr]pop可以则可以阻塞，当然可以加超时时间，超时后也会返回nil。为什么要阻塞版本的pop呢，主要是为了避免轮询。举个简单的例子如果我们用list来实现一个工作队列。执行任务的thread可以调用阻塞版本的pop去获取任务这样就可以避免轮询去检查是否有任务存在。当任务来时候工作线程可以立即返回，也可以避免轮询带来的延迟。</p><h4 id="（2）lpush"><a href="#（2）lpush" class="headerlink" title="（2）lpush"></a>（2）lpush</h4><p>在key对应list的头部添加字符串元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush mylist <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>其中，Redis Lrange 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p><h4 id="（3）rpush"><a href="#（3）rpush" class="headerlink" title="（3）rpush"></a>（3）rpush</h4><p>在key对应list的尾部添加字符串元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist2 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist2 <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（4）查看list"><a href="#（4）查看list" class="headerlink" title="（4）查看list"></a>（4）查看list</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lrange mylist3 0 -1</span><br></pre></td></tr></table></figure><h4 id="（5）del"><a href="#（5）del" class="headerlink" title="（5）del"></a>（5）del</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; del mylist</span><br></pre></td></tr></table></figure><h4 id="（6）linsert"><a href="#（6）linsert" class="headerlink" title="（6）linsert"></a>（6）linsert</h4><p>在key对应list的特定位置之前或之后添加字符串元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist3 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist3 <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; linsert mylist3 before <span class="string">&quot;world&quot;</span> <span class="string">&quot;there&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist3 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;there&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（7）lset"><a href="#（7）lset" class="headerlink" title="（7）lset"></a>（7）lset</h4><p>设置list中指定下标的元素值(一般用于修改操作)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist4 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist4 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist4 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lset mylist4 0 <span class="string">&quot;four&quot;</span></span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; lset mylist4 -2 <span class="string">&quot;five&quot;</span></span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist4 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;five&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（8）lrem"><a href="#（8）lrem" class="headerlink" title="（8）lrem"></a>（8）lrem</h4><p>从key对应list中删除count个和value相同的元素，count&gt;0时，按从头到尾的顺序删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;foo&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; lrem mylist5 2 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) <span class="string">&quot;foo&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>count&lt;0时，按从尾到头的顺序删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;foo&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; lrem mylist6 -2 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist6 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;foo&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>count&#x3D;0时，删除全部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;foo&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; lrem mylist7 0 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist7 0 -1</span><br><span class="line">1) <span class="string">&quot;foo&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（9）ltrim"><a href="#（9）ltrim" class="headerlink" title="（9）ltrim"></a>（9）ltrim</h4><p>保留指定key 的值范围内的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;four&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; ltrim mylist8 1 -1</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist8 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;four&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（10）lpop"><a href="#（10）lpop" class="headerlink" title="（10）lpop"></a>（10）lpop</h4><p>从list的头部删除元素，并返回删除元素</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;world&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpop mylist</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;world&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="（11）rpop"><a href="#（11）rpop" class="headerlink" title="（11）rpop"></a>（11）rpop</h4><p>从list的尾部删除元素，并返回删除元素：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist2 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;world&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpop mylist2</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist2 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="（12）llen"><a href="#（12）llen" class="headerlink" title="（12）llen"></a>（12）llen</h4><p>返回key对应list的长度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; llen mylist5</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（13）index"><a href="#（13）index" class="headerlink" title="（13）index"></a>（13）index</h4><p>返回名称为key的list中index位置的元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;foo&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt; lindex mylist5 0</span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt; lindex mylist5 1</span><br><span class="line"><span class="string">&quot;foo&quot;</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（14）rpoplpush"><a href="#（14）rpoplpush" class="headerlink" title="（14）rpoplpush"></a>（14）rpoplpush</h4><p>从第一个list的尾部移除元素并添加到第二个list的头部,最后返回被移除的元素值，整个操作是原子的.如果第一个list是空或者不存在返回nil：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpoplpush lst1 lst1</span><br><span class="line">rpoplpush lst1 lst2</span><br></pre></td></tr></table></figure><h3 id="Redis高机中的set结构"><a href="#Redis高机中的set结构" class="headerlink" title="Redis高机中的set结构"></a>Redis高机中的set结构</h3><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。Redis中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。集合中最大的成员数为232 - 1 (4294967295每个集合可存储40多亿个成员)。</p><h4 id="（1）sadd"><a href="#（1）sadd" class="headerlink" title="（1）sadd"></a>（1）sadd</h4><p>添加元素，重复元素添加失败，返回0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd name tony</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd name hellen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd name rose</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd name rose</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><h4 id="（2）smembers"><a href="#（2）smembers" class="headerlink" title="（2）smembers"></a>（2）smembers</h4><p>获取内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers name</span><br><span class="line">1) <span class="string">&quot;hellen&quot;</span></span><br><span class="line">2) <span class="string">&quot;rose&quot;</span></span><br><span class="line">3) <span class="string">&quot;tony&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（3）spop"><a href="#（3）spop" class="headerlink" title="（3）spop"></a>（3）spop</h4><p>移除并返回集合中的一个随机元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) <span class="string">&quot;amoeba&quot;</span></span><br><span class="line">2) <span class="string">&quot;redis&quot;</span></span><br><span class="line">3) <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">4) <span class="string">&quot;nginx&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop internet</span><br><span class="line"><span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop internet</span><br><span class="line"><span class="string">&quot;nginx&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) <span class="string">&quot;amoeba&quot;</span></span><br><span class="line">2) <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><h4 id="（4）scard"><a href="#（4）scard" class="headerlink" title="（4）scard"></a>（4）scard</h4><p>获取成员个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard name</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h4 id="（5）smove"><a href="#（5）smove" class="headerlink" title="（5）smove"></a>（5）smove</h4><p>移动一个元素到另外一个集合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd internet amoeba nginx redis</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd bigdata hadopp spark rabbitmq</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) <span class="string">&quot;amoeba&quot;</span></span><br><span class="line">2) <span class="string">&quot;redis&quot;</span></span><br><span class="line">3) <span class="string">&quot;nginx&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers bigdata</span><br><span class="line">1) <span class="string">&quot;hadopp&quot;</span></span><br><span class="line">2) <span class="string">&quot;spark&quot;</span></span><br><span class="line">3) <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove bigdata internet rabbitmq</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) <span class="string">&quot;amoeba&quot;</span></span><br><span class="line">2) <span class="string">&quot;redis&quot;</span></span><br><span class="line">3) <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">4) <span class="string">&quot;nginx&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers bigdata</span><br><span class="line">1) <span class="string">&quot;hadopp&quot;</span></span><br><span class="line">2) <span class="string">&quot;spark&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（6）sunion"><a href="#（6）sunion" class="headerlink" title="（6）sunion"></a>（6）sunion</h4><p>并集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunion internet bigdata</span><br><span class="line">1) <span class="string">&quot;redis&quot;</span></span><br><span class="line">2) <span class="string">&quot;nginx&quot;</span></span><br><span class="line">3) <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">4) <span class="string">&quot;amoeba&quot;</span></span><br><span class="line">5) <span class="string">&quot;hadopp&quot;</span></span><br><span class="line">6) <span class="string">&quot;spark&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Redis数据持久化的两种模式-重点"><a href="#Redis数据持久化的两种模式-重点" class="headerlink" title="Redis数据持久化的两种模式(重点)"></a>Redis数据持久化的两种模式(重点)</h3><h4 id="（1）简介"><a href="#（1）简介" class="headerlink" title="（1）简介"></a>（1）简介</h4><p>Redis中为了保证在系统宕机(类似进程被杀死)情况下，能更快的进行故障恢复，设计了两种数据持久化方案，分别为rdb和aof。</p><p>Rdb方式是通过手动(save-阻塞式或bgsave-异步)或周期性方式保存redis中key&#x2F;value的一种机制,Rdb方式一般为redis的默认数据持久化方式.</p><p>Aof方式是通过记录写操作日志的方式,记录redis数据的一种持久化机制,这个机制默认是没有开启的.</p><h4 id="（2）rdb和aof比较"><a href="#（2）rdb和aof比较" class="headerlink" title="（2）rdb和aof比较"></a>（2）rdb和aof比较</h4><table><thead><tr><th><strong>rdb</strong></th><th><strong>aof</strong></th></tr></thead><tbody><tr><td>fork一个进程，遍历hash table，利用copy on write，把整个db dump保存下来。  save,bgsave,shutdown, slave 命令会触发这个操作。粒度比较大，如果save, shutdown, slave 之前crash了，则中间的操作没办法恢复。</td><td>把写操作指令，持续的写到一个类似日志文件里。（类似于从postgresql等数据库导出sql一样，只记录写操作）  粒度较小，crash（宕机）之后，只有crash之前没有来得及做日志的操作,这些数据是没办法恢复。</td></tr></tbody></table><p>两种区别就是，一个是持续的用日志记录写操作，crash（崩溃）后利用日志恢复；一个是平时写操作的时候不触发写，只有手动提交save命令，或者是shutdown关闭命令时，才触发备份操作。</p><p>选择的标准，就是看系统是愿意牺牲一些性能，换取更高的缓存一致性（aof），还是愿意写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（rdb）。rdb这个就更有些 最终一致性（eventually consistent）的意思了。</p><h3 id="Redis事务管理（重点）"><a href="#Redis事务管理（重点）" class="headerlink" title="Redis事务管理（重点）"></a>Redis事务管理（重点）</h3><h4 id="（1）背景"><a href="#（1）背景" class="headerlink" title="（1）背景"></a>（1）背景</h4><p>大多数数据库的事务控制，假如是乐观锁的方式，一般都是基于数据版本（version）的记录机制实现的。即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个”version”字段来实现读取出数据时，将此版本号一同读出，之后更新时，对此版本号加1。此时，将提交数据的版本号与数据库表对应记录的当前版本号进行比对，如果提交的数据版本号大于数据库当前版本号，则予以更新，否则认为是过期数据。</p><p>Redis也采用类似的机制，使用watch命令会监视给定的key，当exec时候如果监视的key从调用watch后发生过变化，则整个事务会失败。也可以调用watch多次监视多个key。这样就可以对指定的key加乐观锁了。注意watch的key是对整个连接有效的，事务也一样。如果连接断开，监视和事务都会被自动清除。当然exec，discard，unwatch命令都会清除连接中的所有监视。</p><h4 id="（2）基本概念"><a href="#（2）基本概念" class="headerlink" title="（2）基本概念"></a>（2）基本概念</h4><p>redis是单线程(但是在6.0中真正引用多线程的应用)，提交命令时，其它命令无法插入其中，轻松利用单线程实现了事务的原子性。那如果执行多个redis命令呢？自然就没有事务保证，于是redis有下列相关的redis命令来实现事务管理。</p><p>multi   开启事务</p><p>exec    提交事务</p><p>discard  取消事务</p><p>watch   监控，如果监控的值发生变化，则提交事务时会失败</p><p>unwatch  去掉监控</p><p>Redis保证一个事务中的所有命令要么都执行，要么都不执行(原子性)。如果在发送EXEC命令前客户端断线了，则Redis会清空事务队列，事务中的所有命令都不会执行。而一旦客户端发送了EXEC命令，所有的命令就都会被执行，即使此后客户端断线也没关系，因为Redis中已经记录了所有要执行的命令。</p><h4 id="（3）exec提交事务"><a href="#（3）exec提交事务" class="headerlink" title="（3）exec提交事务"></a>（3）exec提交事务</h4><p>例如：模拟转账，王有200，张有700，张给王转100。过程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> w 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> z 700</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget w z</span><br><span class="line">1) <span class="string">&quot;200&quot;</span></span><br><span class="line">2) <span class="string">&quot;700&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby z 100</span><br><span class="line">QUEUED<span class="comment">#注意此命令根本没有执行，而是把其放在一个队列中</span></span><br><span class="line">127.0.0.1:6379&gt; incrby w 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget w z</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get w<span class="comment">#同时，这些相关的变量也不能再读取</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get z</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 600</span><br><span class="line">2) (<span class="built_in">integer</span>) 300</span><br><span class="line">3) 1) <span class="string">&quot;300&quot;</span></span><br><span class="line">   2) <span class="string">&quot;600&quot;</span></span><br><span class="line">4) <span class="string">&quot;300&quot;</span></span><br><span class="line">5) <span class="string">&quot;600&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget w z</span><br><span class="line">1) <span class="string">&quot;300&quot;</span></span><br><span class="line">2) <span class="string">&quot;600&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（4）如果有错误指令，自动取消"><a href="#（4）如果有错误指令，自动取消" class="headerlink" title="（4）如果有错误指令，自动取消"></a>（4）如果有错误指令，自动取消</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget w z</span><br><span class="line">1) <span class="string">&quot;300&quot;</span></span><br><span class="line">2) <span class="string">&quot;600&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get w</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> w 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; abc</span><br><span class="line">(error) ERR unknown <span class="built_in">command</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; mget w z<span class="comment">#可以看出数据并未变化</span></span><br><span class="line">1) <span class="string">&quot;300&quot;</span></span><br><span class="line">2) <span class="string">&quot;600&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="（5）discard取消事务"><a href="#（5）discard取消事务" class="headerlink" title="（5）discard取消事务"></a>（5）discard取消事务</h4><p>注意redis事务太简单，没有回滚，而只有取消。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget z w</span><br><span class="line">1) <span class="string">&quot;600&quot;</span></span><br><span class="line">2) <span class="string">&quot;300&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incrby z 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get z</span><br><span class="line"><span class="string">&quot;600&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">(error) ERR EXEC without MULTI</span><br></pre></td></tr></table></figure><h4 id="（6）秒杀抢票事务处理"><a href="#（6）秒杀抢票事务处理" class="headerlink" title="（6）秒杀抢票事务处理"></a>（6）秒杀抢票事务处理</h4><p>客户端1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> ticket 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch ticket<span class="comment">#乐观锁，对值进行观察，改变则事务失败</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi<span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decr ticket</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby money 100</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>客户端2：还没等客户端1提交事务，此时客户端2把票买到了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get ticket</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr ticket</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>客户端1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">(nil)<span class="comment">#执行事务，失败</span></span><br><span class="line">127.0.0.1:6379&gt; get ticket</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; unwatch<span class="comment">#取消监控</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关于redis的基础知识及应用，是上篇分离出来的。</p><p>因为我个人不怎么用JAVA，所以把java的相关内容移除了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7031189105648074766?searchId=20240907222806EBEAF5650B7F2A5FFB08">Redis在docker下的的安装和基本使用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇是从&lt;a href=&quot;https://juejin.cn/post/7031189105648074766?searchId=20240907222806EBEAF5650B7F2A5FFB08&quot;&gt;Redis在docker下的的安装和基本使用&lt;/a&gt;这篇文章中切出来的部分。&lt;/p&gt;
&lt;p&gt;不过算是redis的基础知识和应用篇，目前还未完全了解，仅仅只是学习记录一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="https://crazystudent13.github.io/tags/redis/"/>
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>【转】linux安装redis</title>
    <link href="https://crazystudent13.github.io/2024/09/08/%E3%80%90%E8%BD%AC%E3%80%91linux%E5%AE%89%E8%A3%85redis/"/>
    <id>https://crazystudent13.github.io/2024/09/08/%E3%80%90%E8%BD%AC%E3%80%91linux%E5%AE%89%E8%A3%85redis/</id>
    <published>2024-09-08T11:33:57.000Z</published>
    <updated>2025-03-26T01:08:50.623Z</updated>
    
    <content type="html"><![CDATA[<p>完成了Docker和MySQL的安装，因为项目需要，这里需要安装redis。</p><p>redis是为了防止MySQL的连接被太多请求击穿做的防火墙（可以这么理解），是前后端连接的中间件。</p><p>所以，redis是大型项目必须要学习的必然知识，所以这里整理一下线上部署的知识，便于后续后端的学习。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这里并不用传动的方式进行redis在Linux服务器上的安装，全程都用docker进行安装。</p><p>在正式配置服务器之前，请参考我之前的<a href="https://crazystudent13.cn/2024/09/06/%E3%80%90%E8%BD%AC%E3%80%91linux%E5%AE%89%E8%A3%85docker/">docker安装流程</a>，先把服务器上的Docker部署一下。</p><h3 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a>下载镜像文件</h3><p>在linux虚拟机中启动docker,从docker中将redis从网络上pull下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h3 id="创建redis实例并启动"><a href="#创建redis实例并启动" class="headerlink" title="创建redis实例并启动"></a>创建redis实例并启动</h3><p>创建redis配置文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/docker/redis/conf</span><br></pre></td></tr></table></figure><p>在配置文件录下创建redis.conf配置文件(因为redis镜像中这个redis.conf是一个目录所以要先创建一个这个配置文件，否在我们本地挂载点也会变成一个目录)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /usr/local/docker/redis/conf/redis.conf</span><br></pre></td></tr></table></figure><p>在linux上挂载redis并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /usr/local/docker/redis/data:/data \</span><br><span class="line">-v /usr/local/docker/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure><h3 id="查看正在运行的进程"><a href="#查看正在运行的进程" class="headerlink" title="查看正在运行的进程"></a>查看正在运行的进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="控制台直接连接redis测试"><a href="#控制台直接连接redis测试" class="headerlink" title="控制台直接连接redis测试"></a>控制台直接连接redis测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis bash</span><br></pre></td></tr></table></figure><h3 id="检测redisb版本"><a href="#检测redisb版本" class="headerlink" title="检测redisb版本"></a>检测redisb版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis-server –v</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -v</span><br></pre></td></tr></table></figure><p>不过，这里更推荐直接将上面的两个步骤合为一个步骤，不容易出问题，指令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis redis-cli</span><br></pre></td></tr></table></figure><h3 id="停止redis服务"><a href="#停止redis服务" class="headerlink" title="停止redis服务"></a>停止redis服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop redis</span><br></pre></td></tr></table></figure><h3 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h3><p>在docker中，使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start redis</span><br></pre></td></tr></table></figure><p>传统方式启动（非docker环境）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server <span class="comment">#默认找redis.conf配置文件</span></span><br><span class="line">redis-server &amp;<span class="comment">#上面ctrl+c中断reis会退出，这个不会</span></span><br><span class="line">redis-server redis6380.conf      <span class="comment">#指定配置文件，这样可以启动多个实例</span></span><br></pre></td></tr></table></figure><h3 id="重启redis服务"><a href="#重启redis服务" class="headerlink" title="重启redis服务"></a>重启redis服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart redis</span><br></pre></td></tr></table></figure><h3 id="查看redis服务版本"><a href="#查看redis服务版本" class="headerlink" title="查看redis服务版本"></a>查看redis服务版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis redis-server -v</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h3 id="设置访问密码"><a href="#设置访问密码" class="headerlink" title="设置访问密码"></a>设置访问密码</h3><p>默认没有密码，可以随意访问。</p><p>redis速度相当快，在一个较好的服务器下，外部用户每秒可以进行15w次的密码尝试，这意味着必须指定非常强大的密码来防止暴力破解。</p><p>如果要使用密码，打开redis.conf配置文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456    <span class="comment">#480行，设置请求密码，这样访问时都需要先登录</span></span><br></pre></td></tr></table></figure><p>修改完配置文件以后，要重启redis服务。（docker start redis）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; auth 123456<span class="comment">#客户端访问方式</span></span><br><span class="line">jedis.auth(“123456”);<span class="comment">#jedis访问方式(学了以后用)</span></span><br></pre></td></tr></table></figure><p>部署到这里，基本上流程都差不多了，如果有什么具体的配置需求，可以参考下文中的内容，进行config的配置。</p><h3 id="Redis-conf配置文件"><a href="#Redis-conf配置文件" class="headerlink" title="Redis.conf配置文件"></a>Redis.conf配置文件</h3><p>Redis 支持很多的参数，但都有默认值。</p><h4 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a><strong>daemonize</strong></h4><p>默认情况下， redis 不是在后台运行的，如果需要在后台运行，把该项的值更改为 yes。</p><h4 id="pidfile"><a href="#pidfile" class="headerlink" title="pidfile"></a><strong>pidfile</strong></h4><p>当 Redis 在后台运行的时候， Redis 默认会把 pid 文件放在&#x2F;var&#x2F;run&#x2F;redis.pid，你可以配置到其他地址。当运行多个 redis 服务时，需要指定不同的 pid 文件和端口</p><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a><strong>bind</strong></h4><p>指定 Redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求，在生产环境中最好设置该项</p><h4 id="port"><a href="#port" class="headerlink" title="port"></a><strong>port</strong></h4><p>监听端口，默认为 6379</p><h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a><strong>timeout</strong></h4><p>设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接</p><h4 id="loglevel"><a href="#loglevel" class="headerlink" title="loglevel"></a><strong>loglevel</strong></h4><p>log 等级分为 4 级， debug, verbose, notice, 和 warning。生产环境下一般开启 notice</p><h4 id="logfile"><a href="#logfile" class="headerlink" title="logfile"></a><strong>logfile</strong></h4><p>配置 log 文件地址，默认使用标准输出，即打印在命令行终端的窗口上</p><h4 id="databases"><a href="#databases" class="headerlink" title="databases"></a><strong>databases</strong></h4><p>设置数据库的个数，可以使用 SELECT 命令来切换数据库。默认使用的数据库是 0</p><h4 id="save"><a href="#save" class="headerlink" title="save"></a><strong>save</strong></h4><p>设置 Redis 进行数据库镜像的频率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(在 60 秒之内有 10000 个 keys 发生变化时)&#123;</span><br><span class="line">进行镜像备份 （redis/data/）</span><br><span class="line">&#125;else if(在 300 秒之内有 10 个 keys 发生了变化)&#123;</span><br><span class="line">进行镜像备份</span><br><span class="line">&#125;else if(在 900 秒之内有 1 个 keys 发生了变化)&#123;</span><br><span class="line">进行镜像备份</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rdbcompression"><a href="#rdbcompression" class="headerlink" title="rdbcompression"></a><strong>rdbcompression</strong></h4><p>在进行镜像备份时，是否进行压缩</p><h4 id="dbfilename"><a href="#dbfilename" class="headerlink" title="dbfilename"></a><strong>dbfilename</strong></h4><p>镜像备份文件的文件名</p><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a><strong>dir</strong></h4><p>数据库镜像备份的文件放置的路径。</p><p>这里的路径跟文件名要分开配置是因为 Redis 在进行备份时，先会将当前数据库的状态写入到一个临时文件中</p><p>等备份完成时，再把该临时文件替换为上面所指定的文件，而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中</p><h4 id="slaveof"><a href="#slaveof" class="headerlink" title="slaveof"></a><strong>slaveof</strong></h4><p>设置该数据库为其他数据库的从数据库</p><h4 id="masterauth"><a href="#masterauth" class="headerlink" title="masterauth"></a><strong>masterauth</strong></h4><p>当主数据库连接需要密码验证时，在这里指定</p><h4 id="requirepass"><a href="#requirepass" class="headerlink" title="requirepass"></a><strong>requirepass</strong></h4><p>设置客户端连接后进行任何其他指定前需要使用的密码。</p><p>警告：因为 redis 速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行 150K 次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解。</p><p><strong>maxclients</strong></p><p>限制同时连接的客户数量。当连接数超过这个值时， redis 将不再接收其他连接请求，</p><p>客户端尝试连接时将收到 error 信息。</p><h4 id="maxmemory"><a href="#maxmemory" class="headerlink" title="maxmemory"></a><strong>maxmemory</strong></h4><p>设置 redis 能够使用的最大内存。</p><h4 id="appendonly"><a href="#appendonly" class="headerlink" title="appendonly"></a><strong>appendonly</strong></h4><p>默认情况下， redis 会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失。</p><p>所以 redis 提供了另外一种更加高效的数据库备份及灾难恢复方式。开启 append only 模式之后， redis 会把所接收到的每一次写操作请求都追加到appendonly.aof 文件中，当 redis 重新启动时，会从该文件恢复出之前的状态。</p><p>但是这样会造成 appendonly.aof 文件过大，所以 redis 还支持了 BGREWRITEAOF 指令，对appendonly.aof 进行重新整理。</p><p>所以我认为推荐生产环境下的做法为关闭镜像，开启appendonly.aof，同时可以选择在访问较少的时间每天对 appendonly.aof 进行重写一次。</p><h4 id="appendfsync"><a href="#appendfsync" class="headerlink" title="appendfsync"></a>appendfsync</h4><p>设置对 appendonly.aof 文件进行同步的频率。 always 表示每次有写操作都进行同步，</p><p>everysec 表示对写操作进行累积，每秒同步一次。这个需要根据实际业务场景进行配置</p><h4 id="vm-enabled"><a href="#vm-enabled" class="headerlink" title="vm-enabled"></a><strong>vm-enabled</strong></h4><p>是否开启虚拟内存支持。因为 redis 是一个内存数据库，而且当内存满的时候，无法接收新的写请求，所以在 redis 2.0 中，提供了虚拟内存的支持。</p><p>但是需要注意的是， redis中，所有的 key 都会放在内存中，在内存不够时，只会把 value 值放入交换区。这样保证了虽然使用虚拟内存，但性能基本不受影响</p><p>同时，你需要注意的是你要把vm-max-memory 设置到足够来放下你的所有的 key</p><h4 id="vm-swap-file"><a href="#vm-swap-file" class="headerlink" title="vm-swap-file"></a><strong>vm-swap-file</strong></h4><p>设置虚拟内存的交换文件路径</p><h4 id="vm-max-memory"><a href="#vm-max-memory" class="headerlink" title="vm-max-memory"></a><strong>vm-max-memory</strong></h4><p>这里设置开启虚拟内存之后， redis 将使用的最大物理内存的大小。默认为 0， redis 将把他所有的能放到交换文件的都放到交换文件中，以尽量少的使用物理内存。</p><p>在生产环境下，需要根据实际情况设置该值，最好不要使用默认的 0</p><h4 id="vm-page-size"><a href="#vm-page-size" class="headerlink" title="vm-page-size"></a><strong>vm-page-size</strong></h4><p>设置虚拟内存的页大小，如果你的 value 值比较大，比如说你要在 value 中放置博客、新闻之类的所有文章内容，就设大一点，如果要放置的都是很小的内容，那就设小一点。</p><h4 id="vm-pages"><a href="#vm-pages" class="headerlink" title="vm-pages"></a><strong>vm-pages</strong></h4><p>设置交换文件的总的 page 数量， 需要注意的是， page table 信息会放在物理内存中，每8 个 page 就会占据 RAM 中的 1 个 byte。总的虚拟内存大小 ＝ vm-page-size * vm-pages</p><h4 id="vm-max-threads"><a href="#vm-max-threads" class="headerlink" title="vm-max-threads"></a><strong>vm-max-threads</strong></h4><p>设置 VM IO 同时使用的线程数量。因为在进行内存交换时，对数据有编码和解码的过程，所以尽管 IO 设备在硬件上本上不能支持很多的并发读写，但是还是如果你所保存的 vlaue 值比较大，将该值设大一些，还是能够提升性能的</p><p><strong>glueoutputbuf</strong></p><p>把小的输出缓存放在一起，以便能够在一个 TCP packet 中为客户端发送多个响应，具体原理和真实效果我不是很清楚。所以根据注释，你不是很确定的时候就设置成 yes</p><h4 id="hash-max-zipmap-entries"><a href="#hash-max-zipmap-entries" class="headerlink" title="hash-max-zipmap-entries"></a><strong>hash-max-zipmap-entries</strong></h4><p>在 redis 2.0 中引入了 hash 数据结构。当 hash 中包含超过指定元素个数并且最大的元素没有超过临界时， hash 将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值</p><h4 id="activerehashing"><a href="#activerehashing" class="headerlink" title="activerehashing"></a><strong>activerehashing</strong></h4><p>开启之后， redis 将在每 100 毫秒时使用 1 毫秒的 CPU 时间来对 redis 的 hash 表进行重新 hash，可以降低内存的使用。</p><p>当你的使用场景中，有非常严格的实时性需要，不能够接受 Redis 时不时的对请求有 2 毫秒的延迟的话，把这项配置为 no。</p><p>如果没有这么严格的实时性要求，可以设置为 yes，以便能够尽可能快的释放内存</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本篇文章一开始只是想简单整理一个好用的线上redis部署流程。</p><p>但是在掘金上翻了一阵子之后，没想到找了一篇配置流程全面且准确的教程。</p><p>因为文档实在太长，这里仅截取了部署的部分，部署流程简单易懂，亲测可用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7031189105648074766?searchId=20240907222806EBEAF5650B7F2A5FFB08">Redis在docker下的的安装和基本使用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;完成了Docker和MySQL的安装，因为项目需要，这里需要安装redis。&lt;/p&gt;
&lt;p&gt;redis是为了防止MySQL的连接被太多请求击穿做的防火墙（可以这么理解），是前后端连接的中间件。&lt;/p&gt;
&lt;p&gt;所以，redis是大型项目必须要学习的必然知识，所以这里整理一下线上部署的知识，便于后续后端的学习。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="https://crazystudent13.github.io/tags/redis/"/>
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>【转】linux安装MySQL</title>
    <link href="https://crazystudent13.github.io/2024/09/06/%E3%80%90%E8%BD%AC%E3%80%91linux%E5%AE%89%E8%A3%85MySQL/"/>
    <id>https://crazystudent13.github.io/2024/09/06/%E3%80%90%E8%BD%AC%E3%80%91linux%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2024-09-06T14:46:42.000Z</published>
    <updated>2025-03-26T01:08:50.622Z</updated>
    
    <content type="html"><![CDATA[<p>关于在linux安装MySQL，我个人推荐使用Dcoker安装，流程比用原生手段安装更简单。</p><p>使用Docker之后，安装流程被简化了很多，简单易操作，也可以用<code>1panel</code>的图形化点击部署，很简单好用。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>如果之前没有安装Docker的，推荐完整流程参考：<a href="https://juejin.cn/post/7406144322834382899?searchId=202409061945048DCECD6B5FCF23BDCB0D">从安装Docker到打包迁移MySQL的完整指南</a>这篇文档。</p><p>先安装一下Docker，这篇文章记录的比较详细。</p><p>本文仅截取部署MySQL的部分，主要是用Docker在服务器上部署MySQL的流程。</p><h3 id="用Docker部署MySQL"><a href="#用Docker部署MySQL" class="headerlink" title="用Docker部署MySQL"></a>用Docker部署MySQL</h3><p>MySQL是一种流行的开源关系数据库管理系统。</p><p>在Docker中部署MySQL非常简单。</p><p>以下步骤将引导你如何在Docker中运行MySQL容器。</p><h4 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h4><p>为了加速镜像的下载速度，建议使用国内的镜像源。以下是从DaoCloud镜像源拉取MySQL官方镜像的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull daocloud.io/library/mysql:8.0</span><br></pre></td></tr></table></figure><p>千万千万不要使用下面命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mysql:8.0</span><br></pre></td></tr></table></figure><p>因为有些服务器禁止连接外网，所以导致你不能从hub拿到镜像下载地址，导致pull失败。</p><p>比如政务内网环境，那么此时就只能是如此操作。</p><h4 id="运行MySQL容器"><a href="#运行MySQL容器" class="headerlink" title="运行MySQL容器"></a>运行MySQL容器</h4><p>使用拉取的MySQL镜像启动一个容器，并将MySQL的3306端口映射到主机的3306端口，以便外部访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 -d mysql:8.0</span><br></pre></td></tr></table></figure><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><ul><li><code>--name mysql-container</code>：指定容器名称为<code>mysql-container</code>。</li><li><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code>：设置MySQL的<code>root</code>用户密码为<code>my-secret-pw</code>。</li><li><code>-p 3306:3306</code>：将容器内的3306端口映射到主机的3306端口。</li><li><code>-d mysql:8.0</code>：在后台运行MySQL 8.0镜像。</li></ul><h4 id="配置MySQL允许远程访问"><a href="#配置MySQL允许远程访问" class="headerlink" title="配置MySQL允许远程访问"></a>配置MySQL允许远程访问</h4><p>进入MySQL容器，允许<code>root</code>用户从任意主机访问数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it mysql-container mysql -uroot -p</span><br></pre></td></tr></table></figure><p>在MySQL命令行中，运行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;my-secret-pw&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>如果你希望创建一个新用户以用于远程访问，可以运行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;userpassword&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="配置my-cnf"><a href="#配置my-cnf" class="headerlink" title="配置my.cnf"></a>配置<code>my.cnf</code></h3><p>记得在目录<code>/var/lib/docker/volumes/mysql-data/_data/</code>中，添加一个<code>my.cnf</code></p><p><code>my.cnf</code>的文件，输入如下内容即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind-address = 自己服务器的ip地址</span><br></pre></td></tr></table></figure><h4 id="防火墙配置（如适用）"><a href="#防火墙配置（如适用）" class="headerlink" title="防火墙配置（如适用）"></a>防火墙配置（如适用）</h4><p>如果你的服务器有防火墙，需要确保3306端口对外开放。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>当然，这是用命令的方式，如果你使用的是腾讯云或者阿里云这种云服务器，是有端口配置的协议的。</p><p>有这种云服务器，这种事情就简单很多了。</p><p>你可以直接在防火墙的配置中，打开端口配置，把3306的端口打开就可以。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个流程还不完整，我可能测试的还不够完整，所以文档中应该有所缺漏。</p><p>不过，只要学习独立开发，后续必然还会再其他云服务器上部署项目，这个流程应该会被持续完善。</p><p>后续持续完善该部署流程，也欢迎大家提意见。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7406144322834382899?searchId=202409061945048DCECD6B5FCF23BDCB0D">从安装Docker到打包迁移MySQL的完整指南</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于在linux安装MySQL，我个人推荐使用Dcoker安装，流程比用原生手段安装更简单。&lt;/p&gt;
&lt;p&gt;使用Docker之后，安装流程被简化了很多，简单易操作，也可以用&lt;code&gt;1panel&lt;/code&gt;的图形化点击部署，很简单好用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://crazystudent13.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="MySQL" scheme="https://crazystudent13.github.io/tags/MySQL/"/>
    
    <category term="docker" scheme="https://crazystudent13.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
