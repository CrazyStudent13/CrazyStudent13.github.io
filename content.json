{"pages":[{"title":"友情链接","text":"目前没有友情链接","link":"/links/index.html"},{"title":"本站相关","text":"大家好，我是CrazyStudent13专注于技术的前端人员，老油条一枚。 2023除了修养身体，会专注于前端工程化相关的内容，会学习部分后端相关技术。 目前因身体不好在家修养中，所以，暂不考虑接工作。 技能简介 精通使用H5，CSS3的页面还原 精通ES6特性 熟练使用vue+elementUI还原页面，搭建系统 熟悉bpmn.js，搭建前端工作流 精通uni-app，使用uView还原手机端页面，适配微信小程序，H5端 搭建公司内js工具包，组织小组成员搭建前端工具库 关于本站这是一个使用Hexo创建的，托管在GitHub上的个人博客。 域名CrazyStudent，是因为年少时候的想法。 我觉得在未知前，所有人都像学生一样，对未知要谦卑，因探索而疯狂，一直沿用至今。 远川嘛，算是我个人游戏中常用的网名，朋友都这么称呼我，我也喜欢这个名字。 联系方式 Github首页: https://github.com/CrazyStudent13 Gitee(码云)首页: https://gitee.com/CrazyStudent13","link":"/about/index.html"}],"posts":[{"title":"2023年的第一次手术（前）","text":"虽然做好了这次体检很糟糕的情况，但是没想到会这么糟糕。 甲状腺结节，穿刺验证之后，病理科给出判断——乳头状癌，考虑手术。 嗯，真是开年有惊喜的捏。 正文一开始查出来这结果，人懵了，毕竟只要沾上癌症之类的字样，基本等同于宣判死刑。 不过后来去找医生咨询了结果之后，大致可以接受。 这里把近况稍微做个梳理，也把我术前的心态记录一下。 现状 问题不是很严重，是一种较为常见病症，不是需要特殊命名的情况 手术可以解决，复发率不高，且对寿命等无影响，不会遗传 如果长期不解决的话，大致情况就是可能随淋巴扩散，产生其他问题 医保范围覆盖了该手术，报销之后，估计也就2-3k左右，不用考虑金钱的问题 难处 我周边没有空闲的朋友能帮忙，所以最终只能让家人来帮忙 离职后正处于搬完东西的时候，现在手里基本上没有什么日用品，不方便疗养 离职后，和预期不一样，所以房租没交，现在房东没说话，所以不稳定，不好规划 因为一开始挂号不在三甲医院，这个时候，想换医院做手术，要等不少时间，较为繁琐 下个月就要开始考试了，接下来复习和调理都很费事 苏州物价偏高，花销上可能会稍微出点问题 备选因为我没在三甲挂号，导致现在很多事情难以处理，如果接下来能够换到三甲医院，一切自然万事大吉。 但是如果没法换过去，只能按照如下三种备选方案做事了。 在相城人民医院直接准备手术，让家人过来帮忙照顾 回老家，动用老家的人脉在三甲医院手术 拖，等到手边的事情忙完了，再考虑手术 以上三种方案，都有不小的弊端，但是也只能是目前的无奈之选了。 经验 如果体检出麻烦的问题，一定要去三甲挂号！听人劝，吃饱饭，别为了省事绕远路，到头来只会更麻烦 第一次挂完号之后，后续可以直接拿着检测报告找医生，医生也不喜欢别人一直挂号 检测结果整理成档案，这便于下一位医生接手 医院在手术前，需要安排床位，据之前的同事的住院经验，这个时间等待的不是很长（希望如此） 确实需要一位能够相互扶持的亲近之人，不然真出了问题，朋友们是有自己的事的，他们可以帮你，但是无法陪伴你 结语身体永远是做事的本钱，无论你心中有着何等疯狂的想法，一定要有一副野蛮的体魄才能实现。 现在这个时间点，也完全不建议用身体去交换金钱————回报太低了。 最近把所有苏州同事推荐的有意思的点逛了一下，不过，最终还是觉得观前街的美食街有意思，要得火锅的番茄汤好喝。","link":"/2023/03/09/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%8B%E6%9C%AF%EF%BC%88%E5%89%8D%EF%BC%89/"},{"title":"2023年的第一次体检","text":"23年终于进入到了休息阶段，身体不行，打算休息一下了。 本来按照人生规划，这段时间是要进入职场中高层，开始弄大钱，过城市生活的，但是身体实在顶不住了。 而且看病这个事儿吧，我从来没想到会这么麻烦，特别记录一下，如果后续在遇到这种事，有个心理准备。 正文看病这个流程是个相当消耗时间的活儿，放在工作的时候，我还真没那么多时间。 现在算是离职状态，所以时间较为充足，而且终于能挂的上专家号了。之前周六周日都挂不上，现在终于能放心的等一回了。 挂号 尽可能的网上挂号，地方的公众号，小程序都有相关的功能 如果不是血检相关的事情，不要挂早上的，下午的相对来说人比较少 一般只有周一到周五能挂专家号，尽可能的提前查好 流程常规的流程如下 挂号，等叫号 医生诊断后，开药方 拿着单子去缴费 缴费完成后，去开药的药房拿药 注意事项 挂号可以用电子医保卡缴费，不必用真社保卡 挂号，如果当日值班的医生专家还在，依然可以提挂号排队 叫号如果错过，只要不是当天错过医生的在职时间，都可以商量，在叫号期间稍微商量下，可以补叫号。 中间流程如果要查B超，血检之类的，那时间可就长了。最好预估自己的病症，若涉及到这类检测，自己要预估时间，最好起步做好一天甚至两天的时间准备。 如果有些小手术之类的说法，最好问清是否会干扰行动能力，只要不干扰行动能力，一切都可启动孤胆英雄模式，硬抗就可以。 身体能力不能太过虚弱，过于肥胖，老迈，都需要其他人陪同，不能自己单独行动 病情今年这年初的检测，我都不知道自己这个身体是什么年纪的，高血压高血脂，中度脂肪肝，甲状腺结节，肾结石。 这一堆问题几乎让我以为自己是老年人，亏得自己年轻，看来不能太卷了。 甲状腺结节目前还没有出现病理检测，所以不知道是什么情况，希望问题不大。 主要是做甲状腺穿刺之后，嗓子上就像是有根针顶着，稍微剧烈的吞咽，说话等动作，或者情绪激动，嗓子就疼的不行。 2023-03-10，检测结果出现，疑似乳头状癌，需要手术（艹） 左肾结石这个目前看来问题不大，医生的意思是多喝点水，定期检查就行。这个还是得注意的，毕竟是肾。 中度至重度脂肪肝荤食得忌口了，这一年，疗养时间怕是吃不到几次荤食了。 高血压，高血脂盐，油估计都得节制了，医生的桌上写着，不要超过7g盐，感觉有点离谱。 因尿酸偏高，多吃低嘌呤食物，粗粮，减少饮酒。 颈部曲度消失这个只能去找正骨科的医生问问了，现在脖子确实很难受 结语因为医保在苏州，在没有弄清楚医保机制的前提下，只能先在这边用医保了。 对病症的确诊，远比想象的麻烦，作为没有什么关系的凡人，没想到看病这么麻烦啊，看来以后真的得好好学习身体的保养了。 如果对养生这块比较了解的朋友，可以在评论区留言，如果能推荐几本书就更好了，在这里提前谢谢了。","link":"/2023/03/03/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%93%E6%A3%80/"},{"title":"2023年的第一次手术（后）","text":"因乳头状细胞癌，所以需要切除右侧甲状腺，折腾了快两周，伤口终于快好了。 这里记录一下术后的日子，也算是缅怀一下这段不同寻常的时光吧。 正文梳理了一下住院前后流程，真是感觉这段时间蛮让人感慨的。 果然，就算说是小手术，对于身体来说，还是相当的遭罪啊。 术前问题因为这个病查出来的挺突然，手术前，心里还是做了一段时间的博弈，整理了如下问题。 我感觉后续如果再遇到大病了，都可以按照这个思考逻辑来，这里也给大家做个参考。 治疗方式具体都有什么？ 拖着不做可以吗？ 这个手术的后遗症是什么？ 手术费用是否会很多？医保能报多少？（有钱人不必考虑） 手术后调理恢复要多久？是否会耽误日常生活？ 我的手术是甲状腺切除，咨询了医生的意见之后，我自己评估了一下，可以接受，确实不是啥大问题。 只要手术切除甲状腺即可，不需要化疗，这病是危险性最小的癌症。 我这个甲状腺细胞乳头状癌拖着没啥，但癌细胞有扩散风险，尽管不高，但是要做。 后遗症就是以后都要吃优碘乐，而且手术如果出了意料外的情况，说不定会干扰声带的音色，但是医生自信9成可能不会出这种问题。 手术费用反而最不用担心，医保报了6成费用之后，自己缴费即可，术后结账我算了一下，拢共也就近4千。 手术调理按照医嘱即可，两周就差不多正常行动。 住院准备在确认必须要做手术后，事情就好办了。 和有住院经历的朋友确认了相关事宜后，我大概做了如下的准备。 带本子和笔，护士的嘱托会很多，如果不记录，后续忙起来容易忘 准备住院金，提前和医生确定好预期金额，到时候交就可以 确认医院附近的食堂和外卖取餐点，不然术后，自己和家人吃饭，找起来会是个问题 确认好手术时间之后，让家人在手术当天陪同就可以，如无必要，不必第一天让家人在医院就开始等着 如有必要，让家人带一床被褥，夜里如果保持通风，房间会偏冷 带一身换洗衣服，不过我住院时间很短，所以这个不需要 医院里有褪黑素，不过没用到，那天我靠着自己强大的意志力，在同房的呼噜声中睡着了 提前出院本来想写写手术的感觉，但是吧，手术全麻太给力。 医生说让我吸两口氧，结果吸完我就没意识了。 等到再醒我就被推出来了，好家伙，手术已经结束了？这过程，就是把我腰子拿了，我估计我都没有反应。 所以，手术没啥好说的。 反而是术后，我住院时候没细说多久，结果上午刚手术完，下午就和我说，第二天上午可以出院了。 这个速度快的我有点无语，当时为了吸出伤口内的血液，我脖子还插着一个导流管呢，根本不方便行动。 然而就是这么个状态，就让我出院了，属实离谱，后来我考虑了一下，觉得可能是医院床位不足的问题。 剩下的就没啥好说的了，第二天麻药劲儿过了，伤口也愈合的可以简单行动，就按照医生说的，交钱，收拾房间，走人。 术后恢复本来以为三两天就能恢复，但是没想到花了快两周时间，现在才差不多恢复结束。 两天后拆导流管 每三天换药，需要去医院 一周后拆线 如上，过了一周，然后又在家里躺了一周，嗓子吃饭和说话都不太好使，还是怪难受的。 不过，现在伤口恢复的差不多了，甚至吃了个火锅，挺好，一周没有吃点辣味，简直要死了。 但是目前没有完全恢复，稍微走动就会累，而且容易困，并且如果药稍微吃晚点，就容易腿疼。 结语这次的手术蛮让我感慨的，不论这次的病症是不是一开始的不规律作息及饮食，我都要考虑身体的稳定了。 我只是普通人，所以这也算是足够幸运了，虽然这个病出乎意料，却没有造成太大的困扰。 随着年龄越来越大，身体愈发破败，苍老是肉眼可见的，如果再这么玩下去，我确实必死无疑。 这像是命运的警告，亦是命运的垂怜。 希望接下来身体会好起来，希望我不会是个短命鬼。 人世间很精彩，现在正是时代交界的时刻，我很想见证。","link":"/2023/03/31/2023%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%8B%E6%9C%AF%EF%BC%88%E5%90%8E%EF%BC%89/"},{"title":"hexo个人博客搭建————命令整理","text":"虽然Hexo确实很好用，但是由于我对命令和配置的不熟悉，导致很多东西都不是很好用。 建议参考官网的文档，我梳理了一份属于自己的命令文档。 正文安装123npm install hexo -g #安装npm update hexo -g #升级 hexo init #初始化 简写1234hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览，会监视文件变动并自动更新，您无须重启服务器hexo d == hexo deploy #部署 其他123hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IP 模版 变量 描述 title 标题 layout 布局 date 文件建立日期 title 标题 categories 分类 tags 标签 12345title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43categories: Blogtags: [Hexo] 设置文章摘要123以上是文章摘要 &lt;!--more--&gt; 以下是余下全文 写作12hexo new page &lt;title&gt;hexo new post &lt;title&gt; 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 其他语雀同步插件之前个人使用了小冷的语雀对接插件，感觉很不错，这里也整理一下。 不过，现在语雀用我已经停用了，它总给我一种难受的感觉，我说不上来。 虽然语雀他们各方面整的都挺好，但是不知道为啥，用起来就是膈应。 安装 123npm i -g yuque-hexo# ornpm i --save-dev yuque-hexo Sync 1yuque-hexo sync Clean 1yuque-hexo clean","link":"/2019/02/11/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"},{"title":"hexo个人博客搭建————域名绑定","text":"电脑系统为window 10专业版，64位 这里默认大家已经完成了git博客的部署，接下来的操作，就是将git的地址，绑定到我们的个人域名 接下里的教程，我大致将过程分为三个阶段 准备阶段：准备自己购买自己的域名，配置域名解析 绑定阶段：在github上绑定自己的域名，并在本地设置CNAME文件，提交，完成域名的固定绑定 验证阶段：收尾，测试绑定是否成功 正文购买域名需要实名认证，然后购买，不过域名不贵，推荐随便买个cn的域名就行。 购买渠道很多，腾讯，阿里，华为等，我个人在阿里云买的域名。 crazystudent13.cn 域名解析以我使用的阿里云为例，我会打开管理控制台，点击解析。 按照下边的记录，配置解析，按照下方的表格去操作。 记录类型为A的，是github的网址，CNAME是个人博客的仓库。 主机记录 记录类型 解析请求来源 记录值 @ A 默认 185.199.108.153 @ A 默认 185.199.109.153 @ A 默认 185.199.110.153 @ A 默认 185.199.111.153 www CNAME 默认 crazystudent13.github.io 绑定域名进入自己的Git博客项目中，打开setting，下拉，找到Github Pages。 在输入框中输入我们买的域名（不要输入www.），完成内容。 如果没有立刻生效，等10分钟左右（dns的解析时间差不多是这个时间，具体可以看域名控制台的说明）。 固定域名这一步本来是不必要的，但是每次发布，域名就会失效。为了一劳永逸，这个得做。 在博客的source文件夹中，新建文件CNAME(没有后缀，什么后缀都没有，字母必须大写)。 将个人域名存入文件中，然后发布，等待。 crazystudent13.cn 验证绑定浏览器输入自己的域名，例如： 1www.crazystudent13.cn 如果您像以上我的博客那样，您也跳转到了自己的git博客，那就代表成功了。 而且就算提交文件，也不会覆盖掉域名设置。 结语至此，所有的工作全部做完了，一路看下来，其实利用Github创建博客是个很简单的事。 其实一开始，我是想利用VUE和语雀的接口做一个博客来锻炼自己技术的。 但是后来我觉得太过麻烦，而且过年又犯懒，加之网上不止一个人以个人博客为项目写了DEMO，这里自己再做，恐怕也有点过于重复，没多少意义了。 时隔数年，没想到还是用这玩意了，真的是有些令人唏嘘。","link":"/2019/02/10/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"},{"title":"hexo个人博客搭建————基础流程","text":"hexo搭建的流程几乎烂大街了，19年的时候搭建时候写的，没想到现在又用上了。 这是老早之前的文档，这次翻出来重新梳理搭建流程，完善几个细节，为了后续给其他人提供便利。 正文配置环境安装并配置好Node.js环境，只要常规的输入以下命令，如果输出版本号了，证明已经安装成功 1node -v 1npm -v 安装Git和配置好Git环境，同上，用git版本号来确定以下有没有问题 1git --version 注册项目Github账户注册，新建项目：账户名.github.io，并且需要勾选Initialize this repository with a README 比如我这里，是在GitHub上，建的CrazyStudent14.github.io项目。 注意：国内的码云实际上也是支持这个操作的，不过码云有个缺陷，就是如果你后续想绑定域名来访问这个博客的话，码云因为国内的政策问题，无法绑定，而github无所谓，所以，部署的时候，考虑清楚自己的需求。 本地准备这个流程有点长，主要是在本地完成博客的准备和构建 以下流程尽可能的全程命令行操作 本地自己先部署Hexo项目，在自己认为合适的地方创个文件夹。 我是在E盘建了一个blog文件夹，然后npm全局安装一个Hexo依赖 12E:\\&gt;cd gitpro/blogE:\\gitPro\\blog&gt;npm install hexo -g 安装完成hexo之后，hexo -v，查hexo的版本号，检查hexo是否安装成功 1E:\\gitPro\\blog&gt;hexo -v 至此，本地部署的前期工作完成，输入hexo init，初始化该文件夹（有点漫长的等待。。。） 完成安装后，出现Start blogging with Hexo！这就代表Hexo已经在这个文件夹下初始化成功可，在本地完成项目新建了。 1E:\\gitPro\\blog&gt;hexo init 这时候的项目，是个架子，没有安装依赖，相当于炒菜有锅没买菜一样，所以，需要npm来安装依赖。 输入npm install，安装所需要的组件，等安装成功之后就行了。 1npm install 输入hexo g，先完成项目构建 1E:\\gitPro\\blog&gt;hexo g 输入hexo s，开启服务器，访问本地化网址，如果没有端口占用的话，一般是http://localhost:4000/ 1E:\\gitPro\\blog&gt;hexo s 假如页面一直无法跳转，那么可能端口被占用了，输入“hexo server -p 端口号”来改变端口号。 这样的话，我们会直接启动http://localhost:5000/ 1E:\\gitPro\\blog&gt;hexo s -p 5000 准备秘钥这一步操作有点繁琐，我的教程只是个大纲，如果要是不清楚细节，可以在掘金详细搜一下这里的小标题，里边应该有很多详细操作。 注意：如果是首次设置git本地的秘钥，请按照如下流程操作，如果已经有秘钥了，其实生成部分可以跳过。 设置Git的user name和email我这里随便取个crazystudent14的假名字做演示，如果自己部署，不要抄名字，名字和邮箱换成自己的！ 12E:\\gitPro\\blog&gt;git config --global user.name &quot;crazystudent14&quot;E:\\gitPro\\blog&gt;git config --global user.name &quot;crazystudent14@test.com&quot; Git生成SSH密钥为了将Hexo与Github page联系起来，切换到C盘，准备生成秘钥文件 12C:\\Users\\crazystudent14&gt;cd C:\\Users\\crazystudent14\\.sshC:\\Users\\crazystudent14&gt;ssh-keygen -t rsa -C &quot;crazystudent14@163.com&quot; 判断id_rsa，id_rsa.pub，known_hosts这三个文件是否存在。 我这里是win系统，如果是linux和mac系统，自己查一下相关的命令，或者到对应的文件夹去看一下。反正就是看看这个文件夹下边有没有这是三个文件，有的话，可以继续做。 在github上添加key登录Github，点击头像下的settings，找到左侧的SSH and GPG keys。 点击new ssh key按钮，将id_rsa.pub文件里的内容复制上去，title就填写blog（这个title就是告诉你，这个Key是做什么用的，相当于备注） 检测Key是否添加成功输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 1ssh -T git@coding.net 准备发布好了，一切终于快结束了，我们再确认下流程。 配置完成本地环境 在github注册好项目 本地完成Hexo博客的准备 在github添加自己的本地生成的key 确认以上流程完成后，我们可以进行最后一步了。 设置deploy在博客项目的根件夹中，我这里是E:\\gitPro\\blog，找到_config.yml文件。 配置Deployment，修改repo值（在末尾），repo值是你在github项目里的ssh（右下角） 1234deploy: type: 'git' repository: 'git@github.com:CrazyStudent14/CrazyStudent14.github.io.git' branch: 'master' 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save 1npm install hexo-deployer-git --save 部署deploy1hexo d -g 项目根目录中，执行命令hexo d -g，生成以及部署了（记住这个命令，这是用来把文章提交到Github上的命令，以后会经常用的） 部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章 写新博客通过以下命令创建新文件，我们会在source/_posts目录下将会看到已经创建的文件，然后在新文件中写文章就行了。 写完之后，继续部署ok。 1hexo new post &quot;博客名&quot; 好了，到此为止，最基本的hexo+github搭建流程结束了。 我们看看效果吧。 外部访问在建好的项目，点击右侧settings的tab栏目，向下拉到GitHub Pages，你会看到那边有个网址 1https://CrazyStudent14.github.io 这时候，你已经有了一个部署在github上的hexo博客了。","link":"/2019/02/10/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B/"},{"title":"hexo个人博客搭建————自动部署","text":"之前写博客的时候还没注意，后来在修改博客的时候，发现不停的敲命令发布确实烦。 为了解决博客发布占用时间的问题，查了一圈论坛，和相关人员的解决方案。 最终，我选中了github Action，对于托管在github上的hexo来说，这玩意真是好用。 另外，我目前只部署到github上，暂时不考虑部署到gitee和coding上。 正文方案选择在正式确立工作流之前，这里是有两个方案的。 在GIthub.io那个仓库中新建源码分支，等到分支提交时候，触发命令，然后github流程化部署，博客上线 新建一个仓库，用来管理博客，博客每次提交，就会触发命令，然后github流程化的自动部署，博客上线 这两种方案，一开始我更倾向于第一种，因为没什么必要，不多开项目，总是好的。 但是后来考虑到源码内容中，总会有这种隐私性质的秘钥之类的，放在开源项目确实不好。 而且，目前很多论坛都倾向于第二种方案，想了想，那这里选择新建仓库吧。 新建仓库参考市面上大多数人的选择，我在github建了一个blog仓库，注意新仓库是私有的。 因为，这个仓库是用来存博客源码的，为了规避秘钥被别人看到，所以不能设置为public！ 在新仓库准备完成之后，我们清空本地仓库的远程链接，然后，让本地的hexo博客源码和远程新仓库完成对接。 这里我魔改了一下安知鱼大佬的流程，咳咳，如果要新建仓库的话，就参考他的教程，我这是对已有的源码修改。 删除博客主题的git文件，比如我这里是anatolo。我删除了/themes/anatolo/.git文件，避免主题文件夹下的.git文件夹其被识别成子项目，无法被上传到源码仓库。 在博客根目录下，运行指令，我这里是在E:\\gitPro\\blog 123git init #初始化git remote add origin git@github.com:crazystudent13/blog.gitgit checkout -b main # 切换到main分支， 添加屏蔽项 因为能够使用指令进行安装的内容不包括在需要提交的源码内，所有我们需要将这些内容添加到屏蔽项，表示不上传到 github 上。这样可以显著减少需要提交的文件量和加快提交速度。 我再E:\\gitPro\\blog\\.gitignore,屏蔽了以下文件，如果你应用了主题里边的配置项，记得，主题里边的gitignore文件也要完成修改。 123456789TXT.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/.deploy_git*/.idea 之后再运行 git 提交指令，将博客源码提交到 github 上。 123git add .git commit -m &quot;github action update&quot;git push origin main 此时你的主题文件夹若已经被正常上传，并且你也添加了主题文件夹下的.git 文件夹的屏蔽项。那你可以考虑把第二步移走或删除的.git放回来，用作以后升级。（个人觉得这种升级方式不是很好） 获取权限为了确保交由Github Action来持续部署时，Github Action 具备足够的权限来进行 hexo deploy 操作,需要先获取 Token 访问 Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;generate new token。 注意事项： 名称自己琢磨功能随便填下就行，我这里填的是自动部署。 必须勾选 repo 项 和 workflows 项。 token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置了。 建立流程打开github在项目的actions下，点击new workflow，新建一个autodeploy.yml的文件就行，然后把我下边的脚本放上去，就能完成博客的自动化部署了。 我之前用别人的脚本并未一次通关，所以自己查资料调整了一下，这里放调整结果。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162name: 自动部署# 当有改动推送到main分支时，启动Actionon: push: branches: [ &quot;mian&quot; ] #2020年10月后github新建仓库默认分支改为main，注意更改 release: types: - publishedjobs: deploy: runs-on: ubuntu-latest steps: - name: 检查分支 uses: actions/checkout@v2 with: ref: mian - name: 安装 Node uses: actions/setup-node@v1 with: node-version: &quot;16.x&quot; - name: 安装 Hexo run: | export TZ='Asia/Shanghai' npm install hexo-cli -g - name: 缓存 Hexo id: cache-npm uses: actions/cache@v3 env: cache-name: cache-node-modules with: path: node_modules key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }} restore-keys: | ${{ runner.os }}-build-${{ env.cache-name }}- ${{ runner.os }}-build- ${{ runner.os }}- - name: 安装依赖 if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }} run: | npm install gulp-cli -g #全局安装gulp npm install --save - name: 生成静态文件 run: | hexo clean hexo generate - name: 部署到Github uses: JamesIves/github-pages-deploy-action@v4 with: token: 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 repository-name: CrazyStudent13/CrazyStudent13.github.io branch: master folder: public commit-message: &quot;${{ github.event.head_commit.message }} Updated By Github Actions&quot; 这里有很多人直接按照教程走会出现有些坑，我这里稍微提一下我遇到的情况： 不要乱改命令，上述代码中checkout@v2，这个对应的是功能，不是版本。 注意本地和远端的冲突，在提交完成代码之后，可以在github远端创建自动部署脚本，不用本地新建文件夹，去产生冲突。 注意博客源码分支名称，2021年修改之后，新建的项目主分支应该是main，如果你用到的脚本中有些地方写的是master，记得改成main。 注意博客分支名称，也不要完全都改成main分支，我的博客是2019年部署的，废弃很久不用，现在又捡起来，所以分支依然还是master，最后提交的脚本，如果是提交到main，就会报错。 自己主题内的配置要提交，不然构建博客的时候，页面构造命令可能会出现跑不通的情况。 移除不需要的依赖，不然可能会造成不必要的错误，另外这样也减少下载时间。 尝试AI帮忙写脚本，目前2023年，chatgpt发展的还不够狂野，但是我试过，是可以书写这类脚本的。 调试流程在完成上述内容之后，基本上应该是一步到位的完成。 如果要是不成，可以打开actions，一步步点进去，看到一个类似shell命令行的界面，里边会将哪个脚本报错，具体步骤的问题提示出来，按照报错排查就行。 具体操作参考安知鱼的视频讲解 结语在2019年知道有这个，但是没怎么用过。 没想到几年不见，自动化部署流程这么好用了，看来我这几年的工作，导致我的眼界太不宽阔了。 这里也非常感谢大佬安知鱼这篇文档的指路，真的对我的自动化部署要求产生了很大的助力。 参考使用 Github Action 自动部署 | 安知鱼 (anzhiy.cn) hexo完成github action自动部署","link":"/2023/03/04/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"},{"title":"nas使用心得笔记————入门篇","text":"本系列文档给还没入坑的小伙伴一个介绍引导，如有说错，还请在评论区多多指教。 如果你是个整准备入坑的小白，可以试着和群里的大家交流搞机心得（哎嘿）。 当然，欢迎老手指正，也欢迎新手提问。 正文本篇内容作为入门内容，只告诉大家怎么选购，选购后可能会遇到哪些坑。 所以，这里并不会详细的深入探讨内网穿透，家庭音影搭建，脚本部署等问题。 需求分析nas的详细定义去看百度百科，就我个人来看，这个东西就是私有的个人云盘。 正常的电脑轻度用户，一般是不会有这种需求的。所以，我们首先分析需求，这里我列一下可能的方向。 家庭影院，有很多电影资源，不仅在局域网看，也想在公网远程观看 大文件备份，手里有很多照片，文档，压缩包之类的文件需要备份 后台下载，有很多本机存不下，又想要下载的时候，可以使用。 担心网盘检测，被净网行动教育过，不安心厂商网盘的检验 如果有以上的一种或者多种需求，那么，我个人建议，可以考虑综合实力使用nas。 作为私人云盘来说，nas的存在，确实让很多事情方便了很多。 当然，如果你只是想存备份，不考虑远程备份。我推荐考虑硬盘柜，只要共振问题不大，就可入手。 入门条件在需求分析之后，我们确认如果有以下硬性条件，的就可以考虑入门了。 时间较充裕，如果您每日加班到深夜，就略过吧，这玩意如果想折腾的合心意，较为花时间 金钱较为充裕，至少保证有4k以上的预算，不会说因为买个机器，接下来几个月都要吃咸菜馒头算日子 有一个较为稳定的住所，保证网络和供电，可长期规划，毕竟nas更偏向于远程访问 有一定的搞机常识，对于软硬件知识有基础的了解 动手能力强，善用搜索引擎，能保证在B站或者其他论坛解决一些问题 主机挑选在正式罗列之前，我先列出nas机器的评判标准（个人主观意见）。 后续如果我们选购nas，拿不定评价方向，可以参考如下思路进行评测，权重按照自己的要求衡量。 系统生态，这个对于比较喜欢折腾的人来说，比较重要，社区的活力一般决定厂商是否走的长远 是否耗电，不要产品便宜，设备烧电，不然长久下来，电费也是一笔大开支 硬件损耗，是否会对机械硬盘造成强烈损耗，不然数据损毁恢复起来，也是一笔不小的开支 噪音问题，家用nas虽然设备垃圾，但是相对的，散热要求不高，所以噪音一般不大 产品价格，性价比也是个比较重要的参考项，不过一定要在满足硬件标准的情况下考虑 群晖系列不差钱的富哥首选，高薪打工人的备选，穷鬼别沾，真的太贵了！ 光价格，如果要是六盘位，八盘位，就足足赶得上一台高配电脑了，这还不算硬盘的裸机价格。 我个人觉得这实在是高的离谱，即便我买的也是这个系列，但我依然感觉这个价格很咋舌，实在是有种智商税的感觉了。 不过，我当时主要是没太多时间折腾，而且，它贵确实有贵的理由，我这里罗列一下原因 正版系统，不担心各种软件使用不稳定的问题，不折腾 功耗足够低，不会担心成为国家电网的合作伙伴 噪音相对不大，卧室可以放，不至于和服务器一样，一开就是飞机起飞 盗版系统社区发展好，社区足够的强大，大多数偏门的社区套件，都是从盗版社区发源来的 有客服，真出了搞不定的问题，我能找客服帮忙做事 当然，不是没有缺陷，群晖的机器用的设备较拉胯，一般来说，个人组的黑群晖能吊着打正版群晖，这个看个人取舍。 其他厂商除了群晖，市面上确实之后其他厂商了，毕竟盗版系统刷群晖的居多，有什么问题都好解决。 尽管市面上威联通，绿联，还有各种厂商都做了很多自家的nas，尤其是威联通的性价比还不错。 但是，如果系统出了啥问题，大多数都只能去各种社区论坛找方案，找客服进度缓慢，所以这里不是很推荐。 黑群晖现在市面上是有一些自售的成品，我看了一下价格，性价比非常高。 而且，烧盘问题已经解决了，早期黑群晖系统因为系统休眠问题，对硬盘损耗极大，几个月就能烧掉一个新硬盘。 在解决掉烧盘问题之后，现在的黑群晖，几乎算是没有短板，我个人十分推荐组一个，推荐理由我这里也列一下。 性能好，硬件自选，不用被官方束缚，所以很多人组的快赶上服务器了 价格超低，基本上800-1000，就能组一台暴打正版的高性能设备，盘位还多 社区解决方案多，因为早期折腾的人多，所以问题也多，所以解决方案就多 基本上和正版没什么差别的系统，现在基本上和官方一样了，只要刷白，问题不大 噪音也不大，卧室可用 这里，也列一下大佬给出的组合作为参考（2023） 主板，b365 cpu，g4560 机箱，蜜獾超存机箱（闲鱼上找，其他平台要么没有要么很贵） 内存条，威刚万紫千红8/16G 硬盘相关硬盘是nas的核心，毕竟作为特化存储的设备，必然是要用机械硬盘的，固态盘的虽然快，但因为它的结构，所以它不能作为长久存储方案。 我个人推荐先看完硬件茶谈的科普，这个科普详尽而且务实，弄明白了，相信你自己心中也有一套选购标准。 我这里主要说一些我已经整理到的入门信息，仅供参考使用 不选瓦楞盘(SMR)，选垂直盘（CMR）！具体参考硬件茶谈的科普 硬盘缓存尽可能的选大的，硬盘在写入数据的时候，大缓存硬盘相对来说频率会低一些，响声不会太大，当然出问题的概率也更高 机械盘如果没有特别价位参考的话，推荐按照180/T的单价来算，一般来说，16-18T左右的硬盘性价比最高 具体容量大小自行决定，如果只想组家庭影院，推荐上企业盘 是否组raid，要看自己整理的数据是否重要，性价比是否值得，如果是企业数据，推荐组Raid1 不要无脑Raid0，组Raid0虽然读写速度快，但是一旦出问题，所有数据会全部崩盘，所以不要乱来 机械硬盘的寿命很长，据说有十年都没问题的，你也可以选择冷备份，每隔两三年拿出来读写一次就可以 使用相关 尽量放在网络稳定的环境里，使用舒心，硬盘如果长期上传下载也不会出现问题 使用环境避免潮湿，灰尘，保持通风，硬盘还是蛮娇贵的，机器无所谓 电力尽可能的稳定，能够保证不会因硬关机导致机械硬盘损坏 尽量不要放在频繁振动的地方，不然会影响硬盘的指针精度，导致硬盘损毁 结语本来只是打算简单写篇入门文档，没想到一写就写了一天。 信息收集不易，后续如果有机会，我会继续更新nas相关文档。 如果有兴趣，可以加群813222463，大家一起讨论。","link":"/2023/03/11/nas%E4%BD%BF%E7%94%A8%E5%BE%97%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E7%AF%87/"},{"title":"npm工具包————发布","text":"本次开源的方法是cat-tools，目前该工具包已经在npm上可下载，公司多个项目使用，没出什么问题。 尽管市面上开源了loadsh，moment.js，day.js这类的工具包，但是总有不能满足需求的时候。 所以，我觉得，还是得造一个趁手的工具包。 正文一开始，是不同的项目中，有一些独立的工具类方法的整合。 后来，独立项目越来越多，不同项目之间，同步工具类方法是个大问题。 如果某项目加入了新的方法，我就要同步复制到很多项目！ 折腾很多次之后，实在感觉耽误时间，且犯错太多，所有就有了本次流程记录。 打包在项目开发完成之后，我们首先要打包项目，生成一个能够发布的dist包。 当然，ui包可能有自己的结构，这个只要开发那边确认之后就行。 注册然后，我们需要到npm官网注册一个账号。 如果之前有npm账号的人，可以略过这步。 换源在登录之前需要保证你现在使用的 npm源 是指向 npm 的。 先安装 nrm 工具查看和切换 npm 源 nrm 安装命令 1npm install nrm -g 查看当前使用的 npm 源 12nrm ls #查看包源列表nrm use npm #切换包源列表 在执行nrm use npm之后，如果命令行中有如下提示，代表切换成功 1Registry has been set to: https://registry.npmjs.org/ 登录在终端使用一下命令登录 1npm login 然后根据提示输入账号、密码、邮箱，同时还有注册邮箱的一次验证码。 以我为例，我按照下边的完成填写之后，就算是登录了。 123456Username: *********Password: ********Email: (this IS public) *********@qq.comnpm notice Please check your email for a one-time password (OTP)Enter one-time password from your authenticator app: 04471694Logged in as crazystudent13 on https://registry.npmjs.org/. 发布123npm publish # 发布公有包或npm publish --access public # 发布带命名空间的包，npm publish默认私有需要付费 其他迭代需要修改版本号如果项目更新需要重新发布，必须修改 package.json 里的版本号。 版本号只能不断往上增加，哪怕你后边版本号拖的很长也可以。 1&quot;version&quot;: &quot;0.0.2&quot; 包权限管理很多时候，一个项目包往往不只是你一个人在管理的，这时需要给其他一起维护的同学开通发布的权限，相关使用命令如下： 12345678# 查看模块 owner, 其中 demo 为模块名称$ npm owner ls demo# 添加一个发布者, 其中 xxx 为要添加同学的 npm 账号$ npm owner add xxx demo# 删除一个发布者$ npm owner rm xxx demo 结语选择npm，也是因为用的人多，出了问题，论坛的解决方案应该多。 其实一开始想过其他的同步方案，比如用一个Git来做同步管理。 但是后来考虑到用的人少，隐患大，而且，这玩意也许不止我们一个人可以用，干脆开源吧。 开源的项目，如果别人用出了问题，他们也会提示，方便了别人，也促进了自己，挺好的。 参考原生 node 搭建最基础的 npm 工具包 使用npm发布一个vue组件 一文搞定 npm 包发布与管理 规范化开发并发布npm包","link":"/2023/03/05/npm%E5%B7%A5%E5%85%B7%E5%8C%85%E2%80%94%E2%80%94%E5%8F%91%E5%B8%83/"},{"title":"注册及使用chatGPT","text":"风云激荡，时代变幻，人工智能，你终于来了。 本来以为这玩意，会和核聚变一样永远差50年，但是没想到，他现在就来了，而且以如此呼啸的方式。 不过，既来之，则安之，我们这里记录一下注册方式，当然，随着形式变化，该文档会不定期修改。 正文本来以为会很麻烦，但是没想到很简单，整个流程不过就十分钟左右就完了。 如果是经常使用这些墙外软件的朋友，估计会更快。 邮箱注册在注册之前，先注意满足以下的前提 更换梯子节点，尽量不要选择东亚和俄罗斯，选择东南亚和欧洲节点 最好清理一下页面缓存 如果不确定自己IP已经切换到境外，可以使用ipinfo.io看一下，只要信息框中的timezone显示不是china就行。 满足以上条件之后，在chatGPT官网，点击Try chatGPT，之后sign up进入注册流程就好 1Signup is currently unavailable, please try again later！ 如果你正常填写邮箱和密码之后，出现上述提示，那你排查注册的邮箱有无如下情况 QQ邮箱，foxmail邮箱 163邮箱，网易邮箱yeah.net，126邮箱 新浪邮箱 Outlook、hotmail邮箱（只能通过快捷登录，也就是Continue with Microsoft Account）2023年4月2日更新：目前微软邮箱已经不能注册ChatGPT，使用Continue with Microsoft Account这种方式也不行。 eud.cn邮箱 Gmail(只能通过快捷登录，也就是Continue with Google） 主要是现在chatGPT封禁了东亚区的注册，所以，以上邮箱会无效。 如果你暂时没有好的解决办法，我推荐你使用自定义域名的邮箱，或者公司提供的企业邮箱即可。 获取手机验证码完成了上述的邮箱注册之后，可能会需要当前用户提供手机号，这里主要用境外手机号，填写验证码就行。 选择好自己手机号对应的国家 尽可能的不选择东亚这块的国家注册手机号 针对墙内用户，如果有自己的海外手机号，那没什么好说的，用自己的海外手机号验证码注册一下就行。 但是如果你没有海外手机号，可以注册sms-activate，充值就可以，允许使用支付宝的。 推荐这里参考这个文档：如何使用sms-activate服务 - 知乎 (zhihu.com) 进入页面之后，左侧选择OpenAI，然后选一个国家，按照教程的流程注册一下就行。 这里推荐选择东欧的一些国家，比如罗马尼亚（Romania）之类的，因为最近似乎有针对亚洲国家封禁的情况，这个还是挺尬的。 填入验证码之后，chatGPT就注册好了，之后就可以用了。 结语对于如此强劲的新技术，在初步体验之后，我实在是无法拒绝。 也许，新的技术奇点已经到了，未来真是值得期待啊。 参考链接ChatGPT无法注册的原因错误提示：Signup is currently unavailable, please try again later 如何使用sms-activate服务 - 知乎 (zhihu.com)","link":"/2023/04/02/%E6%B3%A8%E5%86%8C%E5%8F%8A%E4%BD%BF%E7%94%A8chatGPT/"}],"tags":[{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"养生","slug":"养生","link":"/tags/%E5%85%BB%E7%94%9F/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"nas","slug":"nas","link":"/tags/nas/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"ai","slug":"ai","link":"/tags/ai/"}],"categories":[{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"},{"name":"非工作技术","slug":"非工作技术","link":"/categories/%E9%9D%9E%E5%B7%A5%E4%BD%9C%E6%8A%80%E6%9C%AF/"}]}